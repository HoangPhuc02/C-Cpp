
stm32_ring_buffer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004964  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08004a70  08004a70  00014a70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ad8  08004ad8  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  08004ad8  08004ad8  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004ad8  08004ad8  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ad8  08004ad8  00014ad8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004adc  08004adc  00014adc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08004ae0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000180  20000080  08004b60  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000200  08004b60  00020200  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   000108e3  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022ec  00000000  00000000  0003098c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001038  00000000  00000000  00032c78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f78  00000000  00000000  00033cb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000185bf  00000000  00000000  00034c28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012119  00000000  00000000  0004d1e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d690  00000000  00000000  0005f300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ec990  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049d8  00000000  00000000  000ec9e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000080 	.word	0x20000080
 8000128:	00000000 	.word	0x00000000
 800012c:	08004a58 	.word	0x08004a58

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000084 	.word	0x20000084
 8000148:	08004a58 	.word	0x08004a58

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	; 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_dmul>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d2:	bf1d      	ittte	ne
 80004d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d8:	ea94 0f0c 	teqne	r4, ip
 80004dc:	ea95 0f0c 	teqne	r5, ip
 80004e0:	f000 f8de 	bleq	80006a0 <__aeabi_dmul+0x1dc>
 80004e4:	442c      	add	r4, r5
 80004e6:	ea81 0603 	eor.w	r6, r1, r3
 80004ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f6:	bf18      	it	ne
 80004f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000500:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000504:	d038      	beq.n	8000578 <__aeabi_dmul+0xb4>
 8000506:	fba0 ce02 	umull	ip, lr, r0, r2
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000512:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000516:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051a:	f04f 0600 	mov.w	r6, #0
 800051e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000522:	f09c 0f00 	teq	ip, #0
 8000526:	bf18      	it	ne
 8000528:	f04e 0e01 	orrne.w	lr, lr, #1
 800052c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000530:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000534:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000538:	d204      	bcs.n	8000544 <__aeabi_dmul+0x80>
 800053a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053e:	416d      	adcs	r5, r5
 8000540:	eb46 0606 	adc.w	r6, r6, r6
 8000544:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000548:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800054c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000550:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000554:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000558:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800055c:	bf88      	it	hi
 800055e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000562:	d81e      	bhi.n	80005a2 <__aeabi_dmul+0xde>
 8000564:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000568:	bf08      	it	eq
 800056a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056e:	f150 0000 	adcs.w	r0, r0, #0
 8000572:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800057c:	ea46 0101 	orr.w	r1, r6, r1
 8000580:	ea40 0002 	orr.w	r0, r0, r2
 8000584:	ea81 0103 	eor.w	r1, r1, r3
 8000588:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800058c:	bfc2      	ittt	gt
 800058e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000592:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000596:	bd70      	popgt	{r4, r5, r6, pc}
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f04f 0e00 	mov.w	lr, #0
 80005a0:	3c01      	subs	r4, #1
 80005a2:	f300 80ab 	bgt.w	80006fc <__aeabi_dmul+0x238>
 80005a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005aa:	bfde      	ittt	le
 80005ac:	2000      	movle	r0, #0
 80005ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b2:	bd70      	pople	{r4, r5, r6, pc}
 80005b4:	f1c4 0400 	rsb	r4, r4, #0
 80005b8:	3c20      	subs	r4, #32
 80005ba:	da35      	bge.n	8000628 <__aeabi_dmul+0x164>
 80005bc:	340c      	adds	r4, #12
 80005be:	dc1b      	bgt.n	80005f8 <__aeabi_dmul+0x134>
 80005c0:	f104 0414 	add.w	r4, r4, #20
 80005c4:	f1c4 0520 	rsb	r5, r4, #32
 80005c8:	fa00 f305 	lsl.w	r3, r0, r5
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f205 	lsl.w	r2, r1, r5
 80005d4:	ea40 0002 	orr.w	r0, r0, r2
 80005d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e4:	fa21 f604 	lsr.w	r6, r1, r4
 80005e8:	eb42 0106 	adc.w	r1, r2, r6
 80005ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f0:	bf08      	it	eq
 80005f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f1c4 040c 	rsb	r4, r4, #12
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f304 	lsl.w	r3, r0, r4
 8000604:	fa20 f005 	lsr.w	r0, r0, r5
 8000608:	fa01 f204 	lsl.w	r2, r1, r4
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	f141 0100 	adc.w	r1, r1, #0
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f205 	lsl.w	r2, r0, r5
 8000630:	ea4e 0e02 	orr.w	lr, lr, r2
 8000634:	fa20 f304 	lsr.w	r3, r0, r4
 8000638:	fa01 f205 	lsl.w	r2, r1, r5
 800063c:	ea43 0302 	orr.w	r3, r3, r2
 8000640:	fa21 f004 	lsr.w	r0, r1, r4
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	fa21 f204 	lsr.w	r2, r1, r4
 800064c:	ea20 0002 	bic.w	r0, r0, r2
 8000650:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f094 0f00 	teq	r4, #0
 8000664:	d10f      	bne.n	8000686 <__aeabi_dmul+0x1c2>
 8000666:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066a:	0040      	lsls	r0, r0, #1
 800066c:	eb41 0101 	adc.w	r1, r1, r1
 8000670:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000674:	bf08      	it	eq
 8000676:	3c01      	subeq	r4, #1
 8000678:	d0f7      	beq.n	800066a <__aeabi_dmul+0x1a6>
 800067a:	ea41 0106 	orr.w	r1, r1, r6
 800067e:	f095 0f00 	teq	r5, #0
 8000682:	bf18      	it	ne
 8000684:	4770      	bxne	lr
 8000686:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	eb43 0303 	adc.w	r3, r3, r3
 8000690:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000694:	bf08      	it	eq
 8000696:	3d01      	subeq	r5, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1c6>
 800069a:	ea43 0306 	orr.w	r3, r3, r6
 800069e:	4770      	bx	lr
 80006a0:	ea94 0f0c 	teq	r4, ip
 80006a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a8:	bf18      	it	ne
 80006aa:	ea95 0f0c 	teqne	r5, ip
 80006ae:	d00c      	beq.n	80006ca <__aeabi_dmul+0x206>
 80006b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b4:	bf18      	it	ne
 80006b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ba:	d1d1      	bne.n	8000660 <__aeabi_dmul+0x19c>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
 80006ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ce:	bf06      	itte	eq
 80006d0:	4610      	moveq	r0, r2
 80006d2:	4619      	moveq	r1, r3
 80006d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d8:	d019      	beq.n	800070e <__aeabi_dmul+0x24a>
 80006da:	ea94 0f0c 	teq	r4, ip
 80006de:	d102      	bne.n	80006e6 <__aeabi_dmul+0x222>
 80006e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e4:	d113      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006e6:	ea95 0f0c 	teq	r5, ip
 80006ea:	d105      	bne.n	80006f8 <__aeabi_dmul+0x234>
 80006ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f0:	bf1c      	itt	ne
 80006f2:	4610      	movne	r0, r2
 80006f4:	4619      	movne	r1, r3
 80006f6:	d10a      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000704:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000712:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000716:	bd70      	pop	{r4, r5, r6, pc}

08000718 <__aeabi_ddiv>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8a7 	bleq	8000886 <__aeabi_ddiv+0x16e>
 8000738:	eba4 0405 	sub.w	r4, r4, r5
 800073c:	ea81 0e03 	eor.w	lr, r1, r3
 8000740:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000744:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000748:	f000 8088 	beq.w	800085c <__aeabi_ddiv+0x144>
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000754:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000758:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800075c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000760:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000764:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000768:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800076c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000770:	429d      	cmp	r5, r3
 8000772:	bf08      	it	eq
 8000774:	4296      	cmpeq	r6, r2
 8000776:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077e:	d202      	bcs.n	8000786 <__aeabi_ddiv+0x6e>
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	ea4f 0232 	mov.w	r2, r2, rrx
 8000786:	1ab6      	subs	r6, r6, r2
 8000788:	eb65 0503 	sbc.w	r5, r5, r3
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000796:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079a:	ebb6 0e02 	subs.w	lr, r6, r2
 800079e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a2:	bf22      	ittt	cs
 80007a4:	1ab6      	subcs	r6, r6, r2
 80007a6:	4675      	movcs	r5, lr
 80007a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f8:	d018      	beq.n	800082c <__aeabi_ddiv+0x114>
 80007fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000802:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000806:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000812:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000816:	d1c0      	bne.n	800079a <__aeabi_ddiv+0x82>
 8000818:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800081c:	d10b      	bne.n	8000836 <__aeabi_ddiv+0x11e>
 800081e:	ea41 0100 	orr.w	r1, r1, r0
 8000822:	f04f 0000 	mov.w	r0, #0
 8000826:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082a:	e7b6      	b.n	800079a <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	bf04      	itt	eq
 8000832:	4301      	orreq	r1, r0
 8000834:	2000      	moveq	r0, #0
 8000836:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083a:	bf88      	it	hi
 800083c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000840:	f63f aeaf 	bhi.w	80005a2 <__aeabi_dmul+0xde>
 8000844:	ebb5 0c03 	subs.w	ip, r5, r3
 8000848:	bf04      	itt	eq
 800084a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000852:	f150 0000 	adcs.w	r0, r0, #0
 8000856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000860:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000864:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000868:	bfc2      	ittt	gt
 800086a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000872:	bd70      	popgt	{r4, r5, r6, pc}
 8000874:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000878:	f04f 0e00 	mov.w	lr, #0
 800087c:	3c01      	subs	r4, #1
 800087e:	e690      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000880:	ea45 0e06 	orr.w	lr, r5, r6
 8000884:	e68d      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000886:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088a:	ea94 0f0c 	teq	r4, ip
 800088e:	bf08      	it	eq
 8000890:	ea95 0f0c 	teqeq	r5, ip
 8000894:	f43f af3b 	beq.w	800070e <__aeabi_dmul+0x24a>
 8000898:	ea94 0f0c 	teq	r4, ip
 800089c:	d10a      	bne.n	80008b4 <__aeabi_ddiv+0x19c>
 800089e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a2:	f47f af34 	bne.w	800070e <__aeabi_dmul+0x24a>
 80008a6:	ea95 0f0c 	teq	r5, ip
 80008aa:	f47f af25 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008ae:	4610      	mov	r0, r2
 80008b0:	4619      	mov	r1, r3
 80008b2:	e72c      	b.n	800070e <__aeabi_dmul+0x24a>
 80008b4:	ea95 0f0c 	teq	r5, ip
 80008b8:	d106      	bne.n	80008c8 <__aeabi_ddiv+0x1b0>
 80008ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008be:	f43f aefd 	beq.w	80006bc <__aeabi_dmul+0x1f8>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e722      	b.n	800070e <__aeabi_dmul+0x24a>
 80008c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008cc:	bf18      	it	ne
 80008ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d2:	f47f aec5 	bne.w	8000660 <__aeabi_dmul+0x19c>
 80008d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008da:	f47f af0d 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e2:	f47f aeeb 	bne.w	80006bc <__aeabi_dmul+0x1f8>
 80008e6:	e712      	b.n	800070e <__aeabi_dmul+0x24a>

080008e8 <__aeabi_d2f>:
 80008e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008ec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008f0:	bf24      	itt	cs
 80008f2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008f6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008fa:	d90d      	bls.n	8000918 <__aeabi_d2f+0x30>
 80008fc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000900:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000904:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000908:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800090c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000910:	bf08      	it	eq
 8000912:	f020 0001 	biceq.w	r0, r0, #1
 8000916:	4770      	bx	lr
 8000918:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800091c:	d121      	bne.n	8000962 <__aeabi_d2f+0x7a>
 800091e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000922:	bfbc      	itt	lt
 8000924:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000928:	4770      	bxlt	lr
 800092a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800092e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000932:	f1c2 0218 	rsb	r2, r2, #24
 8000936:	f1c2 0c20 	rsb	ip, r2, #32
 800093a:	fa10 f30c 	lsls.w	r3, r0, ip
 800093e:	fa20 f002 	lsr.w	r0, r0, r2
 8000942:	bf18      	it	ne
 8000944:	f040 0001 	orrne.w	r0, r0, #1
 8000948:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800094c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000950:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000954:	ea40 000c 	orr.w	r0, r0, ip
 8000958:	fa23 f302 	lsr.w	r3, r3, r2
 800095c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000960:	e7cc      	b.n	80008fc <__aeabi_d2f+0x14>
 8000962:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000966:	d107      	bne.n	8000978 <__aeabi_d2f+0x90>
 8000968:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800096c:	bf1e      	ittt	ne
 800096e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000972:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000976:	4770      	bxne	lr
 8000978:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800097c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000980:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_f2iz>:
 8000988:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800098c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000990:	d30f      	bcc.n	80009b2 <__aeabi_f2iz+0x2a>
 8000992:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000996:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800099a:	d90d      	bls.n	80009b8 <__aeabi_f2iz+0x30>
 800099c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80009a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009a4:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009a8:	fa23 f002 	lsr.w	r0, r3, r2
 80009ac:	bf18      	it	ne
 80009ae:	4240      	negne	r0, r0
 80009b0:	4770      	bx	lr
 80009b2:	f04f 0000 	mov.w	r0, #0
 80009b6:	4770      	bx	lr
 80009b8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80009bc:	d101      	bne.n	80009c2 <__aeabi_f2iz+0x3a>
 80009be:	0242      	lsls	r2, r0, #9
 80009c0:	d105      	bne.n	80009ce <__aeabi_f2iz+0x46>
 80009c2:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80009c6:	bf08      	it	eq
 80009c8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009cc:	4770      	bx	lr
 80009ce:	f04f 0000 	mov.w	r0, #0
 80009d2:	4770      	bx	lr

080009d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009d8:	4b08      	ldr	r3, [pc, #32]	; (80009fc <HAL_Init+0x28>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a07      	ldr	r2, [pc, #28]	; (80009fc <HAL_Init+0x28>)
 80009de:	f043 0310 	orr.w	r3, r3, #16
 80009e2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009e4:	2003      	movs	r0, #3
 80009e6:	f000 f947 	bl	8000c78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009ea:	200f      	movs	r0, #15
 80009ec:	f000 f808 	bl	8000a00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009f0:	f003 f9fc 	bl	8003dec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009f4:	2300      	movs	r3, #0
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	40022000 	.word	0x40022000

08000a00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a08:	4b12      	ldr	r3, [pc, #72]	; (8000a54 <HAL_InitTick+0x54>)
 8000a0a:	681a      	ldr	r2, [r3, #0]
 8000a0c:	4b12      	ldr	r3, [pc, #72]	; (8000a58 <HAL_InitTick+0x58>)
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	4619      	mov	r1, r3
 8000a12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a16:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f000 f95f 	bl	8000ce2 <HAL_SYSTICK_Config>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	e00e      	b.n	8000a4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	2b0f      	cmp	r3, #15
 8000a32:	d80a      	bhi.n	8000a4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a34:	2200      	movs	r2, #0
 8000a36:	6879      	ldr	r1, [r7, #4]
 8000a38:	f04f 30ff 	mov.w	r0, #4294967295
 8000a3c:	f000 f927 	bl	8000c8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a40:	4a06      	ldr	r2, [pc, #24]	; (8000a5c <HAL_InitTick+0x5c>)
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a46:	2300      	movs	r3, #0
 8000a48:	e000      	b.n	8000a4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a4a:	2301      	movs	r3, #1
}
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	3708      	adds	r7, #8
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	20000018 	.word	0x20000018
 8000a58:	20000004 	.word	0x20000004
 8000a5c:	20000000 	.word	0x20000000

08000a60 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a64:	4b05      	ldr	r3, [pc, #20]	; (8000a7c <HAL_IncTick+0x1c>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	461a      	mov	r2, r3
 8000a6a:	4b05      	ldr	r3, [pc, #20]	; (8000a80 <HAL_IncTick+0x20>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	4413      	add	r3, r2
 8000a70:	4a03      	ldr	r2, [pc, #12]	; (8000a80 <HAL_IncTick+0x20>)
 8000a72:	6013      	str	r3, [r2, #0]
}
 8000a74:	bf00      	nop
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bc80      	pop	{r7}
 8000a7a:	4770      	bx	lr
 8000a7c:	20000004 	.word	0x20000004
 8000a80:	2000009c 	.word	0x2000009c

08000a84 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  return uwTick;
 8000a88:	4b02      	ldr	r3, [pc, #8]	; (8000a94 <HAL_GetTick+0x10>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bc80      	pop	{r7}
 8000a92:	4770      	bx	lr
 8000a94:	2000009c 	.word	0x2000009c

08000a98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b084      	sub	sp, #16
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000aa0:	f7ff fff0 	bl	8000a84 <HAL_GetTick>
 8000aa4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ab0:	d005      	beq.n	8000abe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ab2:	4b0a      	ldr	r3, [pc, #40]	; (8000adc <HAL_Delay+0x44>)
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	461a      	mov	r2, r3
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	4413      	add	r3, r2
 8000abc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000abe:	bf00      	nop
 8000ac0:	f7ff ffe0 	bl	8000a84 <HAL_GetTick>
 8000ac4:	4602      	mov	r2, r0
 8000ac6:	68bb      	ldr	r3, [r7, #8]
 8000ac8:	1ad3      	subs	r3, r2, r3
 8000aca:	68fa      	ldr	r2, [r7, #12]
 8000acc:	429a      	cmp	r2, r3
 8000ace:	d8f7      	bhi.n	8000ac0 <HAL_Delay+0x28>
  {
  }
}
 8000ad0:	bf00      	nop
 8000ad2:	bf00      	nop
 8000ad4:	3710      	adds	r7, #16
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	20000004 	.word	0x20000004

08000ae0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b085      	sub	sp, #20
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	f003 0307 	and.w	r3, r3, #7
 8000aee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000af0:	4b0c      	ldr	r3, [pc, #48]	; (8000b24 <__NVIC_SetPriorityGrouping+0x44>)
 8000af2:	68db      	ldr	r3, [r3, #12]
 8000af4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000af6:	68ba      	ldr	r2, [r7, #8]
 8000af8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000afc:	4013      	ands	r3, r2
 8000afe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b04:	68bb      	ldr	r3, [r7, #8]
 8000b06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b12:	4a04      	ldr	r2, [pc, #16]	; (8000b24 <__NVIC_SetPriorityGrouping+0x44>)
 8000b14:	68bb      	ldr	r3, [r7, #8]
 8000b16:	60d3      	str	r3, [r2, #12]
}
 8000b18:	bf00      	nop
 8000b1a:	3714      	adds	r7, #20
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bc80      	pop	{r7}
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	e000ed00 	.word	0xe000ed00

08000b28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b2c:	4b04      	ldr	r3, [pc, #16]	; (8000b40 <__NVIC_GetPriorityGrouping+0x18>)
 8000b2e:	68db      	ldr	r3, [r3, #12]
 8000b30:	0a1b      	lsrs	r3, r3, #8
 8000b32:	f003 0307 	and.w	r3, r3, #7
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bc80      	pop	{r7}
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	e000ed00 	.word	0xe000ed00

08000b44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	db0b      	blt.n	8000b6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b56:	79fb      	ldrb	r3, [r7, #7]
 8000b58:	f003 021f 	and.w	r2, r3, #31
 8000b5c:	4906      	ldr	r1, [pc, #24]	; (8000b78 <__NVIC_EnableIRQ+0x34>)
 8000b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b62:	095b      	lsrs	r3, r3, #5
 8000b64:	2001      	movs	r0, #1
 8000b66:	fa00 f202 	lsl.w	r2, r0, r2
 8000b6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b6e:	bf00      	nop
 8000b70:	370c      	adds	r7, #12
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bc80      	pop	{r7}
 8000b76:	4770      	bx	lr
 8000b78:	e000e100 	.word	0xe000e100

08000b7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b083      	sub	sp, #12
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	4603      	mov	r3, r0
 8000b84:	6039      	str	r1, [r7, #0]
 8000b86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	db0a      	blt.n	8000ba6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	b2da      	uxtb	r2, r3
 8000b94:	490c      	ldr	r1, [pc, #48]	; (8000bc8 <__NVIC_SetPriority+0x4c>)
 8000b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b9a:	0112      	lsls	r2, r2, #4
 8000b9c:	b2d2      	uxtb	r2, r2
 8000b9e:	440b      	add	r3, r1
 8000ba0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ba4:	e00a      	b.n	8000bbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	b2da      	uxtb	r2, r3
 8000baa:	4908      	ldr	r1, [pc, #32]	; (8000bcc <__NVIC_SetPriority+0x50>)
 8000bac:	79fb      	ldrb	r3, [r7, #7]
 8000bae:	f003 030f 	and.w	r3, r3, #15
 8000bb2:	3b04      	subs	r3, #4
 8000bb4:	0112      	lsls	r2, r2, #4
 8000bb6:	b2d2      	uxtb	r2, r2
 8000bb8:	440b      	add	r3, r1
 8000bba:	761a      	strb	r2, [r3, #24]
}
 8000bbc:	bf00      	nop
 8000bbe:	370c      	adds	r7, #12
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bc80      	pop	{r7}
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	e000e100 	.word	0xe000e100
 8000bcc:	e000ed00 	.word	0xe000ed00

08000bd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b089      	sub	sp, #36	; 0x24
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	60f8      	str	r0, [r7, #12]
 8000bd8:	60b9      	str	r1, [r7, #8]
 8000bda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	f003 0307 	and.w	r3, r3, #7
 8000be2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000be4:	69fb      	ldr	r3, [r7, #28]
 8000be6:	f1c3 0307 	rsb	r3, r3, #7
 8000bea:	2b04      	cmp	r3, #4
 8000bec:	bf28      	it	cs
 8000bee:	2304      	movcs	r3, #4
 8000bf0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bf2:	69fb      	ldr	r3, [r7, #28]
 8000bf4:	3304      	adds	r3, #4
 8000bf6:	2b06      	cmp	r3, #6
 8000bf8:	d902      	bls.n	8000c00 <NVIC_EncodePriority+0x30>
 8000bfa:	69fb      	ldr	r3, [r7, #28]
 8000bfc:	3b03      	subs	r3, #3
 8000bfe:	e000      	b.n	8000c02 <NVIC_EncodePriority+0x32>
 8000c00:	2300      	movs	r3, #0
 8000c02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c04:	f04f 32ff 	mov.w	r2, #4294967295
 8000c08:	69bb      	ldr	r3, [r7, #24]
 8000c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0e:	43da      	mvns	r2, r3
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	401a      	ands	r2, r3
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c18:	f04f 31ff 	mov.w	r1, #4294967295
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c22:	43d9      	mvns	r1, r3
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c28:	4313      	orrs	r3, r2
         );
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3724      	adds	r7, #36	; 0x24
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bc80      	pop	{r7}
 8000c32:	4770      	bx	lr

08000c34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	3b01      	subs	r3, #1
 8000c40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c44:	d301      	bcc.n	8000c4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c46:	2301      	movs	r3, #1
 8000c48:	e00f      	b.n	8000c6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c4a:	4a0a      	ldr	r2, [pc, #40]	; (8000c74 <SysTick_Config+0x40>)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	3b01      	subs	r3, #1
 8000c50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c52:	210f      	movs	r1, #15
 8000c54:	f04f 30ff 	mov.w	r0, #4294967295
 8000c58:	f7ff ff90 	bl	8000b7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c5c:	4b05      	ldr	r3, [pc, #20]	; (8000c74 <SysTick_Config+0x40>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c62:	4b04      	ldr	r3, [pc, #16]	; (8000c74 <SysTick_Config+0x40>)
 8000c64:	2207      	movs	r2, #7
 8000c66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c68:	2300      	movs	r3, #0
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	3708      	adds	r7, #8
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	e000e010 	.word	0xe000e010

08000c78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c80:	6878      	ldr	r0, [r7, #4]
 8000c82:	f7ff ff2d 	bl	8000ae0 <__NVIC_SetPriorityGrouping>
}
 8000c86:	bf00      	nop
 8000c88:	3708      	adds	r7, #8
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}

08000c8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c8e:	b580      	push	{r7, lr}
 8000c90:	b086      	sub	sp, #24
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	4603      	mov	r3, r0
 8000c96:	60b9      	str	r1, [r7, #8]
 8000c98:	607a      	str	r2, [r7, #4]
 8000c9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ca0:	f7ff ff42 	bl	8000b28 <__NVIC_GetPriorityGrouping>
 8000ca4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ca6:	687a      	ldr	r2, [r7, #4]
 8000ca8:	68b9      	ldr	r1, [r7, #8]
 8000caa:	6978      	ldr	r0, [r7, #20]
 8000cac:	f7ff ff90 	bl	8000bd0 <NVIC_EncodePriority>
 8000cb0:	4602      	mov	r2, r0
 8000cb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cb6:	4611      	mov	r1, r2
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f7ff ff5f 	bl	8000b7c <__NVIC_SetPriority>
}
 8000cbe:	bf00      	nop
 8000cc0:	3718      	adds	r7, #24
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}

08000cc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cc6:	b580      	push	{r7, lr}
 8000cc8:	b082      	sub	sp, #8
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	4603      	mov	r3, r0
 8000cce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f7ff ff35 	bl	8000b44 <__NVIC_EnableIRQ>
}
 8000cda:	bf00      	nop
 8000cdc:	3708      	adds	r7, #8
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}

08000ce2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ce2:	b580      	push	{r7, lr}
 8000ce4:	b082      	sub	sp, #8
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cea:	6878      	ldr	r0, [r7, #4]
 8000cec:	f7ff ffa2 	bl	8000c34 <SysTick_Config>
 8000cf0:	4603      	mov	r3, r0
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	3708      	adds	r7, #8
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}

08000cfa <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	b085      	sub	sp, #20
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d02:	2300      	movs	r3, #0
 8000d04:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000d0c:	b2db      	uxtb	r3, r3
 8000d0e:	2b02      	cmp	r3, #2
 8000d10:	d008      	beq.n	8000d24 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	2204      	movs	r2, #4
 8000d16:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000d20:	2301      	movs	r3, #1
 8000d22:	e020      	b.n	8000d66 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	681a      	ldr	r2, [r3, #0]
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f022 020e 	bic.w	r2, r2, #14
 8000d32:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	681a      	ldr	r2, [r3, #0]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	f022 0201 	bic.w	r2, r2, #1
 8000d42:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d4c:	2101      	movs	r1, #1
 8000d4e:	fa01 f202 	lsl.w	r2, r1, r2
 8000d52:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	2201      	movs	r2, #1
 8000d58:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	2200      	movs	r2, #0
 8000d60:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000d64:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	3714      	adds	r7, #20
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bc80      	pop	{r7}
 8000d6e:	4770      	bx	lr

08000d70 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b084      	sub	sp, #16
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000d82:	b2db      	uxtb	r3, r3
 8000d84:	2b02      	cmp	r3, #2
 8000d86:	d005      	beq.n	8000d94 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	2204      	movs	r2, #4
 8000d8c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	73fb      	strb	r3, [r7, #15]
 8000d92:	e051      	b.n	8000e38 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	681a      	ldr	r2, [r3, #0]
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f022 020e 	bic.w	r2, r2, #14
 8000da2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	681a      	ldr	r2, [r3, #0]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f022 0201 	bic.w	r2, r2, #1
 8000db2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a22      	ldr	r2, [pc, #136]	; (8000e44 <HAL_DMA_Abort_IT+0xd4>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d029      	beq.n	8000e12 <HAL_DMA_Abort_IT+0xa2>
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4a21      	ldr	r2, [pc, #132]	; (8000e48 <HAL_DMA_Abort_IT+0xd8>)
 8000dc4:	4293      	cmp	r3, r2
 8000dc6:	d022      	beq.n	8000e0e <HAL_DMA_Abort_IT+0x9e>
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a1f      	ldr	r2, [pc, #124]	; (8000e4c <HAL_DMA_Abort_IT+0xdc>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d01a      	beq.n	8000e08 <HAL_DMA_Abort_IT+0x98>
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4a1e      	ldr	r2, [pc, #120]	; (8000e50 <HAL_DMA_Abort_IT+0xe0>)
 8000dd8:	4293      	cmp	r3, r2
 8000dda:	d012      	beq.n	8000e02 <HAL_DMA_Abort_IT+0x92>
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a1c      	ldr	r2, [pc, #112]	; (8000e54 <HAL_DMA_Abort_IT+0xe4>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d00a      	beq.n	8000dfc <HAL_DMA_Abort_IT+0x8c>
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4a1b      	ldr	r2, [pc, #108]	; (8000e58 <HAL_DMA_Abort_IT+0xe8>)
 8000dec:	4293      	cmp	r3, r2
 8000dee:	d102      	bne.n	8000df6 <HAL_DMA_Abort_IT+0x86>
 8000df0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000df4:	e00e      	b.n	8000e14 <HAL_DMA_Abort_IT+0xa4>
 8000df6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000dfa:	e00b      	b.n	8000e14 <HAL_DMA_Abort_IT+0xa4>
 8000dfc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e00:	e008      	b.n	8000e14 <HAL_DMA_Abort_IT+0xa4>
 8000e02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e06:	e005      	b.n	8000e14 <HAL_DMA_Abort_IT+0xa4>
 8000e08:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e0c:	e002      	b.n	8000e14 <HAL_DMA_Abort_IT+0xa4>
 8000e0e:	2310      	movs	r3, #16
 8000e10:	e000      	b.n	8000e14 <HAL_DMA_Abort_IT+0xa4>
 8000e12:	2301      	movs	r3, #1
 8000e14:	4a11      	ldr	r2, [pc, #68]	; (8000e5c <HAL_DMA_Abort_IT+0xec>)
 8000e16:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	2200      	movs	r2, #0
 8000e24:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d003      	beq.n	8000e38 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e34:	6878      	ldr	r0, [r7, #4]
 8000e36:	4798      	blx	r3
    } 
  }
  return status;
 8000e38:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	3710      	adds	r7, #16
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	40020008 	.word	0x40020008
 8000e48:	4002001c 	.word	0x4002001c
 8000e4c:	40020030 	.word	0x40020030
 8000e50:	40020044 	.word	0x40020044
 8000e54:	40020058 	.word	0x40020058
 8000e58:	4002006c 	.word	0x4002006c
 8000e5c:	40020000 	.word	0x40020000

08000e60 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b08b      	sub	sp, #44	; 0x2c
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
 8000e68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e72:	e169      	b.n	8001148 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000e74:	2201      	movs	r2, #1
 8000e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e78:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	69fa      	ldr	r2, [r7, #28]
 8000e84:	4013      	ands	r3, r2
 8000e86:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000e88:	69ba      	ldr	r2, [r7, #24]
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	429a      	cmp	r2, r3
 8000e8e:	f040 8158 	bne.w	8001142 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	4a9a      	ldr	r2, [pc, #616]	; (8001100 <HAL_GPIO_Init+0x2a0>)
 8000e98:	4293      	cmp	r3, r2
 8000e9a:	d05e      	beq.n	8000f5a <HAL_GPIO_Init+0xfa>
 8000e9c:	4a98      	ldr	r2, [pc, #608]	; (8001100 <HAL_GPIO_Init+0x2a0>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d875      	bhi.n	8000f8e <HAL_GPIO_Init+0x12e>
 8000ea2:	4a98      	ldr	r2, [pc, #608]	; (8001104 <HAL_GPIO_Init+0x2a4>)
 8000ea4:	4293      	cmp	r3, r2
 8000ea6:	d058      	beq.n	8000f5a <HAL_GPIO_Init+0xfa>
 8000ea8:	4a96      	ldr	r2, [pc, #600]	; (8001104 <HAL_GPIO_Init+0x2a4>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d86f      	bhi.n	8000f8e <HAL_GPIO_Init+0x12e>
 8000eae:	4a96      	ldr	r2, [pc, #600]	; (8001108 <HAL_GPIO_Init+0x2a8>)
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	d052      	beq.n	8000f5a <HAL_GPIO_Init+0xfa>
 8000eb4:	4a94      	ldr	r2, [pc, #592]	; (8001108 <HAL_GPIO_Init+0x2a8>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d869      	bhi.n	8000f8e <HAL_GPIO_Init+0x12e>
 8000eba:	4a94      	ldr	r2, [pc, #592]	; (800110c <HAL_GPIO_Init+0x2ac>)
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	d04c      	beq.n	8000f5a <HAL_GPIO_Init+0xfa>
 8000ec0:	4a92      	ldr	r2, [pc, #584]	; (800110c <HAL_GPIO_Init+0x2ac>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d863      	bhi.n	8000f8e <HAL_GPIO_Init+0x12e>
 8000ec6:	4a92      	ldr	r2, [pc, #584]	; (8001110 <HAL_GPIO_Init+0x2b0>)
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	d046      	beq.n	8000f5a <HAL_GPIO_Init+0xfa>
 8000ecc:	4a90      	ldr	r2, [pc, #576]	; (8001110 <HAL_GPIO_Init+0x2b0>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d85d      	bhi.n	8000f8e <HAL_GPIO_Init+0x12e>
 8000ed2:	2b12      	cmp	r3, #18
 8000ed4:	d82a      	bhi.n	8000f2c <HAL_GPIO_Init+0xcc>
 8000ed6:	2b12      	cmp	r3, #18
 8000ed8:	d859      	bhi.n	8000f8e <HAL_GPIO_Init+0x12e>
 8000eda:	a201      	add	r2, pc, #4	; (adr r2, 8000ee0 <HAL_GPIO_Init+0x80>)
 8000edc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ee0:	08000f5b 	.word	0x08000f5b
 8000ee4:	08000f35 	.word	0x08000f35
 8000ee8:	08000f47 	.word	0x08000f47
 8000eec:	08000f89 	.word	0x08000f89
 8000ef0:	08000f8f 	.word	0x08000f8f
 8000ef4:	08000f8f 	.word	0x08000f8f
 8000ef8:	08000f8f 	.word	0x08000f8f
 8000efc:	08000f8f 	.word	0x08000f8f
 8000f00:	08000f8f 	.word	0x08000f8f
 8000f04:	08000f8f 	.word	0x08000f8f
 8000f08:	08000f8f 	.word	0x08000f8f
 8000f0c:	08000f8f 	.word	0x08000f8f
 8000f10:	08000f8f 	.word	0x08000f8f
 8000f14:	08000f8f 	.word	0x08000f8f
 8000f18:	08000f8f 	.word	0x08000f8f
 8000f1c:	08000f8f 	.word	0x08000f8f
 8000f20:	08000f8f 	.word	0x08000f8f
 8000f24:	08000f3d 	.word	0x08000f3d
 8000f28:	08000f51 	.word	0x08000f51
 8000f2c:	4a79      	ldr	r2, [pc, #484]	; (8001114 <HAL_GPIO_Init+0x2b4>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d013      	beq.n	8000f5a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000f32:	e02c      	b.n	8000f8e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	68db      	ldr	r3, [r3, #12]
 8000f38:	623b      	str	r3, [r7, #32]
          break;
 8000f3a:	e029      	b.n	8000f90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	68db      	ldr	r3, [r3, #12]
 8000f40:	3304      	adds	r3, #4
 8000f42:	623b      	str	r3, [r7, #32]
          break;
 8000f44:	e024      	b.n	8000f90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	68db      	ldr	r3, [r3, #12]
 8000f4a:	3308      	adds	r3, #8
 8000f4c:	623b      	str	r3, [r7, #32]
          break;
 8000f4e:	e01f      	b.n	8000f90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	68db      	ldr	r3, [r3, #12]
 8000f54:	330c      	adds	r3, #12
 8000f56:	623b      	str	r3, [r7, #32]
          break;
 8000f58:	e01a      	b.n	8000f90 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	689b      	ldr	r3, [r3, #8]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d102      	bne.n	8000f68 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000f62:	2304      	movs	r3, #4
 8000f64:	623b      	str	r3, [r7, #32]
          break;
 8000f66:	e013      	b.n	8000f90 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	689b      	ldr	r3, [r3, #8]
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d105      	bne.n	8000f7c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f70:	2308      	movs	r3, #8
 8000f72:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	69fa      	ldr	r2, [r7, #28]
 8000f78:	611a      	str	r2, [r3, #16]
          break;
 8000f7a:	e009      	b.n	8000f90 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f7c:	2308      	movs	r3, #8
 8000f7e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	69fa      	ldr	r2, [r7, #28]
 8000f84:	615a      	str	r2, [r3, #20]
          break;
 8000f86:	e003      	b.n	8000f90 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	623b      	str	r3, [r7, #32]
          break;
 8000f8c:	e000      	b.n	8000f90 <HAL_GPIO_Init+0x130>
          break;
 8000f8e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f90:	69bb      	ldr	r3, [r7, #24]
 8000f92:	2bff      	cmp	r3, #255	; 0xff
 8000f94:	d801      	bhi.n	8000f9a <HAL_GPIO_Init+0x13a>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	e001      	b.n	8000f9e <HAL_GPIO_Init+0x13e>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	3304      	adds	r3, #4
 8000f9e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000fa0:	69bb      	ldr	r3, [r7, #24]
 8000fa2:	2bff      	cmp	r3, #255	; 0xff
 8000fa4:	d802      	bhi.n	8000fac <HAL_GPIO_Init+0x14c>
 8000fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa8:	009b      	lsls	r3, r3, #2
 8000faa:	e002      	b.n	8000fb2 <HAL_GPIO_Init+0x152>
 8000fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fae:	3b08      	subs	r3, #8
 8000fb0:	009b      	lsls	r3, r3, #2
 8000fb2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	210f      	movs	r1, #15
 8000fba:	693b      	ldr	r3, [r7, #16]
 8000fbc:	fa01 f303 	lsl.w	r3, r1, r3
 8000fc0:	43db      	mvns	r3, r3
 8000fc2:	401a      	ands	r2, r3
 8000fc4:	6a39      	ldr	r1, [r7, #32]
 8000fc6:	693b      	ldr	r3, [r7, #16]
 8000fc8:	fa01 f303 	lsl.w	r3, r1, r3
 8000fcc:	431a      	orrs	r2, r3
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	f000 80b1 	beq.w	8001142 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000fe0:	4b4d      	ldr	r3, [pc, #308]	; (8001118 <HAL_GPIO_Init+0x2b8>)
 8000fe2:	699b      	ldr	r3, [r3, #24]
 8000fe4:	4a4c      	ldr	r2, [pc, #304]	; (8001118 <HAL_GPIO_Init+0x2b8>)
 8000fe6:	f043 0301 	orr.w	r3, r3, #1
 8000fea:	6193      	str	r3, [r2, #24]
 8000fec:	4b4a      	ldr	r3, [pc, #296]	; (8001118 <HAL_GPIO_Init+0x2b8>)
 8000fee:	699b      	ldr	r3, [r3, #24]
 8000ff0:	f003 0301 	and.w	r3, r3, #1
 8000ff4:	60bb      	str	r3, [r7, #8]
 8000ff6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000ff8:	4a48      	ldr	r2, [pc, #288]	; (800111c <HAL_GPIO_Init+0x2bc>)
 8000ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ffc:	089b      	lsrs	r3, r3, #2
 8000ffe:	3302      	adds	r3, #2
 8001000:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001004:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001008:	f003 0303 	and.w	r3, r3, #3
 800100c:	009b      	lsls	r3, r3, #2
 800100e:	220f      	movs	r2, #15
 8001010:	fa02 f303 	lsl.w	r3, r2, r3
 8001014:	43db      	mvns	r3, r3
 8001016:	68fa      	ldr	r2, [r7, #12]
 8001018:	4013      	ands	r3, r2
 800101a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	4a40      	ldr	r2, [pc, #256]	; (8001120 <HAL_GPIO_Init+0x2c0>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d013      	beq.n	800104c <HAL_GPIO_Init+0x1ec>
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	4a3f      	ldr	r2, [pc, #252]	; (8001124 <HAL_GPIO_Init+0x2c4>)
 8001028:	4293      	cmp	r3, r2
 800102a:	d00d      	beq.n	8001048 <HAL_GPIO_Init+0x1e8>
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	4a3e      	ldr	r2, [pc, #248]	; (8001128 <HAL_GPIO_Init+0x2c8>)
 8001030:	4293      	cmp	r3, r2
 8001032:	d007      	beq.n	8001044 <HAL_GPIO_Init+0x1e4>
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	4a3d      	ldr	r2, [pc, #244]	; (800112c <HAL_GPIO_Init+0x2cc>)
 8001038:	4293      	cmp	r3, r2
 800103a:	d101      	bne.n	8001040 <HAL_GPIO_Init+0x1e0>
 800103c:	2303      	movs	r3, #3
 800103e:	e006      	b.n	800104e <HAL_GPIO_Init+0x1ee>
 8001040:	2304      	movs	r3, #4
 8001042:	e004      	b.n	800104e <HAL_GPIO_Init+0x1ee>
 8001044:	2302      	movs	r3, #2
 8001046:	e002      	b.n	800104e <HAL_GPIO_Init+0x1ee>
 8001048:	2301      	movs	r3, #1
 800104a:	e000      	b.n	800104e <HAL_GPIO_Init+0x1ee>
 800104c:	2300      	movs	r3, #0
 800104e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001050:	f002 0203 	and.w	r2, r2, #3
 8001054:	0092      	lsls	r2, r2, #2
 8001056:	4093      	lsls	r3, r2
 8001058:	68fa      	ldr	r2, [r7, #12]
 800105a:	4313      	orrs	r3, r2
 800105c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800105e:	492f      	ldr	r1, [pc, #188]	; (800111c <HAL_GPIO_Init+0x2bc>)
 8001060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001062:	089b      	lsrs	r3, r3, #2
 8001064:	3302      	adds	r3, #2
 8001066:	68fa      	ldr	r2, [r7, #12]
 8001068:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001074:	2b00      	cmp	r3, #0
 8001076:	d006      	beq.n	8001086 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001078:	4b2d      	ldr	r3, [pc, #180]	; (8001130 <HAL_GPIO_Init+0x2d0>)
 800107a:	689a      	ldr	r2, [r3, #8]
 800107c:	492c      	ldr	r1, [pc, #176]	; (8001130 <HAL_GPIO_Init+0x2d0>)
 800107e:	69bb      	ldr	r3, [r7, #24]
 8001080:	4313      	orrs	r3, r2
 8001082:	608b      	str	r3, [r1, #8]
 8001084:	e006      	b.n	8001094 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001086:	4b2a      	ldr	r3, [pc, #168]	; (8001130 <HAL_GPIO_Init+0x2d0>)
 8001088:	689a      	ldr	r2, [r3, #8]
 800108a:	69bb      	ldr	r3, [r7, #24]
 800108c:	43db      	mvns	r3, r3
 800108e:	4928      	ldr	r1, [pc, #160]	; (8001130 <HAL_GPIO_Init+0x2d0>)
 8001090:	4013      	ands	r3, r2
 8001092:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800109c:	2b00      	cmp	r3, #0
 800109e:	d006      	beq.n	80010ae <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80010a0:	4b23      	ldr	r3, [pc, #140]	; (8001130 <HAL_GPIO_Init+0x2d0>)
 80010a2:	68da      	ldr	r2, [r3, #12]
 80010a4:	4922      	ldr	r1, [pc, #136]	; (8001130 <HAL_GPIO_Init+0x2d0>)
 80010a6:	69bb      	ldr	r3, [r7, #24]
 80010a8:	4313      	orrs	r3, r2
 80010aa:	60cb      	str	r3, [r1, #12]
 80010ac:	e006      	b.n	80010bc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80010ae:	4b20      	ldr	r3, [pc, #128]	; (8001130 <HAL_GPIO_Init+0x2d0>)
 80010b0:	68da      	ldr	r2, [r3, #12]
 80010b2:	69bb      	ldr	r3, [r7, #24]
 80010b4:	43db      	mvns	r3, r3
 80010b6:	491e      	ldr	r1, [pc, #120]	; (8001130 <HAL_GPIO_Init+0x2d0>)
 80010b8:	4013      	ands	r3, r2
 80010ba:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d006      	beq.n	80010d6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80010c8:	4b19      	ldr	r3, [pc, #100]	; (8001130 <HAL_GPIO_Init+0x2d0>)
 80010ca:	685a      	ldr	r2, [r3, #4]
 80010cc:	4918      	ldr	r1, [pc, #96]	; (8001130 <HAL_GPIO_Init+0x2d0>)
 80010ce:	69bb      	ldr	r3, [r7, #24]
 80010d0:	4313      	orrs	r3, r2
 80010d2:	604b      	str	r3, [r1, #4]
 80010d4:	e006      	b.n	80010e4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80010d6:	4b16      	ldr	r3, [pc, #88]	; (8001130 <HAL_GPIO_Init+0x2d0>)
 80010d8:	685a      	ldr	r2, [r3, #4]
 80010da:	69bb      	ldr	r3, [r7, #24]
 80010dc:	43db      	mvns	r3, r3
 80010de:	4914      	ldr	r1, [pc, #80]	; (8001130 <HAL_GPIO_Init+0x2d0>)
 80010e0:	4013      	ands	r3, r2
 80010e2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d021      	beq.n	8001134 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80010f0:	4b0f      	ldr	r3, [pc, #60]	; (8001130 <HAL_GPIO_Init+0x2d0>)
 80010f2:	681a      	ldr	r2, [r3, #0]
 80010f4:	490e      	ldr	r1, [pc, #56]	; (8001130 <HAL_GPIO_Init+0x2d0>)
 80010f6:	69bb      	ldr	r3, [r7, #24]
 80010f8:	4313      	orrs	r3, r2
 80010fa:	600b      	str	r3, [r1, #0]
 80010fc:	e021      	b.n	8001142 <HAL_GPIO_Init+0x2e2>
 80010fe:	bf00      	nop
 8001100:	10320000 	.word	0x10320000
 8001104:	10310000 	.word	0x10310000
 8001108:	10220000 	.word	0x10220000
 800110c:	10210000 	.word	0x10210000
 8001110:	10120000 	.word	0x10120000
 8001114:	10110000 	.word	0x10110000
 8001118:	40021000 	.word	0x40021000
 800111c:	40010000 	.word	0x40010000
 8001120:	40010800 	.word	0x40010800
 8001124:	40010c00 	.word	0x40010c00
 8001128:	40011000 	.word	0x40011000
 800112c:	40011400 	.word	0x40011400
 8001130:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001134:	4b0b      	ldr	r3, [pc, #44]	; (8001164 <HAL_GPIO_Init+0x304>)
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	69bb      	ldr	r3, [r7, #24]
 800113a:	43db      	mvns	r3, r3
 800113c:	4909      	ldr	r1, [pc, #36]	; (8001164 <HAL_GPIO_Init+0x304>)
 800113e:	4013      	ands	r3, r2
 8001140:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001144:	3301      	adds	r3, #1
 8001146:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800114e:	fa22 f303 	lsr.w	r3, r2, r3
 8001152:	2b00      	cmp	r3, #0
 8001154:	f47f ae8e 	bne.w	8000e74 <HAL_GPIO_Init+0x14>
  }
}
 8001158:	bf00      	nop
 800115a:	bf00      	nop
 800115c:	372c      	adds	r7, #44	; 0x2c
 800115e:	46bd      	mov	sp, r7
 8001160:	bc80      	pop	{r7}
 8001162:	4770      	bx	lr
 8001164:	40010400 	.word	0x40010400

08001168 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001168:	b480      	push	{r7}
 800116a:	b085      	sub	sp, #20
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	460b      	mov	r3, r1
 8001172:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	689a      	ldr	r2, [r3, #8]
 8001178:	887b      	ldrh	r3, [r7, #2]
 800117a:	4013      	ands	r3, r2
 800117c:	2b00      	cmp	r3, #0
 800117e:	d002      	beq.n	8001186 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001180:	2301      	movs	r3, #1
 8001182:	73fb      	strb	r3, [r7, #15]
 8001184:	e001      	b.n	800118a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001186:	2300      	movs	r3, #0
 8001188:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800118a:	7bfb      	ldrb	r3, [r7, #15]
}
 800118c:	4618      	mov	r0, r3
 800118e:	3714      	adds	r7, #20
 8001190:	46bd      	mov	sp, r7
 8001192:	bc80      	pop	{r7}
 8001194:	4770      	bx	lr

08001196 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001196:	b480      	push	{r7}
 8001198:	b083      	sub	sp, #12
 800119a:	af00      	add	r7, sp, #0
 800119c:	6078      	str	r0, [r7, #4]
 800119e:	460b      	mov	r3, r1
 80011a0:	807b      	strh	r3, [r7, #2]
 80011a2:	4613      	mov	r3, r2
 80011a4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011a6:	787b      	ldrb	r3, [r7, #1]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d003      	beq.n	80011b4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011ac:	887a      	ldrh	r2, [r7, #2]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80011b2:	e003      	b.n	80011bc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80011b4:	887b      	ldrh	r3, [r7, #2]
 80011b6:	041a      	lsls	r2, r3, #16
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	611a      	str	r2, [r3, #16]
}
 80011bc:	bf00      	nop
 80011be:	370c      	adds	r7, #12
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bc80      	pop	{r7}
 80011c4:	4770      	bx	lr
	...

080011c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d101      	bne.n	80011da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80011d6:	2301      	movs	r3, #1
 80011d8:	e12b      	b.n	8001432 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d106      	bne.n	80011f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2200      	movs	r2, #0
 80011ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f002 fe2e 	bl	8003e50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2224      	movs	r2, #36	; 0x24
 80011f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f022 0201 	bic.w	r2, r2, #1
 800120a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800121a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800122a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800122c:	f001 f832 	bl	8002294 <HAL_RCC_GetPCLK1Freq>
 8001230:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	4a81      	ldr	r2, [pc, #516]	; (800143c <HAL_I2C_Init+0x274>)
 8001238:	4293      	cmp	r3, r2
 800123a:	d807      	bhi.n	800124c <HAL_I2C_Init+0x84>
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	4a80      	ldr	r2, [pc, #512]	; (8001440 <HAL_I2C_Init+0x278>)
 8001240:	4293      	cmp	r3, r2
 8001242:	bf94      	ite	ls
 8001244:	2301      	movls	r3, #1
 8001246:	2300      	movhi	r3, #0
 8001248:	b2db      	uxtb	r3, r3
 800124a:	e006      	b.n	800125a <HAL_I2C_Init+0x92>
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	4a7d      	ldr	r2, [pc, #500]	; (8001444 <HAL_I2C_Init+0x27c>)
 8001250:	4293      	cmp	r3, r2
 8001252:	bf94      	ite	ls
 8001254:	2301      	movls	r3, #1
 8001256:	2300      	movhi	r3, #0
 8001258:	b2db      	uxtb	r3, r3
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	e0e7      	b.n	8001432 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	4a78      	ldr	r2, [pc, #480]	; (8001448 <HAL_I2C_Init+0x280>)
 8001266:	fba2 2303 	umull	r2, r3, r2, r3
 800126a:	0c9b      	lsrs	r3, r3, #18
 800126c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	68ba      	ldr	r2, [r7, #8]
 800127e:	430a      	orrs	r2, r1
 8001280:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	6a1b      	ldr	r3, [r3, #32]
 8001288:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	4a6a      	ldr	r2, [pc, #424]	; (800143c <HAL_I2C_Init+0x274>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d802      	bhi.n	800129c <HAL_I2C_Init+0xd4>
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	3301      	adds	r3, #1
 800129a:	e009      	b.n	80012b0 <HAL_I2C_Init+0xe8>
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80012a2:	fb02 f303 	mul.w	r3, r2, r3
 80012a6:	4a69      	ldr	r2, [pc, #420]	; (800144c <HAL_I2C_Init+0x284>)
 80012a8:	fba2 2303 	umull	r2, r3, r2, r3
 80012ac:	099b      	lsrs	r3, r3, #6
 80012ae:	3301      	adds	r3, #1
 80012b0:	687a      	ldr	r2, [r7, #4]
 80012b2:	6812      	ldr	r2, [r2, #0]
 80012b4:	430b      	orrs	r3, r1
 80012b6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	69db      	ldr	r3, [r3, #28]
 80012be:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80012c2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	495c      	ldr	r1, [pc, #368]	; (800143c <HAL_I2C_Init+0x274>)
 80012cc:	428b      	cmp	r3, r1
 80012ce:	d819      	bhi.n	8001304 <HAL_I2C_Init+0x13c>
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	1e59      	subs	r1, r3, #1
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	005b      	lsls	r3, r3, #1
 80012da:	fbb1 f3f3 	udiv	r3, r1, r3
 80012de:	1c59      	adds	r1, r3, #1
 80012e0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80012e4:	400b      	ands	r3, r1
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d00a      	beq.n	8001300 <HAL_I2C_Init+0x138>
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	1e59      	subs	r1, r3, #1
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	005b      	lsls	r3, r3, #1
 80012f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80012f8:	3301      	adds	r3, #1
 80012fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012fe:	e051      	b.n	80013a4 <HAL_I2C_Init+0x1dc>
 8001300:	2304      	movs	r3, #4
 8001302:	e04f      	b.n	80013a4 <HAL_I2C_Init+0x1dc>
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d111      	bne.n	8001330 <HAL_I2C_Init+0x168>
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	1e58      	subs	r0, r3, #1
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6859      	ldr	r1, [r3, #4]
 8001314:	460b      	mov	r3, r1
 8001316:	005b      	lsls	r3, r3, #1
 8001318:	440b      	add	r3, r1
 800131a:	fbb0 f3f3 	udiv	r3, r0, r3
 800131e:	3301      	adds	r3, #1
 8001320:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001324:	2b00      	cmp	r3, #0
 8001326:	bf0c      	ite	eq
 8001328:	2301      	moveq	r3, #1
 800132a:	2300      	movne	r3, #0
 800132c:	b2db      	uxtb	r3, r3
 800132e:	e012      	b.n	8001356 <HAL_I2C_Init+0x18e>
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	1e58      	subs	r0, r3, #1
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6859      	ldr	r1, [r3, #4]
 8001338:	460b      	mov	r3, r1
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	440b      	add	r3, r1
 800133e:	0099      	lsls	r1, r3, #2
 8001340:	440b      	add	r3, r1
 8001342:	fbb0 f3f3 	udiv	r3, r0, r3
 8001346:	3301      	adds	r3, #1
 8001348:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800134c:	2b00      	cmp	r3, #0
 800134e:	bf0c      	ite	eq
 8001350:	2301      	moveq	r3, #1
 8001352:	2300      	movne	r3, #0
 8001354:	b2db      	uxtb	r3, r3
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <HAL_I2C_Init+0x196>
 800135a:	2301      	movs	r3, #1
 800135c:	e022      	b.n	80013a4 <HAL_I2C_Init+0x1dc>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d10e      	bne.n	8001384 <HAL_I2C_Init+0x1bc>
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	1e58      	subs	r0, r3, #1
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6859      	ldr	r1, [r3, #4]
 800136e:	460b      	mov	r3, r1
 8001370:	005b      	lsls	r3, r3, #1
 8001372:	440b      	add	r3, r1
 8001374:	fbb0 f3f3 	udiv	r3, r0, r3
 8001378:	3301      	adds	r3, #1
 800137a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800137e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001382:	e00f      	b.n	80013a4 <HAL_I2C_Init+0x1dc>
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	1e58      	subs	r0, r3, #1
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6859      	ldr	r1, [r3, #4]
 800138c:	460b      	mov	r3, r1
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	440b      	add	r3, r1
 8001392:	0099      	lsls	r1, r3, #2
 8001394:	440b      	add	r3, r1
 8001396:	fbb0 f3f3 	udiv	r3, r0, r3
 800139a:	3301      	adds	r3, #1
 800139c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80013a4:	6879      	ldr	r1, [r7, #4]
 80013a6:	6809      	ldr	r1, [r1, #0]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	69da      	ldr	r2, [r3, #28]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6a1b      	ldr	r3, [r3, #32]
 80013be:	431a      	orrs	r2, r3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	430a      	orrs	r2, r1
 80013c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80013d2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80013d6:	687a      	ldr	r2, [r7, #4]
 80013d8:	6911      	ldr	r1, [r2, #16]
 80013da:	687a      	ldr	r2, [r7, #4]
 80013dc:	68d2      	ldr	r2, [r2, #12]
 80013de:	4311      	orrs	r1, r2
 80013e0:	687a      	ldr	r2, [r7, #4]
 80013e2:	6812      	ldr	r2, [r2, #0]
 80013e4:	430b      	orrs	r3, r1
 80013e6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	68db      	ldr	r3, [r3, #12]
 80013ee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	695a      	ldr	r2, [r3, #20]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	699b      	ldr	r3, [r3, #24]
 80013fa:	431a      	orrs	r2, r3
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	430a      	orrs	r2, r1
 8001402:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f042 0201 	orr.w	r2, r2, #1
 8001412:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2200      	movs	r2, #0
 8001418:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2220      	movs	r2, #32
 800141e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2200      	movs	r2, #0
 8001426:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2200      	movs	r2, #0
 800142c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001430:	2300      	movs	r3, #0
}
 8001432:	4618      	mov	r0, r3
 8001434:	3710      	adds	r7, #16
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	000186a0 	.word	0x000186a0
 8001440:	001e847f 	.word	0x001e847f
 8001444:	003d08ff 	.word	0x003d08ff
 8001448:	431bde83 	.word	0x431bde83
 800144c:	10624dd3 	.word	0x10624dd3

08001450 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b088      	sub	sp, #32
 8001454:	af02      	add	r7, sp, #8
 8001456:	60f8      	str	r0, [r7, #12]
 8001458:	607a      	str	r2, [r7, #4]
 800145a:	461a      	mov	r2, r3
 800145c:	460b      	mov	r3, r1
 800145e:	817b      	strh	r3, [r7, #10]
 8001460:	4613      	mov	r3, r2
 8001462:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001464:	f7ff fb0e 	bl	8000a84 <HAL_GetTick>
 8001468:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001470:	b2db      	uxtb	r3, r3
 8001472:	2b20      	cmp	r3, #32
 8001474:	f040 80e0 	bne.w	8001638 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	9300      	str	r3, [sp, #0]
 800147c:	2319      	movs	r3, #25
 800147e:	2201      	movs	r2, #1
 8001480:	4970      	ldr	r1, [pc, #448]	; (8001644 <HAL_I2C_Master_Transmit+0x1f4>)
 8001482:	68f8      	ldr	r0, [r7, #12]
 8001484:	f000 f964 	bl	8001750 <I2C_WaitOnFlagUntilTimeout>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800148e:	2302      	movs	r3, #2
 8001490:	e0d3      	b.n	800163a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001498:	2b01      	cmp	r3, #1
 800149a:	d101      	bne.n	80014a0 <HAL_I2C_Master_Transmit+0x50>
 800149c:	2302      	movs	r3, #2
 800149e:	e0cc      	b.n	800163a <HAL_I2C_Master_Transmit+0x1ea>
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	2201      	movs	r2, #1
 80014a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f003 0301 	and.w	r3, r3, #1
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	d007      	beq.n	80014c6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f042 0201 	orr.w	r2, r2, #1
 80014c4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80014d4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	2221      	movs	r2, #33	; 0x21
 80014da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	2210      	movs	r2, #16
 80014e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	2200      	movs	r2, #0
 80014ea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	687a      	ldr	r2, [r7, #4]
 80014f0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	893a      	ldrh	r2, [r7, #8]
 80014f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014fc:	b29a      	uxth	r2, r3
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	4a50      	ldr	r2, [pc, #320]	; (8001648 <HAL_I2C_Master_Transmit+0x1f8>)
 8001506:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001508:	8979      	ldrh	r1, [r7, #10]
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	6a3a      	ldr	r2, [r7, #32]
 800150e:	68f8      	ldr	r0, [r7, #12]
 8001510:	f000 f89c 	bl	800164c <I2C_MasterRequestWrite>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	e08d      	b.n	800163a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800151e:	2300      	movs	r3, #0
 8001520:	613b      	str	r3, [r7, #16]
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	695b      	ldr	r3, [r3, #20]
 8001528:	613b      	str	r3, [r7, #16]
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	699b      	ldr	r3, [r3, #24]
 8001530:	613b      	str	r3, [r7, #16]
 8001532:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001534:	e066      	b.n	8001604 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001536:	697a      	ldr	r2, [r7, #20]
 8001538:	6a39      	ldr	r1, [r7, #32]
 800153a:	68f8      	ldr	r0, [r7, #12]
 800153c:	f000 fa22 	bl	8001984 <I2C_WaitOnTXEFlagUntilTimeout>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d00d      	beq.n	8001562 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154a:	2b04      	cmp	r3, #4
 800154c:	d107      	bne.n	800155e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800155c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	e06b      	b.n	800163a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001566:	781a      	ldrb	r2, [r3, #0]
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001572:	1c5a      	adds	r2, r3, #1
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800157c:	b29b      	uxth	r3, r3
 800157e:	3b01      	subs	r3, #1
 8001580:	b29a      	uxth	r2, r3
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800158a:	3b01      	subs	r3, #1
 800158c:	b29a      	uxth	r2, r3
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	695b      	ldr	r3, [r3, #20]
 8001598:	f003 0304 	and.w	r3, r3, #4
 800159c:	2b04      	cmp	r3, #4
 800159e:	d11b      	bne.n	80015d8 <HAL_I2C_Master_Transmit+0x188>
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d017      	beq.n	80015d8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ac:	781a      	ldrb	r2, [r3, #0]
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b8:	1c5a      	adds	r2, r3, #1
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015c2:	b29b      	uxth	r3, r3
 80015c4:	3b01      	subs	r3, #1
 80015c6:	b29a      	uxth	r2, r3
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015d0:	3b01      	subs	r3, #1
 80015d2:	b29a      	uxth	r2, r3
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015d8:	697a      	ldr	r2, [r7, #20]
 80015da:	6a39      	ldr	r1, [r7, #32]
 80015dc:	68f8      	ldr	r0, [r7, #12]
 80015de:	f000 fa19 	bl	8001a14 <I2C_WaitOnBTFFlagUntilTimeout>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d00d      	beq.n	8001604 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ec:	2b04      	cmp	r3, #4
 80015ee:	d107      	bne.n	8001600 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80015fe:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	e01a      	b.n	800163a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001608:	2b00      	cmp	r3, #0
 800160a:	d194      	bne.n	8001536 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800161a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	2220      	movs	r2, #32
 8001620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	2200      	movs	r2, #0
 8001628:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	2200      	movs	r2, #0
 8001630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001634:	2300      	movs	r3, #0
 8001636:	e000      	b.n	800163a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001638:	2302      	movs	r3, #2
  }
}
 800163a:	4618      	mov	r0, r3
 800163c:	3718      	adds	r7, #24
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	00100002 	.word	0x00100002
 8001648:	ffff0000 	.word	0xffff0000

0800164c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b088      	sub	sp, #32
 8001650:	af02      	add	r7, sp, #8
 8001652:	60f8      	str	r0, [r7, #12]
 8001654:	607a      	str	r2, [r7, #4]
 8001656:	603b      	str	r3, [r7, #0]
 8001658:	460b      	mov	r3, r1
 800165a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001660:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	2b08      	cmp	r3, #8
 8001666:	d006      	beq.n	8001676 <I2C_MasterRequestWrite+0x2a>
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	2b01      	cmp	r3, #1
 800166c:	d003      	beq.n	8001676 <I2C_MasterRequestWrite+0x2a>
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001674:	d108      	bne.n	8001688 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001684:	601a      	str	r2, [r3, #0]
 8001686:	e00b      	b.n	80016a0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168c:	2b12      	cmp	r3, #18
 800168e:	d107      	bne.n	80016a0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800169e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	9300      	str	r3, [sp, #0]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2200      	movs	r2, #0
 80016a8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80016ac:	68f8      	ldr	r0, [r7, #12]
 80016ae:	f000 f84f 	bl	8001750 <I2C_WaitOnFlagUntilTimeout>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d00d      	beq.n	80016d4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016c6:	d103      	bne.n	80016d0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016ce:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80016d0:	2303      	movs	r3, #3
 80016d2:	e035      	b.n	8001740 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	691b      	ldr	r3, [r3, #16]
 80016d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80016dc:	d108      	bne.n	80016f0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80016de:	897b      	ldrh	r3, [r7, #10]
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	461a      	mov	r2, r3
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80016ec:	611a      	str	r2, [r3, #16]
 80016ee:	e01b      	b.n	8001728 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80016f0:	897b      	ldrh	r3, [r7, #10]
 80016f2:	11db      	asrs	r3, r3, #7
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	f003 0306 	and.w	r3, r3, #6
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	f063 030f 	orn	r3, r3, #15
 8001700:	b2da      	uxtb	r2, r3
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	490e      	ldr	r1, [pc, #56]	; (8001748 <I2C_MasterRequestWrite+0xfc>)
 800170e:	68f8      	ldr	r0, [r7, #12]
 8001710:	f000 f898 	bl	8001844 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e010      	b.n	8001740 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800171e:	897b      	ldrh	r3, [r7, #10]
 8001720:	b2da      	uxtb	r2, r3
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	687a      	ldr	r2, [r7, #4]
 800172c:	4907      	ldr	r1, [pc, #28]	; (800174c <I2C_MasterRequestWrite+0x100>)
 800172e:	68f8      	ldr	r0, [r7, #12]
 8001730:	f000 f888 	bl	8001844 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e000      	b.n	8001740 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800173e:	2300      	movs	r3, #0
}
 8001740:	4618      	mov	r0, r3
 8001742:	3718      	adds	r7, #24
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	00010008 	.word	0x00010008
 800174c:	00010002 	.word	0x00010002

08001750 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	60f8      	str	r0, [r7, #12]
 8001758:	60b9      	str	r1, [r7, #8]
 800175a:	603b      	str	r3, [r7, #0]
 800175c:	4613      	mov	r3, r2
 800175e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001760:	e048      	b.n	80017f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001768:	d044      	beq.n	80017f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800176a:	f7ff f98b 	bl	8000a84 <HAL_GetTick>
 800176e:	4602      	mov	r2, r0
 8001770:	69bb      	ldr	r3, [r7, #24]
 8001772:	1ad3      	subs	r3, r2, r3
 8001774:	683a      	ldr	r2, [r7, #0]
 8001776:	429a      	cmp	r2, r3
 8001778:	d302      	bcc.n	8001780 <I2C_WaitOnFlagUntilTimeout+0x30>
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d139      	bne.n	80017f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	0c1b      	lsrs	r3, r3, #16
 8001784:	b2db      	uxtb	r3, r3
 8001786:	2b01      	cmp	r3, #1
 8001788:	d10d      	bne.n	80017a6 <I2C_WaitOnFlagUntilTimeout+0x56>
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	695b      	ldr	r3, [r3, #20]
 8001790:	43da      	mvns	r2, r3
 8001792:	68bb      	ldr	r3, [r7, #8]
 8001794:	4013      	ands	r3, r2
 8001796:	b29b      	uxth	r3, r3
 8001798:	2b00      	cmp	r3, #0
 800179a:	bf0c      	ite	eq
 800179c:	2301      	moveq	r3, #1
 800179e:	2300      	movne	r3, #0
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	461a      	mov	r2, r3
 80017a4:	e00c      	b.n	80017c0 <I2C_WaitOnFlagUntilTimeout+0x70>
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	699b      	ldr	r3, [r3, #24]
 80017ac:	43da      	mvns	r2, r3
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	4013      	ands	r3, r2
 80017b2:	b29b      	uxth	r3, r3
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	bf0c      	ite	eq
 80017b8:	2301      	moveq	r3, #1
 80017ba:	2300      	movne	r3, #0
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	461a      	mov	r2, r3
 80017c0:	79fb      	ldrb	r3, [r7, #7]
 80017c2:	429a      	cmp	r2, r3
 80017c4:	d116      	bne.n	80017f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	2200      	movs	r2, #0
 80017ca:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	2220      	movs	r2, #32
 80017d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	2200      	movs	r2, #0
 80017d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e0:	f043 0220 	orr.w	r2, r3, #32
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	2200      	movs	r2, #0
 80017ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e023      	b.n	800183c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	0c1b      	lsrs	r3, r3, #16
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d10d      	bne.n	800181a <I2C_WaitOnFlagUntilTimeout+0xca>
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	695b      	ldr	r3, [r3, #20]
 8001804:	43da      	mvns	r2, r3
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	4013      	ands	r3, r2
 800180a:	b29b      	uxth	r3, r3
 800180c:	2b00      	cmp	r3, #0
 800180e:	bf0c      	ite	eq
 8001810:	2301      	moveq	r3, #1
 8001812:	2300      	movne	r3, #0
 8001814:	b2db      	uxtb	r3, r3
 8001816:	461a      	mov	r2, r3
 8001818:	e00c      	b.n	8001834 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	699b      	ldr	r3, [r3, #24]
 8001820:	43da      	mvns	r2, r3
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	4013      	ands	r3, r2
 8001826:	b29b      	uxth	r3, r3
 8001828:	2b00      	cmp	r3, #0
 800182a:	bf0c      	ite	eq
 800182c:	2301      	moveq	r3, #1
 800182e:	2300      	movne	r3, #0
 8001830:	b2db      	uxtb	r3, r3
 8001832:	461a      	mov	r2, r3
 8001834:	79fb      	ldrb	r3, [r7, #7]
 8001836:	429a      	cmp	r2, r3
 8001838:	d093      	beq.n	8001762 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800183a:	2300      	movs	r3, #0
}
 800183c:	4618      	mov	r0, r3
 800183e:	3710      	adds	r7, #16
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}

08001844 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af00      	add	r7, sp, #0
 800184a:	60f8      	str	r0, [r7, #12]
 800184c:	60b9      	str	r1, [r7, #8]
 800184e:	607a      	str	r2, [r7, #4]
 8001850:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001852:	e071      	b.n	8001938 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	695b      	ldr	r3, [r3, #20]
 800185a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800185e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001862:	d123      	bne.n	80018ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001872:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800187c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	2200      	movs	r2, #0
 8001882:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	2220      	movs	r2, #32
 8001888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	2200      	movs	r2, #0
 8001890:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001898:	f043 0204 	orr.w	r2, r3, #4
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	2200      	movs	r2, #0
 80018a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	e067      	b.n	800197c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018b2:	d041      	beq.n	8001938 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018b4:	f7ff f8e6 	bl	8000a84 <HAL_GetTick>
 80018b8:	4602      	mov	r2, r0
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	687a      	ldr	r2, [r7, #4]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d302      	bcc.n	80018ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d136      	bne.n	8001938 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	0c1b      	lsrs	r3, r3, #16
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d10c      	bne.n	80018ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	695b      	ldr	r3, [r3, #20]
 80018da:	43da      	mvns	r2, r3
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	4013      	ands	r3, r2
 80018e0:	b29b      	uxth	r3, r3
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	bf14      	ite	ne
 80018e6:	2301      	movne	r3, #1
 80018e8:	2300      	moveq	r3, #0
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	e00b      	b.n	8001906 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	699b      	ldr	r3, [r3, #24]
 80018f4:	43da      	mvns	r2, r3
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	4013      	ands	r3, r2
 80018fa:	b29b      	uxth	r3, r3
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	bf14      	ite	ne
 8001900:	2301      	movne	r3, #1
 8001902:	2300      	moveq	r3, #0
 8001904:	b2db      	uxtb	r3, r3
 8001906:	2b00      	cmp	r3, #0
 8001908:	d016      	beq.n	8001938 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	2200      	movs	r2, #0
 800190e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	2220      	movs	r2, #32
 8001914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	2200      	movs	r2, #0
 800191c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001924:	f043 0220 	orr.w	r2, r3, #32
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	2200      	movs	r2, #0
 8001930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	e021      	b.n	800197c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	0c1b      	lsrs	r3, r3, #16
 800193c:	b2db      	uxtb	r3, r3
 800193e:	2b01      	cmp	r3, #1
 8001940:	d10c      	bne.n	800195c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	695b      	ldr	r3, [r3, #20]
 8001948:	43da      	mvns	r2, r3
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	4013      	ands	r3, r2
 800194e:	b29b      	uxth	r3, r3
 8001950:	2b00      	cmp	r3, #0
 8001952:	bf14      	ite	ne
 8001954:	2301      	movne	r3, #1
 8001956:	2300      	moveq	r3, #0
 8001958:	b2db      	uxtb	r3, r3
 800195a:	e00b      	b.n	8001974 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	699b      	ldr	r3, [r3, #24]
 8001962:	43da      	mvns	r2, r3
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	4013      	ands	r3, r2
 8001968:	b29b      	uxth	r3, r3
 800196a:	2b00      	cmp	r3, #0
 800196c:	bf14      	ite	ne
 800196e:	2301      	movne	r3, #1
 8001970:	2300      	moveq	r3, #0
 8001972:	b2db      	uxtb	r3, r3
 8001974:	2b00      	cmp	r3, #0
 8001976:	f47f af6d 	bne.w	8001854 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800197a:	2300      	movs	r3, #0
}
 800197c:	4618      	mov	r0, r3
 800197e:	3710      	adds	r7, #16
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}

08001984 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b084      	sub	sp, #16
 8001988:	af00      	add	r7, sp, #0
 800198a:	60f8      	str	r0, [r7, #12]
 800198c:	60b9      	str	r1, [r7, #8]
 800198e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001990:	e034      	b.n	80019fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001992:	68f8      	ldr	r0, [r7, #12]
 8001994:	f000 f886 	bl	8001aa4 <I2C_IsAcknowledgeFailed>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e034      	b.n	8001a0c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019a8:	d028      	beq.n	80019fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019aa:	f7ff f86b 	bl	8000a84 <HAL_GetTick>
 80019ae:	4602      	mov	r2, r0
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	68ba      	ldr	r2, [r7, #8]
 80019b6:	429a      	cmp	r2, r3
 80019b8:	d302      	bcc.n	80019c0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d11d      	bne.n	80019fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	695b      	ldr	r3, [r3, #20]
 80019c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019ca:	2b80      	cmp	r3, #128	; 0x80
 80019cc:	d016      	beq.n	80019fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	2200      	movs	r2, #0
 80019d2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	2220      	movs	r2, #32
 80019d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	2200      	movs	r2, #0
 80019e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e8:	f043 0220 	orr.w	r2, r3, #32
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	2200      	movs	r2, #0
 80019f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	e007      	b.n	8001a0c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	695b      	ldr	r3, [r3, #20]
 8001a02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a06:	2b80      	cmp	r3, #128	; 0x80
 8001a08:	d1c3      	bne.n	8001992 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001a0a:	2300      	movs	r3, #0
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3710      	adds	r7, #16
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}

08001a14 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b084      	sub	sp, #16
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	60f8      	str	r0, [r7, #12]
 8001a1c:	60b9      	str	r1, [r7, #8]
 8001a1e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001a20:	e034      	b.n	8001a8c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001a22:	68f8      	ldr	r0, [r7, #12]
 8001a24:	f000 f83e 	bl	8001aa4 <I2C_IsAcknowledgeFailed>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e034      	b.n	8001a9c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a38:	d028      	beq.n	8001a8c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a3a:	f7ff f823 	bl	8000a84 <HAL_GetTick>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	1ad3      	subs	r3, r2, r3
 8001a44:	68ba      	ldr	r2, [r7, #8]
 8001a46:	429a      	cmp	r2, r3
 8001a48:	d302      	bcc.n	8001a50 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d11d      	bne.n	8001a8c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	695b      	ldr	r3, [r3, #20]
 8001a56:	f003 0304 	and.w	r3, r3, #4
 8001a5a:	2b04      	cmp	r3, #4
 8001a5c:	d016      	beq.n	8001a8c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	2200      	movs	r2, #0
 8001a62:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	2220      	movs	r2, #32
 8001a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a78:	f043 0220 	orr.w	r2, r3, #32
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	2200      	movs	r2, #0
 8001a84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e007      	b.n	8001a9c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	695b      	ldr	r3, [r3, #20]
 8001a92:	f003 0304 	and.w	r3, r3, #4
 8001a96:	2b04      	cmp	r3, #4
 8001a98:	d1c3      	bne.n	8001a22 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001a9a:	2300      	movs	r3, #0
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3710      	adds	r7, #16
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	695b      	ldr	r3, [r3, #20]
 8001ab2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ab6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001aba:	d11b      	bne.n	8001af4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001ac4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2220      	movs	r2, #32
 8001ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae0:	f043 0204 	orr.w	r2, r3, #4
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2200      	movs	r2, #0
 8001aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e000      	b.n	8001af6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001af4:	2300      	movs	r3, #0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	370c      	adds	r7, #12
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bc80      	pop	{r7}
 8001afe:	4770      	bx	lr

08001b00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b086      	sub	sp, #24
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d101      	bne.n	8001b12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e272      	b.n	8001ff8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 0301 	and.w	r3, r3, #1
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	f000 8087 	beq.w	8001c2e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b20:	4b92      	ldr	r3, [pc, #584]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f003 030c 	and.w	r3, r3, #12
 8001b28:	2b04      	cmp	r3, #4
 8001b2a:	d00c      	beq.n	8001b46 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b2c:	4b8f      	ldr	r3, [pc, #572]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f003 030c 	and.w	r3, r3, #12
 8001b34:	2b08      	cmp	r3, #8
 8001b36:	d112      	bne.n	8001b5e <HAL_RCC_OscConfig+0x5e>
 8001b38:	4b8c      	ldr	r3, [pc, #560]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b44:	d10b      	bne.n	8001b5e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b46:	4b89      	ldr	r3, [pc, #548]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d06c      	beq.n	8001c2c <HAL_RCC_OscConfig+0x12c>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d168      	bne.n	8001c2c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e24c      	b.n	8001ff8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b66:	d106      	bne.n	8001b76 <HAL_RCC_OscConfig+0x76>
 8001b68:	4b80      	ldr	r3, [pc, #512]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a7f      	ldr	r2, [pc, #508]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001b6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b72:	6013      	str	r3, [r2, #0]
 8001b74:	e02e      	b.n	8001bd4 <HAL_RCC_OscConfig+0xd4>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d10c      	bne.n	8001b98 <HAL_RCC_OscConfig+0x98>
 8001b7e:	4b7b      	ldr	r3, [pc, #492]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a7a      	ldr	r2, [pc, #488]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001b84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b88:	6013      	str	r3, [r2, #0]
 8001b8a:	4b78      	ldr	r3, [pc, #480]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a77      	ldr	r2, [pc, #476]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001b90:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b94:	6013      	str	r3, [r2, #0]
 8001b96:	e01d      	b.n	8001bd4 <HAL_RCC_OscConfig+0xd4>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ba0:	d10c      	bne.n	8001bbc <HAL_RCC_OscConfig+0xbc>
 8001ba2:	4b72      	ldr	r3, [pc, #456]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a71      	ldr	r2, [pc, #452]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001ba8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bac:	6013      	str	r3, [r2, #0]
 8001bae:	4b6f      	ldr	r3, [pc, #444]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a6e      	ldr	r2, [pc, #440]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001bb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bb8:	6013      	str	r3, [r2, #0]
 8001bba:	e00b      	b.n	8001bd4 <HAL_RCC_OscConfig+0xd4>
 8001bbc:	4b6b      	ldr	r3, [pc, #428]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a6a      	ldr	r2, [pc, #424]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001bc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bc6:	6013      	str	r3, [r2, #0]
 8001bc8:	4b68      	ldr	r3, [pc, #416]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a67      	ldr	r2, [pc, #412]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001bce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bd2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d013      	beq.n	8001c04 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bdc:	f7fe ff52 	bl	8000a84 <HAL_GetTick>
 8001be0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001be2:	e008      	b.n	8001bf6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001be4:	f7fe ff4e 	bl	8000a84 <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	2b64      	cmp	r3, #100	; 0x64
 8001bf0:	d901      	bls.n	8001bf6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	e200      	b.n	8001ff8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bf6:	4b5d      	ldr	r3, [pc, #372]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d0f0      	beq.n	8001be4 <HAL_RCC_OscConfig+0xe4>
 8001c02:	e014      	b.n	8001c2e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c04:	f7fe ff3e 	bl	8000a84 <HAL_GetTick>
 8001c08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c0a:	e008      	b.n	8001c1e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c0c:	f7fe ff3a 	bl	8000a84 <HAL_GetTick>
 8001c10:	4602      	mov	r2, r0
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	2b64      	cmp	r3, #100	; 0x64
 8001c18:	d901      	bls.n	8001c1e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e1ec      	b.n	8001ff8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c1e:	4b53      	ldr	r3, [pc, #332]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d1f0      	bne.n	8001c0c <HAL_RCC_OscConfig+0x10c>
 8001c2a:	e000      	b.n	8001c2e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0302 	and.w	r3, r3, #2
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d063      	beq.n	8001d02 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c3a:	4b4c      	ldr	r3, [pc, #304]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f003 030c 	and.w	r3, r3, #12
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d00b      	beq.n	8001c5e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c46:	4b49      	ldr	r3, [pc, #292]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	f003 030c 	and.w	r3, r3, #12
 8001c4e:	2b08      	cmp	r3, #8
 8001c50:	d11c      	bne.n	8001c8c <HAL_RCC_OscConfig+0x18c>
 8001c52:	4b46      	ldr	r3, [pc, #280]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d116      	bne.n	8001c8c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c5e:	4b43      	ldr	r3, [pc, #268]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0302 	and.w	r3, r3, #2
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d005      	beq.n	8001c76 <HAL_RCC_OscConfig+0x176>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	691b      	ldr	r3, [r3, #16]
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d001      	beq.n	8001c76 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e1c0      	b.n	8001ff8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c76:	4b3d      	ldr	r3, [pc, #244]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	695b      	ldr	r3, [r3, #20]
 8001c82:	00db      	lsls	r3, r3, #3
 8001c84:	4939      	ldr	r1, [pc, #228]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001c86:	4313      	orrs	r3, r2
 8001c88:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c8a:	e03a      	b.n	8001d02 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	691b      	ldr	r3, [r3, #16]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d020      	beq.n	8001cd6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c94:	4b36      	ldr	r3, [pc, #216]	; (8001d70 <HAL_RCC_OscConfig+0x270>)
 8001c96:	2201      	movs	r2, #1
 8001c98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c9a:	f7fe fef3 	bl	8000a84 <HAL_GetTick>
 8001c9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ca0:	e008      	b.n	8001cb4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ca2:	f7fe feef 	bl	8000a84 <HAL_GetTick>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	1ad3      	subs	r3, r2, r3
 8001cac:	2b02      	cmp	r3, #2
 8001cae:	d901      	bls.n	8001cb4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001cb0:	2303      	movs	r3, #3
 8001cb2:	e1a1      	b.n	8001ff8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cb4:	4b2d      	ldr	r3, [pc, #180]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 0302 	and.w	r3, r3, #2
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d0f0      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cc0:	4b2a      	ldr	r3, [pc, #168]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	695b      	ldr	r3, [r3, #20]
 8001ccc:	00db      	lsls	r3, r3, #3
 8001cce:	4927      	ldr	r1, [pc, #156]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	600b      	str	r3, [r1, #0]
 8001cd4:	e015      	b.n	8001d02 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cd6:	4b26      	ldr	r3, [pc, #152]	; (8001d70 <HAL_RCC_OscConfig+0x270>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cdc:	f7fe fed2 	bl	8000a84 <HAL_GetTick>
 8001ce0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ce2:	e008      	b.n	8001cf6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ce4:	f7fe fece 	bl	8000a84 <HAL_GetTick>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d901      	bls.n	8001cf6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e180      	b.n	8001ff8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cf6:	4b1d      	ldr	r3, [pc, #116]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0302 	and.w	r3, r3, #2
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d1f0      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 0308 	and.w	r3, r3, #8
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d03a      	beq.n	8001d84 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	699b      	ldr	r3, [r3, #24]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d019      	beq.n	8001d4a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d16:	4b17      	ldr	r3, [pc, #92]	; (8001d74 <HAL_RCC_OscConfig+0x274>)
 8001d18:	2201      	movs	r2, #1
 8001d1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d1c:	f7fe feb2 	bl	8000a84 <HAL_GetTick>
 8001d20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d22:	e008      	b.n	8001d36 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d24:	f7fe feae 	bl	8000a84 <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d901      	bls.n	8001d36 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e160      	b.n	8001ff8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d36:	4b0d      	ldr	r3, [pc, #52]	; (8001d6c <HAL_RCC_OscConfig+0x26c>)
 8001d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d3a:	f003 0302 	and.w	r3, r3, #2
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d0f0      	beq.n	8001d24 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d42:	2001      	movs	r0, #1
 8001d44:	f000 face 	bl	80022e4 <RCC_Delay>
 8001d48:	e01c      	b.n	8001d84 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d4a:	4b0a      	ldr	r3, [pc, #40]	; (8001d74 <HAL_RCC_OscConfig+0x274>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d50:	f7fe fe98 	bl	8000a84 <HAL_GetTick>
 8001d54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d56:	e00f      	b.n	8001d78 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d58:	f7fe fe94 	bl	8000a84 <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d908      	bls.n	8001d78 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	e146      	b.n	8001ff8 <HAL_RCC_OscConfig+0x4f8>
 8001d6a:	bf00      	nop
 8001d6c:	40021000 	.word	0x40021000
 8001d70:	42420000 	.word	0x42420000
 8001d74:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d78:	4b92      	ldr	r3, [pc, #584]	; (8001fc4 <HAL_RCC_OscConfig+0x4c4>)
 8001d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d7c:	f003 0302 	and.w	r3, r3, #2
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d1e9      	bne.n	8001d58 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0304 	and.w	r3, r3, #4
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	f000 80a6 	beq.w	8001ede <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d92:	2300      	movs	r3, #0
 8001d94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d96:	4b8b      	ldr	r3, [pc, #556]	; (8001fc4 <HAL_RCC_OscConfig+0x4c4>)
 8001d98:	69db      	ldr	r3, [r3, #28]
 8001d9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d10d      	bne.n	8001dbe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001da2:	4b88      	ldr	r3, [pc, #544]	; (8001fc4 <HAL_RCC_OscConfig+0x4c4>)
 8001da4:	69db      	ldr	r3, [r3, #28]
 8001da6:	4a87      	ldr	r2, [pc, #540]	; (8001fc4 <HAL_RCC_OscConfig+0x4c4>)
 8001da8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dac:	61d3      	str	r3, [r2, #28]
 8001dae:	4b85      	ldr	r3, [pc, #532]	; (8001fc4 <HAL_RCC_OscConfig+0x4c4>)
 8001db0:	69db      	ldr	r3, [r3, #28]
 8001db2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001db6:	60bb      	str	r3, [r7, #8]
 8001db8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dbe:	4b82      	ldr	r3, [pc, #520]	; (8001fc8 <HAL_RCC_OscConfig+0x4c8>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d118      	bne.n	8001dfc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dca:	4b7f      	ldr	r3, [pc, #508]	; (8001fc8 <HAL_RCC_OscConfig+0x4c8>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a7e      	ldr	r2, [pc, #504]	; (8001fc8 <HAL_RCC_OscConfig+0x4c8>)
 8001dd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dd6:	f7fe fe55 	bl	8000a84 <HAL_GetTick>
 8001dda:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ddc:	e008      	b.n	8001df0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dde:	f7fe fe51 	bl	8000a84 <HAL_GetTick>
 8001de2:	4602      	mov	r2, r0
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	1ad3      	subs	r3, r2, r3
 8001de8:	2b64      	cmp	r3, #100	; 0x64
 8001dea:	d901      	bls.n	8001df0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001dec:	2303      	movs	r3, #3
 8001dee:	e103      	b.n	8001ff8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001df0:	4b75      	ldr	r3, [pc, #468]	; (8001fc8 <HAL_RCC_OscConfig+0x4c8>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d0f0      	beq.n	8001dde <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d106      	bne.n	8001e12 <HAL_RCC_OscConfig+0x312>
 8001e04:	4b6f      	ldr	r3, [pc, #444]	; (8001fc4 <HAL_RCC_OscConfig+0x4c4>)
 8001e06:	6a1b      	ldr	r3, [r3, #32]
 8001e08:	4a6e      	ldr	r2, [pc, #440]	; (8001fc4 <HAL_RCC_OscConfig+0x4c4>)
 8001e0a:	f043 0301 	orr.w	r3, r3, #1
 8001e0e:	6213      	str	r3, [r2, #32]
 8001e10:	e02d      	b.n	8001e6e <HAL_RCC_OscConfig+0x36e>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	68db      	ldr	r3, [r3, #12]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d10c      	bne.n	8001e34 <HAL_RCC_OscConfig+0x334>
 8001e1a:	4b6a      	ldr	r3, [pc, #424]	; (8001fc4 <HAL_RCC_OscConfig+0x4c4>)
 8001e1c:	6a1b      	ldr	r3, [r3, #32]
 8001e1e:	4a69      	ldr	r2, [pc, #420]	; (8001fc4 <HAL_RCC_OscConfig+0x4c4>)
 8001e20:	f023 0301 	bic.w	r3, r3, #1
 8001e24:	6213      	str	r3, [r2, #32]
 8001e26:	4b67      	ldr	r3, [pc, #412]	; (8001fc4 <HAL_RCC_OscConfig+0x4c4>)
 8001e28:	6a1b      	ldr	r3, [r3, #32]
 8001e2a:	4a66      	ldr	r2, [pc, #408]	; (8001fc4 <HAL_RCC_OscConfig+0x4c4>)
 8001e2c:	f023 0304 	bic.w	r3, r3, #4
 8001e30:	6213      	str	r3, [r2, #32]
 8001e32:	e01c      	b.n	8001e6e <HAL_RCC_OscConfig+0x36e>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	2b05      	cmp	r3, #5
 8001e3a:	d10c      	bne.n	8001e56 <HAL_RCC_OscConfig+0x356>
 8001e3c:	4b61      	ldr	r3, [pc, #388]	; (8001fc4 <HAL_RCC_OscConfig+0x4c4>)
 8001e3e:	6a1b      	ldr	r3, [r3, #32]
 8001e40:	4a60      	ldr	r2, [pc, #384]	; (8001fc4 <HAL_RCC_OscConfig+0x4c4>)
 8001e42:	f043 0304 	orr.w	r3, r3, #4
 8001e46:	6213      	str	r3, [r2, #32]
 8001e48:	4b5e      	ldr	r3, [pc, #376]	; (8001fc4 <HAL_RCC_OscConfig+0x4c4>)
 8001e4a:	6a1b      	ldr	r3, [r3, #32]
 8001e4c:	4a5d      	ldr	r2, [pc, #372]	; (8001fc4 <HAL_RCC_OscConfig+0x4c4>)
 8001e4e:	f043 0301 	orr.w	r3, r3, #1
 8001e52:	6213      	str	r3, [r2, #32]
 8001e54:	e00b      	b.n	8001e6e <HAL_RCC_OscConfig+0x36e>
 8001e56:	4b5b      	ldr	r3, [pc, #364]	; (8001fc4 <HAL_RCC_OscConfig+0x4c4>)
 8001e58:	6a1b      	ldr	r3, [r3, #32]
 8001e5a:	4a5a      	ldr	r2, [pc, #360]	; (8001fc4 <HAL_RCC_OscConfig+0x4c4>)
 8001e5c:	f023 0301 	bic.w	r3, r3, #1
 8001e60:	6213      	str	r3, [r2, #32]
 8001e62:	4b58      	ldr	r3, [pc, #352]	; (8001fc4 <HAL_RCC_OscConfig+0x4c4>)
 8001e64:	6a1b      	ldr	r3, [r3, #32]
 8001e66:	4a57      	ldr	r2, [pc, #348]	; (8001fc4 <HAL_RCC_OscConfig+0x4c4>)
 8001e68:	f023 0304 	bic.w	r3, r3, #4
 8001e6c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	68db      	ldr	r3, [r3, #12]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d015      	beq.n	8001ea2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e76:	f7fe fe05 	bl	8000a84 <HAL_GetTick>
 8001e7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e7c:	e00a      	b.n	8001e94 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e7e:	f7fe fe01 	bl	8000a84 <HAL_GetTick>
 8001e82:	4602      	mov	r2, r0
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	1ad3      	subs	r3, r2, r3
 8001e88:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d901      	bls.n	8001e94 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e90:	2303      	movs	r3, #3
 8001e92:	e0b1      	b.n	8001ff8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e94:	4b4b      	ldr	r3, [pc, #300]	; (8001fc4 <HAL_RCC_OscConfig+0x4c4>)
 8001e96:	6a1b      	ldr	r3, [r3, #32]
 8001e98:	f003 0302 	and.w	r3, r3, #2
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d0ee      	beq.n	8001e7e <HAL_RCC_OscConfig+0x37e>
 8001ea0:	e014      	b.n	8001ecc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ea2:	f7fe fdef 	bl	8000a84 <HAL_GetTick>
 8001ea6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ea8:	e00a      	b.n	8001ec0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eaa:	f7fe fdeb 	bl	8000a84 <HAL_GetTick>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	1ad3      	subs	r3, r2, r3
 8001eb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d901      	bls.n	8001ec0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	e09b      	b.n	8001ff8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ec0:	4b40      	ldr	r3, [pc, #256]	; (8001fc4 <HAL_RCC_OscConfig+0x4c4>)
 8001ec2:	6a1b      	ldr	r3, [r3, #32]
 8001ec4:	f003 0302 	and.w	r3, r3, #2
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d1ee      	bne.n	8001eaa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ecc:	7dfb      	ldrb	r3, [r7, #23]
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d105      	bne.n	8001ede <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ed2:	4b3c      	ldr	r3, [pc, #240]	; (8001fc4 <HAL_RCC_OscConfig+0x4c4>)
 8001ed4:	69db      	ldr	r3, [r3, #28]
 8001ed6:	4a3b      	ldr	r2, [pc, #236]	; (8001fc4 <HAL_RCC_OscConfig+0x4c4>)
 8001ed8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001edc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	69db      	ldr	r3, [r3, #28]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	f000 8087 	beq.w	8001ff6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ee8:	4b36      	ldr	r3, [pc, #216]	; (8001fc4 <HAL_RCC_OscConfig+0x4c4>)
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f003 030c 	and.w	r3, r3, #12
 8001ef0:	2b08      	cmp	r3, #8
 8001ef2:	d061      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	69db      	ldr	r3, [r3, #28]
 8001ef8:	2b02      	cmp	r3, #2
 8001efa:	d146      	bne.n	8001f8a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001efc:	4b33      	ldr	r3, [pc, #204]	; (8001fcc <HAL_RCC_OscConfig+0x4cc>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f02:	f7fe fdbf 	bl	8000a84 <HAL_GetTick>
 8001f06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f08:	e008      	b.n	8001f1c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f0a:	f7fe fdbb 	bl	8000a84 <HAL_GetTick>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	1ad3      	subs	r3, r2, r3
 8001f14:	2b02      	cmp	r3, #2
 8001f16:	d901      	bls.n	8001f1c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f18:	2303      	movs	r3, #3
 8001f1a:	e06d      	b.n	8001ff8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f1c:	4b29      	ldr	r3, [pc, #164]	; (8001fc4 <HAL_RCC_OscConfig+0x4c4>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d1f0      	bne.n	8001f0a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6a1b      	ldr	r3, [r3, #32]
 8001f2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f30:	d108      	bne.n	8001f44 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f32:	4b24      	ldr	r3, [pc, #144]	; (8001fc4 <HAL_RCC_OscConfig+0x4c4>)
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	4921      	ldr	r1, [pc, #132]	; (8001fc4 <HAL_RCC_OscConfig+0x4c4>)
 8001f40:	4313      	orrs	r3, r2
 8001f42:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f44:	4b1f      	ldr	r3, [pc, #124]	; (8001fc4 <HAL_RCC_OscConfig+0x4c4>)
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6a19      	ldr	r1, [r3, #32]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f54:	430b      	orrs	r3, r1
 8001f56:	491b      	ldr	r1, [pc, #108]	; (8001fc4 <HAL_RCC_OscConfig+0x4c4>)
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f5c:	4b1b      	ldr	r3, [pc, #108]	; (8001fcc <HAL_RCC_OscConfig+0x4cc>)
 8001f5e:	2201      	movs	r2, #1
 8001f60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f62:	f7fe fd8f 	bl	8000a84 <HAL_GetTick>
 8001f66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f68:	e008      	b.n	8001f7c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f6a:	f7fe fd8b 	bl	8000a84 <HAL_GetTick>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	2b02      	cmp	r3, #2
 8001f76:	d901      	bls.n	8001f7c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	e03d      	b.n	8001ff8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f7c:	4b11      	ldr	r3, [pc, #68]	; (8001fc4 <HAL_RCC_OscConfig+0x4c4>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d0f0      	beq.n	8001f6a <HAL_RCC_OscConfig+0x46a>
 8001f88:	e035      	b.n	8001ff6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f8a:	4b10      	ldr	r3, [pc, #64]	; (8001fcc <HAL_RCC_OscConfig+0x4cc>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f90:	f7fe fd78 	bl	8000a84 <HAL_GetTick>
 8001f94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f96:	e008      	b.n	8001faa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f98:	f7fe fd74 	bl	8000a84 <HAL_GetTick>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d901      	bls.n	8001faa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	e026      	b.n	8001ff8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001faa:	4b06      	ldr	r3, [pc, #24]	; (8001fc4 <HAL_RCC_OscConfig+0x4c4>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d1f0      	bne.n	8001f98 <HAL_RCC_OscConfig+0x498>
 8001fb6:	e01e      	b.n	8001ff6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	69db      	ldr	r3, [r3, #28]
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d107      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e019      	b.n	8001ff8 <HAL_RCC_OscConfig+0x4f8>
 8001fc4:	40021000 	.word	0x40021000
 8001fc8:	40007000 	.word	0x40007000
 8001fcc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001fd0:	4b0b      	ldr	r3, [pc, #44]	; (8002000 <HAL_RCC_OscConfig+0x500>)
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6a1b      	ldr	r3, [r3, #32]
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d106      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d001      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e000      	b.n	8001ff8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001ff6:	2300      	movs	r3, #0
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	3718      	adds	r7, #24
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	40021000 	.word	0x40021000

08002004 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b084      	sub	sp, #16
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d101      	bne.n	8002018 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e0d0      	b.n	80021ba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002018:	4b6a      	ldr	r3, [pc, #424]	; (80021c4 <HAL_RCC_ClockConfig+0x1c0>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0307 	and.w	r3, r3, #7
 8002020:	683a      	ldr	r2, [r7, #0]
 8002022:	429a      	cmp	r2, r3
 8002024:	d910      	bls.n	8002048 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002026:	4b67      	ldr	r3, [pc, #412]	; (80021c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f023 0207 	bic.w	r2, r3, #7
 800202e:	4965      	ldr	r1, [pc, #404]	; (80021c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	4313      	orrs	r3, r2
 8002034:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002036:	4b63      	ldr	r3, [pc, #396]	; (80021c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0307 	and.w	r3, r3, #7
 800203e:	683a      	ldr	r2, [r7, #0]
 8002040:	429a      	cmp	r2, r3
 8002042:	d001      	beq.n	8002048 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e0b8      	b.n	80021ba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0302 	and.w	r3, r3, #2
 8002050:	2b00      	cmp	r3, #0
 8002052:	d020      	beq.n	8002096 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0304 	and.w	r3, r3, #4
 800205c:	2b00      	cmp	r3, #0
 800205e:	d005      	beq.n	800206c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002060:	4b59      	ldr	r3, [pc, #356]	; (80021c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	4a58      	ldr	r2, [pc, #352]	; (80021c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002066:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800206a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 0308 	and.w	r3, r3, #8
 8002074:	2b00      	cmp	r3, #0
 8002076:	d005      	beq.n	8002084 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002078:	4b53      	ldr	r3, [pc, #332]	; (80021c8 <HAL_RCC_ClockConfig+0x1c4>)
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	4a52      	ldr	r2, [pc, #328]	; (80021c8 <HAL_RCC_ClockConfig+0x1c4>)
 800207e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002082:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002084:	4b50      	ldr	r3, [pc, #320]	; (80021c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	494d      	ldr	r1, [pc, #308]	; (80021c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002092:	4313      	orrs	r3, r2
 8002094:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0301 	and.w	r3, r3, #1
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d040      	beq.n	8002124 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d107      	bne.n	80020ba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020aa:	4b47      	ldr	r3, [pc, #284]	; (80021c8 <HAL_RCC_ClockConfig+0x1c4>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d115      	bne.n	80020e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e07f      	b.n	80021ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d107      	bne.n	80020d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020c2:	4b41      	ldr	r3, [pc, #260]	; (80021c8 <HAL_RCC_ClockConfig+0x1c4>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d109      	bne.n	80020e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e073      	b.n	80021ba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020d2:	4b3d      	ldr	r3, [pc, #244]	; (80021c8 <HAL_RCC_ClockConfig+0x1c4>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0302 	and.w	r3, r3, #2
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d101      	bne.n	80020e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e06b      	b.n	80021ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020e2:	4b39      	ldr	r3, [pc, #228]	; (80021c8 <HAL_RCC_ClockConfig+0x1c4>)
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	f023 0203 	bic.w	r2, r3, #3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	4936      	ldr	r1, [pc, #216]	; (80021c8 <HAL_RCC_ClockConfig+0x1c4>)
 80020f0:	4313      	orrs	r3, r2
 80020f2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020f4:	f7fe fcc6 	bl	8000a84 <HAL_GetTick>
 80020f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020fa:	e00a      	b.n	8002112 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020fc:	f7fe fcc2 	bl	8000a84 <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	f241 3288 	movw	r2, #5000	; 0x1388
 800210a:	4293      	cmp	r3, r2
 800210c:	d901      	bls.n	8002112 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e053      	b.n	80021ba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002112:	4b2d      	ldr	r3, [pc, #180]	; (80021c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f003 020c 	and.w	r2, r3, #12
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	429a      	cmp	r2, r3
 8002122:	d1eb      	bne.n	80020fc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002124:	4b27      	ldr	r3, [pc, #156]	; (80021c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0307 	and.w	r3, r3, #7
 800212c:	683a      	ldr	r2, [r7, #0]
 800212e:	429a      	cmp	r2, r3
 8002130:	d210      	bcs.n	8002154 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002132:	4b24      	ldr	r3, [pc, #144]	; (80021c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f023 0207 	bic.w	r2, r3, #7
 800213a:	4922      	ldr	r1, [pc, #136]	; (80021c4 <HAL_RCC_ClockConfig+0x1c0>)
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	4313      	orrs	r3, r2
 8002140:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002142:	4b20      	ldr	r3, [pc, #128]	; (80021c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0307 	and.w	r3, r3, #7
 800214a:	683a      	ldr	r2, [r7, #0]
 800214c:	429a      	cmp	r2, r3
 800214e:	d001      	beq.n	8002154 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	e032      	b.n	80021ba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0304 	and.w	r3, r3, #4
 800215c:	2b00      	cmp	r3, #0
 800215e:	d008      	beq.n	8002172 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002160:	4b19      	ldr	r3, [pc, #100]	; (80021c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	4916      	ldr	r1, [pc, #88]	; (80021c8 <HAL_RCC_ClockConfig+0x1c4>)
 800216e:	4313      	orrs	r3, r2
 8002170:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0308 	and.w	r3, r3, #8
 800217a:	2b00      	cmp	r3, #0
 800217c:	d009      	beq.n	8002192 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800217e:	4b12      	ldr	r3, [pc, #72]	; (80021c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	691b      	ldr	r3, [r3, #16]
 800218a:	00db      	lsls	r3, r3, #3
 800218c:	490e      	ldr	r1, [pc, #56]	; (80021c8 <HAL_RCC_ClockConfig+0x1c4>)
 800218e:	4313      	orrs	r3, r2
 8002190:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002192:	f000 f821 	bl	80021d8 <HAL_RCC_GetSysClockFreq>
 8002196:	4602      	mov	r2, r0
 8002198:	4b0b      	ldr	r3, [pc, #44]	; (80021c8 <HAL_RCC_ClockConfig+0x1c4>)
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	091b      	lsrs	r3, r3, #4
 800219e:	f003 030f 	and.w	r3, r3, #15
 80021a2:	490a      	ldr	r1, [pc, #40]	; (80021cc <HAL_RCC_ClockConfig+0x1c8>)
 80021a4:	5ccb      	ldrb	r3, [r1, r3]
 80021a6:	fa22 f303 	lsr.w	r3, r2, r3
 80021aa:	4a09      	ldr	r2, [pc, #36]	; (80021d0 <HAL_RCC_ClockConfig+0x1cc>)
 80021ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80021ae:	4b09      	ldr	r3, [pc, #36]	; (80021d4 <HAL_RCC_ClockConfig+0x1d0>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4618      	mov	r0, r3
 80021b4:	f7fe fc24 	bl	8000a00 <HAL_InitTick>

  return HAL_OK;
 80021b8:	2300      	movs	r3, #0
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3710      	adds	r7, #16
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	40022000 	.word	0x40022000
 80021c8:	40021000 	.word	0x40021000
 80021cc:	08004a8c 	.word	0x08004a8c
 80021d0:	20000018 	.word	0x20000018
 80021d4:	20000000 	.word	0x20000000

080021d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	b087      	sub	sp, #28
 80021dc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80021de:	2300      	movs	r3, #0
 80021e0:	60fb      	str	r3, [r7, #12]
 80021e2:	2300      	movs	r3, #0
 80021e4:	60bb      	str	r3, [r7, #8]
 80021e6:	2300      	movs	r3, #0
 80021e8:	617b      	str	r3, [r7, #20]
 80021ea:	2300      	movs	r3, #0
 80021ec:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80021ee:	2300      	movs	r3, #0
 80021f0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80021f2:	4b1e      	ldr	r3, [pc, #120]	; (800226c <HAL_RCC_GetSysClockFreq+0x94>)
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	f003 030c 	and.w	r3, r3, #12
 80021fe:	2b04      	cmp	r3, #4
 8002200:	d002      	beq.n	8002208 <HAL_RCC_GetSysClockFreq+0x30>
 8002202:	2b08      	cmp	r3, #8
 8002204:	d003      	beq.n	800220e <HAL_RCC_GetSysClockFreq+0x36>
 8002206:	e027      	b.n	8002258 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002208:	4b19      	ldr	r3, [pc, #100]	; (8002270 <HAL_RCC_GetSysClockFreq+0x98>)
 800220a:	613b      	str	r3, [r7, #16]
      break;
 800220c:	e027      	b.n	800225e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	0c9b      	lsrs	r3, r3, #18
 8002212:	f003 030f 	and.w	r3, r3, #15
 8002216:	4a17      	ldr	r2, [pc, #92]	; (8002274 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002218:	5cd3      	ldrb	r3, [r2, r3]
 800221a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d010      	beq.n	8002248 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002226:	4b11      	ldr	r3, [pc, #68]	; (800226c <HAL_RCC_GetSysClockFreq+0x94>)
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	0c5b      	lsrs	r3, r3, #17
 800222c:	f003 0301 	and.w	r3, r3, #1
 8002230:	4a11      	ldr	r2, [pc, #68]	; (8002278 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002232:	5cd3      	ldrb	r3, [r2, r3]
 8002234:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4a0d      	ldr	r2, [pc, #52]	; (8002270 <HAL_RCC_GetSysClockFreq+0x98>)
 800223a:	fb03 f202 	mul.w	r2, r3, r2
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	fbb2 f3f3 	udiv	r3, r2, r3
 8002244:	617b      	str	r3, [r7, #20]
 8002246:	e004      	b.n	8002252 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	4a0c      	ldr	r2, [pc, #48]	; (800227c <HAL_RCC_GetSysClockFreq+0xa4>)
 800224c:	fb02 f303 	mul.w	r3, r2, r3
 8002250:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	613b      	str	r3, [r7, #16]
      break;
 8002256:	e002      	b.n	800225e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002258:	4b05      	ldr	r3, [pc, #20]	; (8002270 <HAL_RCC_GetSysClockFreq+0x98>)
 800225a:	613b      	str	r3, [r7, #16]
      break;
 800225c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800225e:	693b      	ldr	r3, [r7, #16]
}
 8002260:	4618      	mov	r0, r3
 8002262:	371c      	adds	r7, #28
 8002264:	46bd      	mov	sp, r7
 8002266:	bc80      	pop	{r7}
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop
 800226c:	40021000 	.word	0x40021000
 8002270:	007a1200 	.word	0x007a1200
 8002274:	08004a78 	.word	0x08004a78
 8002278:	08004a88 	.word	0x08004a88
 800227c:	003d0900 	.word	0x003d0900

08002280 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002284:	4b02      	ldr	r3, [pc, #8]	; (8002290 <HAL_RCC_GetHCLKFreq+0x10>)
 8002286:	681b      	ldr	r3, [r3, #0]
}
 8002288:	4618      	mov	r0, r3
 800228a:	46bd      	mov	sp, r7
 800228c:	bc80      	pop	{r7}
 800228e:	4770      	bx	lr
 8002290:	20000018 	.word	0x20000018

08002294 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002298:	f7ff fff2 	bl	8002280 <HAL_RCC_GetHCLKFreq>
 800229c:	4602      	mov	r2, r0
 800229e:	4b05      	ldr	r3, [pc, #20]	; (80022b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	0a1b      	lsrs	r3, r3, #8
 80022a4:	f003 0307 	and.w	r3, r3, #7
 80022a8:	4903      	ldr	r1, [pc, #12]	; (80022b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80022aa:	5ccb      	ldrb	r3, [r1, r3]
 80022ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	40021000 	.word	0x40021000
 80022b8:	08004a9c 	.word	0x08004a9c

080022bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80022c0:	f7ff ffde 	bl	8002280 <HAL_RCC_GetHCLKFreq>
 80022c4:	4602      	mov	r2, r0
 80022c6:	4b05      	ldr	r3, [pc, #20]	; (80022dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	0adb      	lsrs	r3, r3, #11
 80022cc:	f003 0307 	and.w	r3, r3, #7
 80022d0:	4903      	ldr	r1, [pc, #12]	; (80022e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80022d2:	5ccb      	ldrb	r3, [r1, r3]
 80022d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022d8:	4618      	mov	r0, r3
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	40021000 	.word	0x40021000
 80022e0:	08004a9c 	.word	0x08004a9c

080022e4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b085      	sub	sp, #20
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80022ec:	4b0a      	ldr	r3, [pc, #40]	; (8002318 <RCC_Delay+0x34>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a0a      	ldr	r2, [pc, #40]	; (800231c <RCC_Delay+0x38>)
 80022f2:	fba2 2303 	umull	r2, r3, r2, r3
 80022f6:	0a5b      	lsrs	r3, r3, #9
 80022f8:	687a      	ldr	r2, [r7, #4]
 80022fa:	fb02 f303 	mul.w	r3, r2, r3
 80022fe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002300:	bf00      	nop
  }
  while (Delay --);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	1e5a      	subs	r2, r3, #1
 8002306:	60fa      	str	r2, [r7, #12]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d1f9      	bne.n	8002300 <RCC_Delay+0x1c>
}
 800230c:	bf00      	nop
 800230e:	bf00      	nop
 8002310:	3714      	adds	r7, #20
 8002312:	46bd      	mov	sp, r7
 8002314:	bc80      	pop	{r7}
 8002316:	4770      	bx	lr
 8002318:	20000018 	.word	0x20000018
 800231c:	10624dd3 	.word	0x10624dd3

08002320 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d101      	bne.n	8002332 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e041      	b.n	80023b6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002338:	b2db      	uxtb	r3, r3
 800233a:	2b00      	cmp	r3, #0
 800233c:	d106      	bne.n	800234c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2200      	movs	r2, #0
 8002342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f001 fdc0 	bl	8003ecc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2202      	movs	r2, #2
 8002350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	3304      	adds	r3, #4
 800235c:	4619      	mov	r1, r3
 800235e:	4610      	mov	r0, r2
 8002360:	f000 f940 	bl	80025e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2201      	movs	r2, #1
 8002368:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2201      	movs	r2, #1
 8002370:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2201      	movs	r2, #1
 8002378:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2201      	movs	r2, #1
 8002380:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2201      	movs	r2, #1
 8002388:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2201      	movs	r2, #1
 8002390:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2201      	movs	r2, #1
 8002398:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2201      	movs	r2, #1
 80023a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2201      	movs	r2, #1
 80023a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2201      	movs	r2, #1
 80023b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80023b4:	2300      	movs	r3, #0
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3708      	adds	r7, #8
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
	...

080023c0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b085      	sub	sp, #20
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d001      	beq.n	80023d8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e032      	b.n	800243e <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2202      	movs	r2, #2
 80023dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a18      	ldr	r2, [pc, #96]	; (8002448 <HAL_TIM_Base_Start+0x88>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d00e      	beq.n	8002408 <HAL_TIM_Base_Start+0x48>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023f2:	d009      	beq.n	8002408 <HAL_TIM_Base_Start+0x48>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a14      	ldr	r2, [pc, #80]	; (800244c <HAL_TIM_Base_Start+0x8c>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d004      	beq.n	8002408 <HAL_TIM_Base_Start+0x48>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a13      	ldr	r2, [pc, #76]	; (8002450 <HAL_TIM_Base_Start+0x90>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d111      	bne.n	800242c <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	f003 0307 	and.w	r3, r3, #7
 8002412:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2b06      	cmp	r3, #6
 8002418:	d010      	beq.n	800243c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f042 0201 	orr.w	r2, r2, #1
 8002428:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800242a:	e007      	b.n	800243c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f042 0201 	orr.w	r2, r2, #1
 800243a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800243c:	2300      	movs	r3, #0
}
 800243e:	4618      	mov	r0, r3
 8002440:	3714      	adds	r7, #20
 8002442:	46bd      	mov	sp, r7
 8002444:	bc80      	pop	{r7}
 8002446:	4770      	bx	lr
 8002448:	40012c00 	.word	0x40012c00
 800244c:	40000400 	.word	0x40000400
 8002450:	40000800 	.word	0x40000800

08002454 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b084      	sub	sp, #16
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800245e:	2300      	movs	r3, #0
 8002460:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002468:	2b01      	cmp	r3, #1
 800246a:	d101      	bne.n	8002470 <HAL_TIM_ConfigClockSource+0x1c>
 800246c:	2302      	movs	r3, #2
 800246e:	e0b4      	b.n	80025da <HAL_TIM_ConfigClockSource+0x186>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2201      	movs	r2, #1
 8002474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2202      	movs	r2, #2
 800247c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800248e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002496:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	68ba      	ldr	r2, [r7, #8]
 800249e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024a8:	d03e      	beq.n	8002528 <HAL_TIM_ConfigClockSource+0xd4>
 80024aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024ae:	f200 8087 	bhi.w	80025c0 <HAL_TIM_ConfigClockSource+0x16c>
 80024b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024b6:	f000 8086 	beq.w	80025c6 <HAL_TIM_ConfigClockSource+0x172>
 80024ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024be:	d87f      	bhi.n	80025c0 <HAL_TIM_ConfigClockSource+0x16c>
 80024c0:	2b70      	cmp	r3, #112	; 0x70
 80024c2:	d01a      	beq.n	80024fa <HAL_TIM_ConfigClockSource+0xa6>
 80024c4:	2b70      	cmp	r3, #112	; 0x70
 80024c6:	d87b      	bhi.n	80025c0 <HAL_TIM_ConfigClockSource+0x16c>
 80024c8:	2b60      	cmp	r3, #96	; 0x60
 80024ca:	d050      	beq.n	800256e <HAL_TIM_ConfigClockSource+0x11a>
 80024cc:	2b60      	cmp	r3, #96	; 0x60
 80024ce:	d877      	bhi.n	80025c0 <HAL_TIM_ConfigClockSource+0x16c>
 80024d0:	2b50      	cmp	r3, #80	; 0x50
 80024d2:	d03c      	beq.n	800254e <HAL_TIM_ConfigClockSource+0xfa>
 80024d4:	2b50      	cmp	r3, #80	; 0x50
 80024d6:	d873      	bhi.n	80025c0 <HAL_TIM_ConfigClockSource+0x16c>
 80024d8:	2b40      	cmp	r3, #64	; 0x40
 80024da:	d058      	beq.n	800258e <HAL_TIM_ConfigClockSource+0x13a>
 80024dc:	2b40      	cmp	r3, #64	; 0x40
 80024de:	d86f      	bhi.n	80025c0 <HAL_TIM_ConfigClockSource+0x16c>
 80024e0:	2b30      	cmp	r3, #48	; 0x30
 80024e2:	d064      	beq.n	80025ae <HAL_TIM_ConfigClockSource+0x15a>
 80024e4:	2b30      	cmp	r3, #48	; 0x30
 80024e6:	d86b      	bhi.n	80025c0 <HAL_TIM_ConfigClockSource+0x16c>
 80024e8:	2b20      	cmp	r3, #32
 80024ea:	d060      	beq.n	80025ae <HAL_TIM_ConfigClockSource+0x15a>
 80024ec:	2b20      	cmp	r3, #32
 80024ee:	d867      	bhi.n	80025c0 <HAL_TIM_ConfigClockSource+0x16c>
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d05c      	beq.n	80025ae <HAL_TIM_ConfigClockSource+0x15a>
 80024f4:	2b10      	cmp	r3, #16
 80024f6:	d05a      	beq.n	80025ae <HAL_TIM_ConfigClockSource+0x15a>
 80024f8:	e062      	b.n	80025c0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6818      	ldr	r0, [r3, #0]
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	6899      	ldr	r1, [r3, #8]
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	685a      	ldr	r2, [r3, #4]
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	68db      	ldr	r3, [r3, #12]
 800250a:	f000 f944 	bl	8002796 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800251c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	68ba      	ldr	r2, [r7, #8]
 8002524:	609a      	str	r2, [r3, #8]
      break;
 8002526:	e04f      	b.n	80025c8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6818      	ldr	r0, [r3, #0]
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	6899      	ldr	r1, [r3, #8]
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	685a      	ldr	r2, [r3, #4]
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	f000 f92d 	bl	8002796 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	689a      	ldr	r2, [r3, #8]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800254a:	609a      	str	r2, [r3, #8]
      break;
 800254c:	e03c      	b.n	80025c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6818      	ldr	r0, [r3, #0]
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	6859      	ldr	r1, [r3, #4]
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	68db      	ldr	r3, [r3, #12]
 800255a:	461a      	mov	r2, r3
 800255c:	f000 f8a4 	bl	80026a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	2150      	movs	r1, #80	; 0x50
 8002566:	4618      	mov	r0, r3
 8002568:	f000 f8fb 	bl	8002762 <TIM_ITRx_SetConfig>
      break;
 800256c:	e02c      	b.n	80025c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6818      	ldr	r0, [r3, #0]
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	6859      	ldr	r1, [r3, #4]
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	68db      	ldr	r3, [r3, #12]
 800257a:	461a      	mov	r2, r3
 800257c:	f000 f8c2 	bl	8002704 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	2160      	movs	r1, #96	; 0x60
 8002586:	4618      	mov	r0, r3
 8002588:	f000 f8eb 	bl	8002762 <TIM_ITRx_SetConfig>
      break;
 800258c:	e01c      	b.n	80025c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6818      	ldr	r0, [r3, #0]
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	6859      	ldr	r1, [r3, #4]
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	461a      	mov	r2, r3
 800259c:	f000 f884 	bl	80026a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	2140      	movs	r1, #64	; 0x40
 80025a6:	4618      	mov	r0, r3
 80025a8:	f000 f8db 	bl	8002762 <TIM_ITRx_SetConfig>
      break;
 80025ac:	e00c      	b.n	80025c8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4619      	mov	r1, r3
 80025b8:	4610      	mov	r0, r2
 80025ba:	f000 f8d2 	bl	8002762 <TIM_ITRx_SetConfig>
      break;
 80025be:	e003      	b.n	80025c8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	73fb      	strb	r3, [r7, #15]
      break;
 80025c4:	e000      	b.n	80025c8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80025c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2201      	movs	r2, #1
 80025cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2200      	movs	r2, #0
 80025d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80025d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3710      	adds	r7, #16
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
	...

080025e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b085      	sub	sp, #20
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	4a29      	ldr	r2, [pc, #164]	; (800269c <TIM_Base_SetConfig+0xb8>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d00b      	beq.n	8002614 <TIM_Base_SetConfig+0x30>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002602:	d007      	beq.n	8002614 <TIM_Base_SetConfig+0x30>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	4a26      	ldr	r2, [pc, #152]	; (80026a0 <TIM_Base_SetConfig+0xbc>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d003      	beq.n	8002614 <TIM_Base_SetConfig+0x30>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	4a25      	ldr	r2, [pc, #148]	; (80026a4 <TIM_Base_SetConfig+0xc0>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d108      	bne.n	8002626 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800261a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	68fa      	ldr	r2, [r7, #12]
 8002622:	4313      	orrs	r3, r2
 8002624:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a1c      	ldr	r2, [pc, #112]	; (800269c <TIM_Base_SetConfig+0xb8>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d00b      	beq.n	8002646 <TIM_Base_SetConfig+0x62>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002634:	d007      	beq.n	8002646 <TIM_Base_SetConfig+0x62>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4a19      	ldr	r2, [pc, #100]	; (80026a0 <TIM_Base_SetConfig+0xbc>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d003      	beq.n	8002646 <TIM_Base_SetConfig+0x62>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4a18      	ldr	r2, [pc, #96]	; (80026a4 <TIM_Base_SetConfig+0xc0>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d108      	bne.n	8002658 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800264c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	68db      	ldr	r3, [r3, #12]
 8002652:	68fa      	ldr	r2, [r7, #12]
 8002654:	4313      	orrs	r3, r2
 8002656:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	695b      	ldr	r3, [r3, #20]
 8002662:	4313      	orrs	r3, r2
 8002664:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	68fa      	ldr	r2, [r7, #12]
 800266a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	689a      	ldr	r2, [r3, #8]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	4a07      	ldr	r2, [pc, #28]	; (800269c <TIM_Base_SetConfig+0xb8>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d103      	bne.n	800268c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	691a      	ldr	r2, [r3, #16]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2201      	movs	r2, #1
 8002690:	615a      	str	r2, [r3, #20]
}
 8002692:	bf00      	nop
 8002694:	3714      	adds	r7, #20
 8002696:	46bd      	mov	sp, r7
 8002698:	bc80      	pop	{r7}
 800269a:	4770      	bx	lr
 800269c:	40012c00 	.word	0x40012c00
 80026a0:	40000400 	.word	0x40000400
 80026a4:	40000800 	.word	0x40000800

080026a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b087      	sub	sp, #28
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	60f8      	str	r0, [r7, #12]
 80026b0:	60b9      	str	r1, [r7, #8]
 80026b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	6a1b      	ldr	r3, [r3, #32]
 80026b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	6a1b      	ldr	r3, [r3, #32]
 80026be:	f023 0201 	bic.w	r2, r3, #1
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	699b      	ldr	r3, [r3, #24]
 80026ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80026d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	011b      	lsls	r3, r3, #4
 80026d8:	693a      	ldr	r2, [r7, #16]
 80026da:	4313      	orrs	r3, r2
 80026dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	f023 030a 	bic.w	r3, r3, #10
 80026e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80026e6:	697a      	ldr	r2, [r7, #20]
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	693a      	ldr	r2, [r7, #16]
 80026f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	697a      	ldr	r2, [r7, #20]
 80026f8:	621a      	str	r2, [r3, #32]
}
 80026fa:	bf00      	nop
 80026fc:	371c      	adds	r7, #28
 80026fe:	46bd      	mov	sp, r7
 8002700:	bc80      	pop	{r7}
 8002702:	4770      	bx	lr

08002704 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002704:	b480      	push	{r7}
 8002706:	b087      	sub	sp, #28
 8002708:	af00      	add	r7, sp, #0
 800270a:	60f8      	str	r0, [r7, #12]
 800270c:	60b9      	str	r1, [r7, #8]
 800270e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	6a1b      	ldr	r3, [r3, #32]
 8002714:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	6a1b      	ldr	r3, [r3, #32]
 800271a:	f023 0210 	bic.w	r2, r3, #16
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	699b      	ldr	r3, [r3, #24]
 8002726:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800272e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	031b      	lsls	r3, r3, #12
 8002734:	693a      	ldr	r2, [r7, #16]
 8002736:	4313      	orrs	r3, r2
 8002738:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002740:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	011b      	lsls	r3, r3, #4
 8002746:	697a      	ldr	r2, [r7, #20]
 8002748:	4313      	orrs	r3, r2
 800274a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	693a      	ldr	r2, [r7, #16]
 8002750:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	697a      	ldr	r2, [r7, #20]
 8002756:	621a      	str	r2, [r3, #32]
}
 8002758:	bf00      	nop
 800275a:	371c      	adds	r7, #28
 800275c:	46bd      	mov	sp, r7
 800275e:	bc80      	pop	{r7}
 8002760:	4770      	bx	lr

08002762 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002762:	b480      	push	{r7}
 8002764:	b085      	sub	sp, #20
 8002766:	af00      	add	r7, sp, #0
 8002768:	6078      	str	r0, [r7, #4]
 800276a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002778:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800277a:	683a      	ldr	r2, [r7, #0]
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	4313      	orrs	r3, r2
 8002780:	f043 0307 	orr.w	r3, r3, #7
 8002784:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	68fa      	ldr	r2, [r7, #12]
 800278a:	609a      	str	r2, [r3, #8]
}
 800278c:	bf00      	nop
 800278e:	3714      	adds	r7, #20
 8002790:	46bd      	mov	sp, r7
 8002792:	bc80      	pop	{r7}
 8002794:	4770      	bx	lr

08002796 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002796:	b480      	push	{r7}
 8002798:	b087      	sub	sp, #28
 800279a:	af00      	add	r7, sp, #0
 800279c:	60f8      	str	r0, [r7, #12]
 800279e:	60b9      	str	r1, [r7, #8]
 80027a0:	607a      	str	r2, [r7, #4]
 80027a2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80027b0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	021a      	lsls	r2, r3, #8
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	431a      	orrs	r2, r3
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	4313      	orrs	r3, r2
 80027be:	697a      	ldr	r2, [r7, #20]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	697a      	ldr	r2, [r7, #20]
 80027c8:	609a      	str	r2, [r3, #8]
}
 80027ca:	bf00      	nop
 80027cc:	371c      	adds	r7, #28
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bc80      	pop	{r7}
 80027d2:	4770      	bx	lr

080027d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b085      	sub	sp, #20
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d101      	bne.n	80027ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80027e8:	2302      	movs	r3, #2
 80027ea:	e046      	b.n	800287a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2201      	movs	r2, #1
 80027f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2202      	movs	r2, #2
 80027f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002812:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	68fa      	ldr	r2, [r7, #12]
 800281a:	4313      	orrs	r3, r2
 800281c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	68fa      	ldr	r2, [r7, #12]
 8002824:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a16      	ldr	r2, [pc, #88]	; (8002884 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d00e      	beq.n	800284e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002838:	d009      	beq.n	800284e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a12      	ldr	r2, [pc, #72]	; (8002888 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d004      	beq.n	800284e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a10      	ldr	r2, [pc, #64]	; (800288c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d10c      	bne.n	8002868 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002854:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	68ba      	ldr	r2, [r7, #8]
 800285c:	4313      	orrs	r3, r2
 800285e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	68ba      	ldr	r2, [r7, #8]
 8002866:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2201      	movs	r2, #1
 800286c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2200      	movs	r2, #0
 8002874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002878:	2300      	movs	r3, #0
}
 800287a:	4618      	mov	r0, r3
 800287c:	3714      	adds	r7, #20
 800287e:	46bd      	mov	sp, r7
 8002880:	bc80      	pop	{r7}
 8002882:	4770      	bx	lr
 8002884:	40012c00 	.word	0x40012c00
 8002888:	40000400 	.word	0x40000400
 800288c:	40000800 	.word	0x40000800

08002890 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d101      	bne.n	80028a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e042      	b.n	8002928 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d106      	bne.n	80028bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2200      	movs	r2, #0
 80028b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f001 fb3a 	bl	8003f30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2224      	movs	r2, #36	; 0x24
 80028c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	68da      	ldr	r2, [r3, #12]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80028d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	f000 fc7f 	bl	80031d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	691a      	ldr	r2, [r3, #16]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80028e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	695a      	ldr	r2, [r3, #20]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80028f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	68da      	ldr	r2, [r3, #12]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002908:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2220      	movs	r2, #32
 8002914:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2220      	movs	r2, #32
 800291c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2200      	movs	r2, #0
 8002924:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002926:	2300      	movs	r3, #0
}
 8002928:	4618      	mov	r0, r3
 800292a:	3708      	adds	r7, #8
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}

08002930 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b0ba      	sub	sp, #232	; 0xe8
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	695b      	ldr	r3, [r3, #20]
 8002952:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002956:	2300      	movs	r3, #0
 8002958:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800295c:	2300      	movs	r3, #0
 800295e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002962:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002966:	f003 030f 	and.w	r3, r3, #15
 800296a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800296e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002972:	2b00      	cmp	r3, #0
 8002974:	d10f      	bne.n	8002996 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002976:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800297a:	f003 0320 	and.w	r3, r3, #32
 800297e:	2b00      	cmp	r3, #0
 8002980:	d009      	beq.n	8002996 <HAL_UART_IRQHandler+0x66>
 8002982:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002986:	f003 0320 	and.w	r3, r3, #32
 800298a:	2b00      	cmp	r3, #0
 800298c:	d003      	beq.n	8002996 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f000 fb63 	bl	800305a <UART_Receive_IT>
      return;
 8002994:	e25b      	b.n	8002e4e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002996:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800299a:	2b00      	cmp	r3, #0
 800299c:	f000 80de 	beq.w	8002b5c <HAL_UART_IRQHandler+0x22c>
 80029a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80029a4:	f003 0301 	and.w	r3, r3, #1
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d106      	bne.n	80029ba <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80029ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029b0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	f000 80d1 	beq.w	8002b5c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80029ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029be:	f003 0301 	and.w	r3, r3, #1
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d00b      	beq.n	80029de <HAL_UART_IRQHandler+0xae>
 80029c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d005      	beq.n	80029de <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029d6:	f043 0201 	orr.w	r2, r3, #1
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80029de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029e2:	f003 0304 	and.w	r3, r3, #4
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d00b      	beq.n	8002a02 <HAL_UART_IRQHandler+0xd2>
 80029ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80029ee:	f003 0301 	and.w	r3, r3, #1
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d005      	beq.n	8002a02 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029fa:	f043 0202 	orr.w	r2, r3, #2
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a06:	f003 0302 	and.w	r3, r3, #2
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d00b      	beq.n	8002a26 <HAL_UART_IRQHandler+0xf6>
 8002a0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a12:	f003 0301 	and.w	r3, r3, #1
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d005      	beq.n	8002a26 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a1e:	f043 0204 	orr.w	r2, r3, #4
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002a26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a2a:	f003 0308 	and.w	r3, r3, #8
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d011      	beq.n	8002a56 <HAL_UART_IRQHandler+0x126>
 8002a32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a36:	f003 0320 	and.w	r3, r3, #32
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d105      	bne.n	8002a4a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002a3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a42:	f003 0301 	and.w	r3, r3, #1
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d005      	beq.n	8002a56 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a4e:	f043 0208 	orr.w	r2, r3, #8
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	f000 81f2 	beq.w	8002e44 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002a60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a64:	f003 0320 	and.w	r3, r3, #32
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d008      	beq.n	8002a7e <HAL_UART_IRQHandler+0x14e>
 8002a6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a70:	f003 0320 	and.w	r3, r3, #32
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d002      	beq.n	8002a7e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	f000 faee 	bl	800305a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	695b      	ldr	r3, [r3, #20]
 8002a84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	bf14      	ite	ne
 8002a8c:	2301      	movne	r3, #1
 8002a8e:	2300      	moveq	r3, #0
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a9a:	f003 0308 	and.w	r3, r3, #8
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d103      	bne.n	8002aaa <HAL_UART_IRQHandler+0x17a>
 8002aa2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d04f      	beq.n	8002b4a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f000 f9f8 	bl	8002ea0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	695b      	ldr	r3, [r3, #20]
 8002ab6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d041      	beq.n	8002b42 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	3314      	adds	r3, #20
 8002ac4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ac8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002acc:	e853 3f00 	ldrex	r3, [r3]
 8002ad0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002ad4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002ad8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002adc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	3314      	adds	r3, #20
 8002ae6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002aea:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002aee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002af2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002af6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002afa:	e841 2300 	strex	r3, r2, [r1]
 8002afe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002b02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d1d9      	bne.n	8002abe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d013      	beq.n	8002b3a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b16:	4a7e      	ldr	r2, [pc, #504]	; (8002d10 <HAL_UART_IRQHandler+0x3e0>)
 8002b18:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f7fe f926 	bl	8000d70 <HAL_DMA_Abort_IT>
 8002b24:	4603      	mov	r3, r0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d016      	beq.n	8002b58 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b30:	687a      	ldr	r2, [r7, #4]
 8002b32:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002b34:	4610      	mov	r0, r2
 8002b36:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b38:	e00e      	b.n	8002b58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f000 f99c 	bl	8002e78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b40:	e00a      	b.n	8002b58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f000 f998 	bl	8002e78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b48:	e006      	b.n	8002b58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f000 f994 	bl	8002e78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2200      	movs	r2, #0
 8002b54:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8002b56:	e175      	b.n	8002e44 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b58:	bf00      	nop
    return;
 8002b5a:	e173      	b.n	8002e44 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	f040 814f 	bne.w	8002e04 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002b66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b6a:	f003 0310 	and.w	r3, r3, #16
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	f000 8148 	beq.w	8002e04 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002b74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b78:	f003 0310 	and.w	r3, r3, #16
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	f000 8141 	beq.w	8002e04 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002b82:	2300      	movs	r3, #0
 8002b84:	60bb      	str	r3, [r7, #8]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	60bb      	str	r3, [r7, #8]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	60bb      	str	r3, [r7, #8]
 8002b96:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	695b      	ldr	r3, [r3, #20]
 8002b9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	f000 80b6 	beq.w	8002d14 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002bb4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	f000 8145 	beq.w	8002e48 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002bc2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	f080 813e 	bcs.w	8002e48 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002bd2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bd8:	699b      	ldr	r3, [r3, #24]
 8002bda:	2b20      	cmp	r3, #32
 8002bdc:	f000 8088 	beq.w	8002cf0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	330c      	adds	r3, #12
 8002be6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002bee:	e853 3f00 	ldrex	r3, [r3]
 8002bf2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002bf6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002bfa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002bfe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	330c      	adds	r3, #12
 8002c08:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002c0c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002c10:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c14:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002c18:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002c1c:	e841 2300 	strex	r3, r2, [r1]
 8002c20:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002c24:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d1d9      	bne.n	8002be0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	3314      	adds	r3, #20
 8002c32:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c36:	e853 3f00 	ldrex	r3, [r3]
 8002c3a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002c3c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c3e:	f023 0301 	bic.w	r3, r3, #1
 8002c42:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	3314      	adds	r3, #20
 8002c4c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002c50:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002c54:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c56:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002c58:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002c5c:	e841 2300 	strex	r3, r2, [r1]
 8002c60:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002c62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d1e1      	bne.n	8002c2c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	3314      	adds	r3, #20
 8002c6e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c70:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c72:	e853 3f00 	ldrex	r3, [r3]
 8002c76:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002c78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c7e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	3314      	adds	r3, #20
 8002c88:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002c8c:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002c8e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c90:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002c92:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002c94:	e841 2300 	strex	r3, r2, [r1]
 8002c98:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002c9a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d1e3      	bne.n	8002c68 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2220      	movs	r2, #32
 8002ca4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2200      	movs	r2, #0
 8002cac:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	330c      	adds	r3, #12
 8002cb4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cb8:	e853 3f00 	ldrex	r3, [r3]
 8002cbc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002cbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cc0:	f023 0310 	bic.w	r3, r3, #16
 8002cc4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	330c      	adds	r3, #12
 8002cce:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002cd2:	65ba      	str	r2, [r7, #88]	; 0x58
 8002cd4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cd6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002cd8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002cda:	e841 2300 	strex	r3, r2, [r1]
 8002cde:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002ce0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d1e3      	bne.n	8002cae <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cea:	4618      	mov	r0, r3
 8002cec:	f7fe f805 	bl	8000cfa <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2202      	movs	r2, #2
 8002cf4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	b29b      	uxth	r3, r3
 8002d04:	4619      	mov	r1, r3
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f000 f8bf 	bl	8002e8a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002d0c:	e09c      	b.n	8002e48 <HAL_UART_IRQHandler+0x518>
 8002d0e:	bf00      	nop
 8002d10:	08002f65 	.word	0x08002f65
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d1c:	b29b      	uxth	r3, r3
 8002d1e:	1ad3      	subs	r3, r2, r3
 8002d20:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	f000 808e 	beq.w	8002e4c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002d30:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	f000 8089 	beq.w	8002e4c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	330c      	adds	r3, #12
 8002d40:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d44:	e853 3f00 	ldrex	r3, [r3]
 8002d48:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002d4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d4c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002d50:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	330c      	adds	r3, #12
 8002d5a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002d5e:	647a      	str	r2, [r7, #68]	; 0x44
 8002d60:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d62:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002d64:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002d66:	e841 2300 	strex	r3, r2, [r1]
 8002d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002d6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d1e3      	bne.n	8002d3a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	3314      	adds	r3, #20
 8002d78:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7c:	e853 3f00 	ldrex	r3, [r3]
 8002d80:	623b      	str	r3, [r7, #32]
   return(result);
 8002d82:	6a3b      	ldr	r3, [r7, #32]
 8002d84:	f023 0301 	bic.w	r3, r3, #1
 8002d88:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	3314      	adds	r3, #20
 8002d92:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002d96:	633a      	str	r2, [r7, #48]	; 0x30
 8002d98:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d9a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002d9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d9e:	e841 2300 	strex	r3, r2, [r1]
 8002da2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d1e3      	bne.n	8002d72 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2220      	movs	r2, #32
 8002dae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2200      	movs	r2, #0
 8002db6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	330c      	adds	r3, #12
 8002dbe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	e853 3f00 	ldrex	r3, [r3]
 8002dc6:	60fb      	str	r3, [r7, #12]
   return(result);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	f023 0310 	bic.w	r3, r3, #16
 8002dce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	330c      	adds	r3, #12
 8002dd8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002ddc:	61fa      	str	r2, [r7, #28]
 8002dde:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002de0:	69b9      	ldr	r1, [r7, #24]
 8002de2:	69fa      	ldr	r2, [r7, #28]
 8002de4:	e841 2300 	strex	r3, r2, [r1]
 8002de8:	617b      	str	r3, [r7, #20]
   return(result);
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d1e3      	bne.n	8002db8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2202      	movs	r2, #2
 8002df4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002df6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	6878      	ldr	r0, [r7, #4]
 8002dfe:	f000 f844 	bl	8002e8a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002e02:	e023      	b.n	8002e4c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002e04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d009      	beq.n	8002e24 <HAL_UART_IRQHandler+0x4f4>
 8002e10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d003      	beq.n	8002e24 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002e1c:	6878      	ldr	r0, [r7, #4]
 8002e1e:	f000 f8b5 	bl	8002f8c <UART_Transmit_IT>
    return;
 8002e22:	e014      	b.n	8002e4e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002e24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d00e      	beq.n	8002e4e <HAL_UART_IRQHandler+0x51e>
 8002e30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d008      	beq.n	8002e4e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	f000 f8f4 	bl	800302a <UART_EndTransmit_IT>
    return;
 8002e42:	e004      	b.n	8002e4e <HAL_UART_IRQHandler+0x51e>
    return;
 8002e44:	bf00      	nop
 8002e46:	e002      	b.n	8002e4e <HAL_UART_IRQHandler+0x51e>
      return;
 8002e48:	bf00      	nop
 8002e4a:	e000      	b.n	8002e4e <HAL_UART_IRQHandler+0x51e>
      return;
 8002e4c:	bf00      	nop
  }
}
 8002e4e:	37e8      	adds	r7, #232	; 0xe8
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}

08002e54 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b083      	sub	sp, #12
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002e5c:	bf00      	nop
 8002e5e:	370c      	adds	r7, #12
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bc80      	pop	{r7}
 8002e64:	4770      	bx	lr

08002e66 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e66:	b480      	push	{r7}
 8002e68:	b083      	sub	sp, #12
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002e6e:	bf00      	nop
 8002e70:	370c      	adds	r7, #12
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bc80      	pop	{r7}
 8002e76:	4770      	bx	lr

08002e78 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002e80:	bf00      	nop
 8002e82:	370c      	adds	r7, #12
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bc80      	pop	{r7}
 8002e88:	4770      	bx	lr

08002e8a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002e8a:	b480      	push	{r7}
 8002e8c:	b083      	sub	sp, #12
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	6078      	str	r0, [r7, #4]
 8002e92:	460b      	mov	r3, r1
 8002e94:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002e96:	bf00      	nop
 8002e98:	370c      	adds	r7, #12
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bc80      	pop	{r7}
 8002e9e:	4770      	bx	lr

08002ea0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b095      	sub	sp, #84	; 0x54
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	330c      	adds	r3, #12
 8002eae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eb2:	e853 3f00 	ldrex	r3, [r3]
 8002eb6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002ebe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	330c      	adds	r3, #12
 8002ec6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002ec8:	643a      	str	r2, [r7, #64]	; 0x40
 8002eca:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ecc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002ece:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002ed0:	e841 2300 	strex	r3, r2, [r1]
 8002ed4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d1e5      	bne.n	8002ea8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	3314      	adds	r3, #20
 8002ee2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ee4:	6a3b      	ldr	r3, [r7, #32]
 8002ee6:	e853 3f00 	ldrex	r3, [r3]
 8002eea:	61fb      	str	r3, [r7, #28]
   return(result);
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	f023 0301 	bic.w	r3, r3, #1
 8002ef2:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	3314      	adds	r3, #20
 8002efa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002efc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002efe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f04:	e841 2300 	strex	r3, r2, [r1]
 8002f08:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d1e5      	bne.n	8002edc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d119      	bne.n	8002f4c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	330c      	adds	r3, #12
 8002f1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	e853 3f00 	ldrex	r3, [r3]
 8002f26:	60bb      	str	r3, [r7, #8]
   return(result);
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	f023 0310 	bic.w	r3, r3, #16
 8002f2e:	647b      	str	r3, [r7, #68]	; 0x44
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	330c      	adds	r3, #12
 8002f36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002f38:	61ba      	str	r2, [r7, #24]
 8002f3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f3c:	6979      	ldr	r1, [r7, #20]
 8002f3e:	69ba      	ldr	r2, [r7, #24]
 8002f40:	e841 2300 	strex	r3, r2, [r1]
 8002f44:	613b      	str	r3, [r7, #16]
   return(result);
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d1e5      	bne.n	8002f18 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2220      	movs	r2, #32
 8002f50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2200      	movs	r2, #0
 8002f58:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002f5a:	bf00      	nop
 8002f5c:	3754      	adds	r7, #84	; 0x54
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bc80      	pop	{r7}
 8002f62:	4770      	bx	lr

08002f64 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b084      	sub	sp, #16
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f70:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2200      	movs	r2, #0
 8002f76:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002f7e:	68f8      	ldr	r0, [r7, #12]
 8002f80:	f7ff ff7a 	bl	8002e78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002f84:	bf00      	nop
 8002f86:	3710      	adds	r7, #16
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}

08002f8c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b085      	sub	sp, #20
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	2b21      	cmp	r3, #33	; 0x21
 8002f9e:	d13e      	bne.n	800301e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fa8:	d114      	bne.n	8002fd4 <UART_Transmit_IT+0x48>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	691b      	ldr	r3, [r3, #16]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d110      	bne.n	8002fd4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6a1b      	ldr	r3, [r3, #32]
 8002fb6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	881b      	ldrh	r3, [r3, #0]
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002fc6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6a1b      	ldr	r3, [r3, #32]
 8002fcc:	1c9a      	adds	r2, r3, #2
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	621a      	str	r2, [r3, #32]
 8002fd2:	e008      	b.n	8002fe6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6a1b      	ldr	r3, [r3, #32]
 8002fd8:	1c59      	adds	r1, r3, #1
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	6211      	str	r1, [r2, #32]
 8002fde:	781a      	ldrb	r2, [r3, #0]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002fea:	b29b      	uxth	r3, r3
 8002fec:	3b01      	subs	r3, #1
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	687a      	ldr	r2, [r7, #4]
 8002ff2:	4619      	mov	r1, r3
 8002ff4:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d10f      	bne.n	800301a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	68da      	ldr	r2, [r3, #12]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003008:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	68da      	ldr	r2, [r3, #12]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003018:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800301a:	2300      	movs	r3, #0
 800301c:	e000      	b.n	8003020 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800301e:	2302      	movs	r3, #2
  }
}
 8003020:	4618      	mov	r0, r3
 8003022:	3714      	adds	r7, #20
 8003024:	46bd      	mov	sp, r7
 8003026:	bc80      	pop	{r7}
 8003028:	4770      	bx	lr

0800302a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800302a:	b580      	push	{r7, lr}
 800302c:	b082      	sub	sp, #8
 800302e:	af00      	add	r7, sp, #0
 8003030:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	68da      	ldr	r2, [r3, #12]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003040:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2220      	movs	r2, #32
 8003046:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f7ff ff02 	bl	8002e54 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003050:	2300      	movs	r3, #0
}
 8003052:	4618      	mov	r0, r3
 8003054:	3708      	adds	r7, #8
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}

0800305a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800305a:	b580      	push	{r7, lr}
 800305c:	b08c      	sub	sp, #48	; 0x30
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003068:	b2db      	uxtb	r3, r3
 800306a:	2b22      	cmp	r3, #34	; 0x22
 800306c:	f040 80ae 	bne.w	80031cc <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003078:	d117      	bne.n	80030aa <UART_Receive_IT+0x50>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	691b      	ldr	r3, [r3, #16]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d113      	bne.n	80030aa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003082:	2300      	movs	r3, #0
 8003084:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800308a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	b29b      	uxth	r3, r3
 8003094:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003098:	b29a      	uxth	r2, r3
 800309a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800309c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030a2:	1c9a      	adds	r2, r3, #2
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	629a      	str	r2, [r3, #40]	; 0x28
 80030a8:	e026      	b.n	80030f8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ae:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80030b0:	2300      	movs	r3, #0
 80030b2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030bc:	d007      	beq.n	80030ce <UART_Receive_IT+0x74>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d10a      	bne.n	80030dc <UART_Receive_IT+0x82>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	691b      	ldr	r3, [r3, #16]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d106      	bne.n	80030dc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	b2da      	uxtb	r2, r3
 80030d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030d8:	701a      	strb	r2, [r3, #0]
 80030da:	e008      	b.n	80030ee <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80030e8:	b2da      	uxtb	r2, r3
 80030ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030ec:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030f2:	1c5a      	adds	r2, r3, #1
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80030fc:	b29b      	uxth	r3, r3
 80030fe:	3b01      	subs	r3, #1
 8003100:	b29b      	uxth	r3, r3
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	4619      	mov	r1, r3
 8003106:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003108:	2b00      	cmp	r3, #0
 800310a:	d15d      	bne.n	80031c8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	68da      	ldr	r2, [r3, #12]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f022 0220 	bic.w	r2, r2, #32
 800311a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	68da      	ldr	r2, [r3, #12]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800312a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	695a      	ldr	r2, [r3, #20]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f022 0201 	bic.w	r2, r2, #1
 800313a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2220      	movs	r2, #32
 8003140:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2200      	movs	r2, #0
 8003148:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800314e:	2b01      	cmp	r3, #1
 8003150:	d135      	bne.n	80031be <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2200      	movs	r2, #0
 8003156:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	330c      	adds	r3, #12
 800315e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	e853 3f00 	ldrex	r3, [r3]
 8003166:	613b      	str	r3, [r7, #16]
   return(result);
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	f023 0310 	bic.w	r3, r3, #16
 800316e:	627b      	str	r3, [r7, #36]	; 0x24
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	330c      	adds	r3, #12
 8003176:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003178:	623a      	str	r2, [r7, #32]
 800317a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800317c:	69f9      	ldr	r1, [r7, #28]
 800317e:	6a3a      	ldr	r2, [r7, #32]
 8003180:	e841 2300 	strex	r3, r2, [r1]
 8003184:	61bb      	str	r3, [r7, #24]
   return(result);
 8003186:	69bb      	ldr	r3, [r7, #24]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d1e5      	bne.n	8003158 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0310 	and.w	r3, r3, #16
 8003196:	2b10      	cmp	r3, #16
 8003198:	d10a      	bne.n	80031b0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800319a:	2300      	movs	r3, #0
 800319c:	60fb      	str	r3, [r7, #12]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	60fb      	str	r3, [r7, #12]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	60fb      	str	r3, [r7, #12]
 80031ae:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80031b4:	4619      	mov	r1, r3
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f7ff fe67 	bl	8002e8a <HAL_UARTEx_RxEventCallback>
 80031bc:	e002      	b.n	80031c4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f7ff fe51 	bl	8002e66 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80031c4:	2300      	movs	r3, #0
 80031c6:	e002      	b.n	80031ce <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80031c8:	2300      	movs	r3, #0
 80031ca:	e000      	b.n	80031ce <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80031cc:	2302      	movs	r3, #2
  }
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3730      	adds	r7, #48	; 0x30
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
	...

080031d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b084      	sub	sp, #16
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	691b      	ldr	r3, [r3, #16]
 80031e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	68da      	ldr	r2, [r3, #12]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	430a      	orrs	r2, r1
 80031f4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	689a      	ldr	r2, [r3, #8]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	691b      	ldr	r3, [r3, #16]
 80031fe:	431a      	orrs	r2, r3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	695b      	ldr	r3, [r3, #20]
 8003204:	4313      	orrs	r3, r2
 8003206:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	68db      	ldr	r3, [r3, #12]
 800320e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003212:	f023 030c 	bic.w	r3, r3, #12
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	6812      	ldr	r2, [r2, #0]
 800321a:	68b9      	ldr	r1, [r7, #8]
 800321c:	430b      	orrs	r3, r1
 800321e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	695b      	ldr	r3, [r3, #20]
 8003226:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	699a      	ldr	r2, [r3, #24]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	430a      	orrs	r2, r1
 8003234:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a2c      	ldr	r2, [pc, #176]	; (80032ec <UART_SetConfig+0x114>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d103      	bne.n	8003248 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003240:	f7ff f83c 	bl	80022bc <HAL_RCC_GetPCLK2Freq>
 8003244:	60f8      	str	r0, [r7, #12]
 8003246:	e002      	b.n	800324e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003248:	f7ff f824 	bl	8002294 <HAL_RCC_GetPCLK1Freq>
 800324c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800324e:	68fa      	ldr	r2, [r7, #12]
 8003250:	4613      	mov	r3, r2
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	4413      	add	r3, r2
 8003256:	009a      	lsls	r2, r3, #2
 8003258:	441a      	add	r2, r3
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	fbb2 f3f3 	udiv	r3, r2, r3
 8003264:	4a22      	ldr	r2, [pc, #136]	; (80032f0 <UART_SetConfig+0x118>)
 8003266:	fba2 2303 	umull	r2, r3, r2, r3
 800326a:	095b      	lsrs	r3, r3, #5
 800326c:	0119      	lsls	r1, r3, #4
 800326e:	68fa      	ldr	r2, [r7, #12]
 8003270:	4613      	mov	r3, r2
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	4413      	add	r3, r2
 8003276:	009a      	lsls	r2, r3, #2
 8003278:	441a      	add	r2, r3
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	fbb2 f2f3 	udiv	r2, r2, r3
 8003284:	4b1a      	ldr	r3, [pc, #104]	; (80032f0 <UART_SetConfig+0x118>)
 8003286:	fba3 0302 	umull	r0, r3, r3, r2
 800328a:	095b      	lsrs	r3, r3, #5
 800328c:	2064      	movs	r0, #100	; 0x64
 800328e:	fb00 f303 	mul.w	r3, r0, r3
 8003292:	1ad3      	subs	r3, r2, r3
 8003294:	011b      	lsls	r3, r3, #4
 8003296:	3332      	adds	r3, #50	; 0x32
 8003298:	4a15      	ldr	r2, [pc, #84]	; (80032f0 <UART_SetConfig+0x118>)
 800329a:	fba2 2303 	umull	r2, r3, r2, r3
 800329e:	095b      	lsrs	r3, r3, #5
 80032a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032a4:	4419      	add	r1, r3
 80032a6:	68fa      	ldr	r2, [r7, #12]
 80032a8:	4613      	mov	r3, r2
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	4413      	add	r3, r2
 80032ae:	009a      	lsls	r2, r3, #2
 80032b0:	441a      	add	r2, r3
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80032bc:	4b0c      	ldr	r3, [pc, #48]	; (80032f0 <UART_SetConfig+0x118>)
 80032be:	fba3 0302 	umull	r0, r3, r3, r2
 80032c2:	095b      	lsrs	r3, r3, #5
 80032c4:	2064      	movs	r0, #100	; 0x64
 80032c6:	fb00 f303 	mul.w	r3, r0, r3
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	011b      	lsls	r3, r3, #4
 80032ce:	3332      	adds	r3, #50	; 0x32
 80032d0:	4a07      	ldr	r2, [pc, #28]	; (80032f0 <UART_SetConfig+0x118>)
 80032d2:	fba2 2303 	umull	r2, r3, r2, r3
 80032d6:	095b      	lsrs	r3, r3, #5
 80032d8:	f003 020f 	and.w	r2, r3, #15
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	440a      	add	r2, r1
 80032e2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80032e4:	bf00      	nop
 80032e6:	3710      	adds	r7, #16
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}
 80032ec:	40013800 	.word	0x40013800
 80032f0:	51eb851f 	.word	0x51eb851f

080032f4 <DELAY_TIM_Init>:
#include "DHT.h"
//************************** Low Level Layer ********************************************************//
static void DELAY_TIM_Init(TIM_HandleTypeDef *htim)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b082      	sub	sp, #8
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start(htim);
 80032fc:	6878      	ldr	r0, [r7, #4]
 80032fe:	f7ff f85f 	bl	80023c0 <HAL_TIM_Base_Start>
}
 8003302:	bf00      	nop
 8003304:	3708      	adds	r7, #8
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}

0800330a <DELAY_TIM_Us>:

static void DELAY_TIM_Us(TIM_HandleTypeDef *htim, uint16_t time)
{
 800330a:	b480      	push	{r7}
 800330c:	b083      	sub	sp, #12
 800330e:	af00      	add	r7, sp, #0
 8003310:	6078      	str	r0, [r7, #4]
 8003312:	460b      	mov	r3, r1
 8003314:	807b      	strh	r3, [r7, #2]
	__HAL_TIM_SET_COUNTER(htim,0);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	2200      	movs	r2, #0
 800331c:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(htim)<time){}
 800331e:	bf00      	nop
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003326:	887b      	ldrh	r3, [r7, #2]
 8003328:	429a      	cmp	r2, r3
 800332a:	d3f9      	bcc.n	8003320 <DELAY_TIM_Us+0x16>
}
 800332c:	bf00      	nop
 800332e:	bf00      	nop
 8003330:	370c      	adds	r7, #12
 8003332:	46bd      	mov	sp, r7
 8003334:	bc80      	pop	{r7}
 8003336:	4770      	bx	lr

08003338 <DHT_DelayInit>:


static void DHT_DelayInit(DHT_Name* DHT)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b082      	sub	sp, #8
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
	DELAY_TIM_Init(DHT->Timer);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	4618      	mov	r0, r3
 8003346:	f7ff ffd5 	bl	80032f4 <DELAY_TIM_Init>
}
 800334a:	bf00      	nop
 800334c:	3708      	adds	r7, #8
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}

08003352 <DHT_DelayUs>:
static void DHT_DelayUs(DHT_Name* DHT, uint16_t Time)
{
 8003352:	b580      	push	{r7, lr}
 8003354:	b082      	sub	sp, #8
 8003356:	af00      	add	r7, sp, #0
 8003358:	6078      	str	r0, [r7, #4]
 800335a:	460b      	mov	r3, r1
 800335c:	807b      	strh	r3, [r7, #2]
	DELAY_TIM_Us(DHT->Timer, Time);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	887a      	ldrh	r2, [r7, #2]
 8003364:	4611      	mov	r1, r2
 8003366:	4618      	mov	r0, r3
 8003368:	f7ff ffcf 	bl	800330a <DELAY_TIM_Us>
}
 800336c:	bf00      	nop
 800336e:	3708      	adds	r7, #8
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}

08003374 <DHT_SetPinOut>:

static void DHT_SetPinOut(DHT_Name* DHT)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b086      	sub	sp, #24
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800337c:	f107 0308 	add.w	r3, r7, #8
 8003380:	2200      	movs	r2, #0
 8003382:	601a      	str	r2, [r3, #0]
 8003384:	605a      	str	r2, [r3, #4]
 8003386:	609a      	str	r2, [r3, #8]
 8003388:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = DHT->Pin;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	891b      	ldrh	r3, [r3, #8]
 800338e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003390:	2301      	movs	r3, #1
 8003392:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003394:	2302      	movs	r3, #2
 8003396:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(DHT->PORT, &GPIO_InitStruct);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	f107 0208 	add.w	r2, r7, #8
 80033a0:	4611      	mov	r1, r2
 80033a2:	4618      	mov	r0, r3
 80033a4:	f7fd fd5c 	bl	8000e60 <HAL_GPIO_Init>
}
 80033a8:	bf00      	nop
 80033aa:	3718      	adds	r7, #24
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}

080033b0 <DHT_SetPinIn>:
static void DHT_SetPinIn(DHT_Name* DHT)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b086      	sub	sp, #24
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033b8:	f107 0308 	add.w	r3, r7, #8
 80033bc:	2200      	movs	r2, #0
 80033be:	601a      	str	r2, [r3, #0]
 80033c0:	605a      	str	r2, [r3, #4]
 80033c2:	609a      	str	r2, [r3, #8]
 80033c4:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = DHT->Pin;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	891b      	ldrh	r3, [r3, #8]
 80033ca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80033cc:	2300      	movs	r3, #0
 80033ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80033d0:	2301      	movs	r3, #1
 80033d2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(DHT->PORT, &GPIO_InitStruct);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	68db      	ldr	r3, [r3, #12]
 80033d8:	f107 0208 	add.w	r2, r7, #8
 80033dc:	4611      	mov	r1, r2
 80033de:	4618      	mov	r0, r3
 80033e0:	f7fd fd3e 	bl	8000e60 <HAL_GPIO_Init>
}
 80033e4:	bf00      	nop
 80033e6:	3718      	adds	r7, #24
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}

080033ec <DHT_WritePin>:
static void DHT_WritePin(DHT_Name* DHT, uint8_t Value)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b082      	sub	sp, #8
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	460b      	mov	r3, r1
 80033f6:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(DHT->PORT, DHT->Pin, Value);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	68d8      	ldr	r0, [r3, #12]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	891b      	ldrh	r3, [r3, #8]
 8003400:	78fa      	ldrb	r2, [r7, #3]
 8003402:	4619      	mov	r1, r3
 8003404:	f7fd fec7 	bl	8001196 <HAL_GPIO_WritePin>
}
 8003408:	bf00      	nop
 800340a:	3708      	adds	r7, #8
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}

08003410 <DHT_ReadPin>:
static uint8_t DHT_ReadPin(DHT_Name* DHT)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b084      	sub	sp, #16
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
	uint8_t Value;
	Value =  HAL_GPIO_ReadPin(DHT->PORT, DHT->Pin);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	68da      	ldr	r2, [r3, #12]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	891b      	ldrh	r3, [r3, #8]
 8003420:	4619      	mov	r1, r3
 8003422:	4610      	mov	r0, r2
 8003424:	f7fd fea0 	bl	8001168 <HAL_GPIO_ReadPin>
 8003428:	4603      	mov	r3, r0
 800342a:	73fb      	strb	r3, [r7, #15]
	return Value;
 800342c:	7bfb      	ldrb	r3, [r7, #15]
}
 800342e:	4618      	mov	r0, r3
 8003430:	3710      	adds	r7, #16
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}

08003436 <DHT_Start>:

//********************************* Middle level Layer ****************************************************//
static uint8_t DHT_Start(DHT_Name* DHT)
{
 8003436:	b580      	push	{r7, lr}
 8003438:	b084      	sub	sp, #16
 800343a:	af00      	add	r7, sp, #0
 800343c:	6078      	str	r0, [r7, #4]
	uint8_t Response = 0;
 800343e:	2300      	movs	r3, #0
 8003440:	73fb      	strb	r3, [r7, #15]
	DHT_SetPinOut(DHT);
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f7ff ff96 	bl	8003374 <DHT_SetPinOut>
	DHT_WritePin(DHT, 0);
 8003448:	2100      	movs	r1, #0
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f7ff ffce 	bl	80033ec <DHT_WritePin>
	DHT_DelayUs(DHT, DHT->Type);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	881b      	ldrh	r3, [r3, #0]
 8003454:	4619      	mov	r1, r3
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f7ff ff7b 	bl	8003352 <DHT_DelayUs>
	DHT_SetPinIn(DHT);
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	f7ff ffa7 	bl	80033b0 <DHT_SetPinIn>
	DHT_DelayUs(DHT, 40);
 8003462:	2128      	movs	r1, #40	; 0x28
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f7ff ff74 	bl	8003352 <DHT_DelayUs>
	if (!DHT_ReadPin(DHT))
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f7ff ffd0 	bl	8003410 <DHT_ReadPin>
 8003470:	4603      	mov	r3, r0
 8003472:	2b00      	cmp	r3, #0
 8003474:	d10e      	bne.n	8003494 <DHT_Start+0x5e>
	{
		DHT_DelayUs(DHT, 40);
 8003476:	2128      	movs	r1, #40	; 0x28
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	f7ff ff6a 	bl	8003352 <DHT_DelayUs>
		if(DHT_ReadPin(DHT))
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f7ff ffc6 	bl	8003410 <DHT_ReadPin>
 8003484:	4603      	mov	r3, r0
 8003486:	2b00      	cmp	r3, #0
 8003488:	d002      	beq.n	8003490 <DHT_Start+0x5a>
		{
			Response = 1;
 800348a:	2301      	movs	r3, #1
 800348c:	73fb      	strb	r3, [r7, #15]
 800348e:	e001      	b.n	8003494 <DHT_Start+0x5e>
		}
		else Response = 0;
 8003490:	2300      	movs	r3, #0
 8003492:	73fb      	strb	r3, [r7, #15]
	}
	while(DHT_ReadPin(DHT));
 8003494:	bf00      	nop
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f7ff ffba 	bl	8003410 <DHT_ReadPin>
 800349c:	4603      	mov	r3, r0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d1f9      	bne.n	8003496 <DHT_Start+0x60>

	return Response;
 80034a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	3710      	adds	r7, #16
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}

080034ac <DHT_Read>:
static uint8_t DHT_Read(DHT_Name* DHT)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b084      	sub	sp, #16
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
	uint8_t Value = 0;
 80034b4:	2300      	movs	r3, #0
 80034b6:	73fb      	strb	r3, [r7, #15]
	DHT_SetPinIn(DHT);
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	f7ff ff79 	bl	80033b0 <DHT_SetPinIn>
	for(int i = 0; i<8; i++)
 80034be:	2300      	movs	r3, #0
 80034c0:	60bb      	str	r3, [r7, #8]
 80034c2:	e035      	b.n	8003530 <DHT_Read+0x84>
	{
		while(!DHT_ReadPin(DHT));
 80034c4:	bf00      	nop
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f7ff ffa2 	bl	8003410 <DHT_ReadPin>
 80034cc:	4603      	mov	r3, r0
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d0f9      	beq.n	80034c6 <DHT_Read+0x1a>
		DHT_DelayUs(DHT, 40);
 80034d2:	2128      	movs	r1, #40	; 0x28
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	f7ff ff3c 	bl	8003352 <DHT_DelayUs>
		if(!DHT_ReadPin(DHT))
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f7ff ff98 	bl	8003410 <DHT_ReadPin>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d10e      	bne.n	8003504 <DHT_Read+0x58>
		{
			Value &= ~(1<<(7-i));
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	f1c3 0307 	rsb	r3, r3, #7
 80034ec:	2201      	movs	r2, #1
 80034ee:	fa02 f303 	lsl.w	r3, r2, r3
 80034f2:	b25b      	sxtb	r3, r3
 80034f4:	43db      	mvns	r3, r3
 80034f6:	b25a      	sxtb	r2, r3
 80034f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034fc:	4013      	ands	r3, r2
 80034fe:	b25b      	sxtb	r3, r3
 8003500:	73fb      	strb	r3, [r7, #15]
 8003502:	e00b      	b.n	800351c <DHT_Read+0x70>
		}
		else Value |= 1<<(7-i);
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	f1c3 0307 	rsb	r3, r3, #7
 800350a:	2201      	movs	r2, #1
 800350c:	fa02 f303 	lsl.w	r3, r2, r3
 8003510:	b25a      	sxtb	r2, r3
 8003512:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003516:	4313      	orrs	r3, r2
 8003518:	b25b      	sxtb	r3, r3
 800351a:	73fb      	strb	r3, [r7, #15]
		while(DHT_ReadPin(DHT));
 800351c:	bf00      	nop
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f7ff ff76 	bl	8003410 <DHT_ReadPin>
 8003524:	4603      	mov	r3, r0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d1f9      	bne.n	800351e <DHT_Read+0x72>
	for(int i = 0; i<8; i++)
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	3301      	adds	r3, #1
 800352e:	60bb      	str	r3, [r7, #8]
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	2b07      	cmp	r3, #7
 8003534:	ddc6      	ble.n	80034c4 <DHT_Read+0x18>
	}
	return Value;
 8003536:	7bfb      	ldrb	r3, [r7, #15]
}
 8003538:	4618      	mov	r0, r3
 800353a:	3710      	adds	r7, #16
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}

08003540 <DHT_Init>:

//************************** High Level Layer ********************************************************//
void DHT_Init(DHT_Name* DHT, uint8_t DHT_Type, TIM_HandleTypeDef* Timer, GPIO_TypeDef* DH_PORT, uint16_t DH_Pin)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b084      	sub	sp, #16
 8003544:	af00      	add	r7, sp, #0
 8003546:	60f8      	str	r0, [r7, #12]
 8003548:	607a      	str	r2, [r7, #4]
 800354a:	603b      	str	r3, [r7, #0]
 800354c:	460b      	mov	r3, r1
 800354e:	72fb      	strb	r3, [r7, #11]
	if(DHT_Type == DHT11)
 8003550:	7afb      	ldrb	r3, [r7, #11]
 8003552:	2b01      	cmp	r3, #1
 8003554:	d104      	bne.n	8003560 <DHT_Init+0x20>
	{
		DHT->Type = DHT11_STARTTIME;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	f244 6250 	movw	r2, #18000	; 0x4650
 800355c:	801a      	strh	r2, [r3, #0]
 800355e:	e006      	b.n	800356e <DHT_Init+0x2e>
	}
	else if(DHT_Type == DHT22)
 8003560:	7afb      	ldrb	r3, [r7, #11]
 8003562:	2b02      	cmp	r3, #2
 8003564:	d103      	bne.n	800356e <DHT_Init+0x2e>
	{
		DHT->Type = DHT22_STARTTIME;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 800356c:	801a      	strh	r2, [r3, #0]
	}
	DHT->PORT = DH_PORT;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	683a      	ldr	r2, [r7, #0]
 8003572:	60da      	str	r2, [r3, #12]
	DHT->Pin = DH_Pin;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	8b3a      	ldrh	r2, [r7, #24]
 8003578:	811a      	strh	r2, [r3, #8]
	DHT->Timer = Timer;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	687a      	ldr	r2, [r7, #4]
 800357e:	605a      	str	r2, [r3, #4]
	DHT_DelayInit(DHT);
 8003580:	68f8      	ldr	r0, [r7, #12]
 8003582:	f7ff fed9 	bl	8003338 <DHT_DelayInit>
}
 8003586:	bf00      	nop
 8003588:	3710      	adds	r7, #16
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
	...

08003590 <DHT_ReadTempHum>:

uint8_t DHT_ReadTempHum(DHT_Name* DHT)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b086      	sub	sp, #24
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
	uint8_t Temp1, Temp2, RH1, RH2;
	uint16_t Temp, Humi, SUM = 0;
 8003598:	2300      	movs	r3, #0
 800359a:	82fb      	strh	r3, [r7, #22]
	DHT_Start(DHT);
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f7ff ff4a 	bl	8003436 <DHT_Start>
	RH1 = DHT_Read(DHT);
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f7ff ff82 	bl	80034ac <DHT_Read>
 80035a8:	4603      	mov	r3, r0
 80035aa:	757b      	strb	r3, [r7, #21]
	RH2 = DHT_Read(DHT);
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	f7ff ff7d 	bl	80034ac <DHT_Read>
 80035b2:	4603      	mov	r3, r0
 80035b4:	753b      	strb	r3, [r7, #20]
	Temp1 = DHT_Read(DHT);
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f7ff ff78 	bl	80034ac <DHT_Read>
 80035bc:	4603      	mov	r3, r0
 80035be:	74fb      	strb	r3, [r7, #19]
	Temp2 = DHT_Read(DHT);
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	f7ff ff73 	bl	80034ac <DHT_Read>
 80035c6:	4603      	mov	r3, r0
 80035c8:	74bb      	strb	r3, [r7, #18]
	SUM = DHT_Read(DHT);
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f7ff ff6e 	bl	80034ac <DHT_Read>
 80035d0:	4603      	mov	r3, r0
 80035d2:	82fb      	strh	r3, [r7, #22]
	Temp = (Temp1<<8)|Temp2;
 80035d4:	7cfb      	ldrb	r3, [r7, #19]
 80035d6:	021b      	lsls	r3, r3, #8
 80035d8:	b21a      	sxth	r2, r3
 80035da:	7cbb      	ldrb	r3, [r7, #18]
 80035dc:	b21b      	sxth	r3, r3
 80035de:	4313      	orrs	r3, r2
 80035e0:	b21b      	sxth	r3, r3
 80035e2:	823b      	strh	r3, [r7, #16]
	Humi = (RH1<<8)|RH2;
 80035e4:	7d7b      	ldrb	r3, [r7, #21]
 80035e6:	021b      	lsls	r3, r3, #8
 80035e8:	b21a      	sxth	r2, r3
 80035ea:	7d3b      	ldrb	r3, [r7, #20]
 80035ec:	b21b      	sxth	r3, r3
 80035ee:	4313      	orrs	r3, r2
 80035f0:	b21b      	sxth	r3, r3
 80035f2:	81fb      	strh	r3, [r7, #14]
	DHT->Temp = (float)(Temp/10.0);
 80035f4:	8a3b      	ldrh	r3, [r7, #16]
 80035f6:	4618      	mov	r0, r3
 80035f8:	f7fc fefa 	bl	80003f0 <__aeabi_i2d>
 80035fc:	f04f 0200 	mov.w	r2, #0
 8003600:	4b11      	ldr	r3, [pc, #68]	; (8003648 <DHT_ReadTempHum+0xb8>)
 8003602:	f7fd f889 	bl	8000718 <__aeabi_ddiv>
 8003606:	4602      	mov	r2, r0
 8003608:	460b      	mov	r3, r1
 800360a:	4610      	mov	r0, r2
 800360c:	4619      	mov	r1, r3
 800360e:	f7fd f96b 	bl	80008e8 <__aeabi_d2f>
 8003612:	4602      	mov	r2, r0
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	611a      	str	r2, [r3, #16]
	DHT->Humi = (float)(Humi/10.0);
 8003618:	89fb      	ldrh	r3, [r7, #14]
 800361a:	4618      	mov	r0, r3
 800361c:	f7fc fee8 	bl	80003f0 <__aeabi_i2d>
 8003620:	f04f 0200 	mov.w	r2, #0
 8003624:	4b08      	ldr	r3, [pc, #32]	; (8003648 <DHT_ReadTempHum+0xb8>)
 8003626:	f7fd f877 	bl	8000718 <__aeabi_ddiv>
 800362a:	4602      	mov	r2, r0
 800362c:	460b      	mov	r3, r1
 800362e:	4610      	mov	r0, r2
 8003630:	4619      	mov	r1, r3
 8003632:	f7fd f959 	bl	80008e8 <__aeabi_d2f>
 8003636:	4602      	mov	r2, r0
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	615a      	str	r2, [r3, #20]
	return SUM;
 800363c:	8afb      	ldrh	r3, [r7, #22]
 800363e:	b2db      	uxtb	r3, r3
}
 8003640:	4618      	mov	r0, r3
 8003642:	3718      	adds	r7, #24
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}
 8003648:	40240000 	.word	0x40240000

0800364c <LCD_Init>:
        0b00110,
        0b00000
};

void LCD_Init(uint8_t rows)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b082      	sub	sp, #8
 8003650:	af00      	add	r7, sp, #0
 8003652:	4603      	mov	r3, r0
 8003654:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 8003656:	4a38      	ldr	r2, [pc, #224]	; (8003738 <LCD_Init+0xec>)
 8003658:	79fb      	ldrb	r3, [r7, #7]
 800365a:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 800365c:	4b37      	ldr	r3, [pc, #220]	; (800373c <LCD_Init+0xf0>)
 800365e:	2208      	movs	r2, #8
 8003660:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8003662:	4b37      	ldr	r3, [pc, #220]	; (8003740 <LCD_Init+0xf4>)
 8003664:	2200      	movs	r2, #0
 8003666:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 8003668:	4b33      	ldr	r3, [pc, #204]	; (8003738 <LCD_Init+0xec>)
 800366a:	781b      	ldrb	r3, [r3, #0]
 800366c:	2b01      	cmp	r3, #1
 800366e:	d907      	bls.n	8003680 <LCD_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 8003670:	4b33      	ldr	r3, [pc, #204]	; (8003740 <LCD_Init+0xf4>)
 8003672:	781b      	ldrb	r3, [r3, #0]
 8003674:	f043 0308 	orr.w	r3, r3, #8
 8003678:	b2da      	uxtb	r2, r3
 800367a:	4b31      	ldr	r3, [pc, #196]	; (8003740 <LCD_Init+0xf4>)
 800367c:	701a      	strb	r2, [r3, #0]
 800367e:	e006      	b.n	800368e <LCD_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 8003680:	4b2f      	ldr	r3, [pc, #188]	; (8003740 <LCD_Init+0xf4>)
 8003682:	781b      	ldrb	r3, [r3, #0]
 8003684:	f043 0304 	orr.w	r3, r3, #4
 8003688:	b2da      	uxtb	r2, r3
 800368a:	4b2d      	ldr	r3, [pc, #180]	; (8003740 <LCD_Init+0xf4>)
 800368c:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 800368e:	f000 f975 	bl	800397c <DelayInit>
  HAL_Delay(50);
 8003692:	2032      	movs	r0, #50	; 0x32
 8003694:	f7fd fa00 	bl	8000a98 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 8003698:	4b28      	ldr	r3, [pc, #160]	; (800373c <LCD_Init+0xf0>)
 800369a:	781b      	ldrb	r3, [r3, #0]
 800369c:	4618      	mov	r0, r3
 800369e:	f000 f933 	bl	8003908 <ExpanderWrite>
  HAL_Delay(1000);
 80036a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80036a6:	f7fd f9f7 	bl	8000a98 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 80036aa:	2030      	movs	r0, #48	; 0x30
 80036ac:	f000 f91b 	bl	80038e6 <Write4Bits>
  DelayUS(4500);
 80036b0:	f241 1094 	movw	r0, #4500	; 0x1194
 80036b4:	f000 f98a 	bl	80039cc <DelayUS>

  Write4Bits(0x03 << 4);
 80036b8:	2030      	movs	r0, #48	; 0x30
 80036ba:	f000 f914 	bl	80038e6 <Write4Bits>
  DelayUS(4500);
 80036be:	f241 1094 	movw	r0, #4500	; 0x1194
 80036c2:	f000 f983 	bl	80039cc <DelayUS>

  Write4Bits(0x03 << 4);
 80036c6:	2030      	movs	r0, #48	; 0x30
 80036c8:	f000 f90d 	bl	80038e6 <Write4Bits>
  DelayUS(4500);
 80036cc:	f241 1094 	movw	r0, #4500	; 0x1194
 80036d0:	f000 f97c 	bl	80039cc <DelayUS>

  Write4Bits(0x02 << 4);
 80036d4:	2020      	movs	r0, #32
 80036d6:	f000 f906 	bl	80038e6 <Write4Bits>
  DelayUS(100);
 80036da:	2064      	movs	r0, #100	; 0x64
 80036dc:	f000 f976 	bl	80039cc <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 80036e0:	4b17      	ldr	r3, [pc, #92]	; (8003740 <LCD_Init+0xf4>)
 80036e2:	781b      	ldrb	r3, [r3, #0]
 80036e4:	f043 0320 	orr.w	r3, r3, #32
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	4618      	mov	r0, r3
 80036ec:	f000 f8be 	bl	800386c <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80036f0:	4b14      	ldr	r3, [pc, #80]	; (8003744 <LCD_Init+0xf8>)
 80036f2:	2204      	movs	r2, #4
 80036f4:	701a      	strb	r2, [r3, #0]
  LCD_Display();
 80036f6:	f000 f843 	bl	8003780 <LCD_Display>
  LCD_Clear();
 80036fa:	f000 f82b 	bl	8003754 <LCD_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80036fe:	4b12      	ldr	r3, [pc, #72]	; (8003748 <LCD_Init+0xfc>)
 8003700:	2202      	movs	r2, #2
 8003702:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8003704:	4b10      	ldr	r3, [pc, #64]	; (8003748 <LCD_Init+0xfc>)
 8003706:	781b      	ldrb	r3, [r3, #0]
 8003708:	f043 0304 	orr.w	r3, r3, #4
 800370c:	b2db      	uxtb	r3, r3
 800370e:	4618      	mov	r0, r3
 8003710:	f000 f8ac 	bl	800386c <SendCommand>
  DelayUS(4500);
 8003714:	f241 1094 	movw	r0, #4500	; 0x1194
 8003718:	f000 f958 	bl	80039cc <DelayUS>

  LCD_CreateSpecialChar(0, special1);
 800371c:	490b      	ldr	r1, [pc, #44]	; (800374c <LCD_Init+0x100>)
 800371e:	2000      	movs	r0, #0
 8003720:	f000 f85a 	bl	80037d8 <LCD_CreateSpecialChar>
  LCD_CreateSpecialChar(1, special2);
 8003724:	490a      	ldr	r1, [pc, #40]	; (8003750 <LCD_Init+0x104>)
 8003726:	2001      	movs	r0, #1
 8003728:	f000 f856 	bl	80037d8 <LCD_CreateSpecialChar>

  LCD_Home();
 800372c:	f000 f81d 	bl	800376a <LCD_Home>
}
 8003730:	bf00      	nop
 8003732:	3708      	adds	r7, #8
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}
 8003738:	200000a3 	.word	0x200000a3
 800373c:	200000a4 	.word	0x200000a4
 8003740:	200000a0 	.word	0x200000a0
 8003744:	200000a1 	.word	0x200000a1
 8003748:	200000a2 	.word	0x200000a2
 800374c:	20000008 	.word	0x20000008
 8003750:	20000010 	.word	0x20000010

08003754 <LCD_Clear>:

void LCD_Clear()
{
 8003754:	b580      	push	{r7, lr}
 8003756:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 8003758:	2001      	movs	r0, #1
 800375a:	f000 f887 	bl	800386c <SendCommand>
  DelayUS(2000);
 800375e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003762:	f000 f933 	bl	80039cc <DelayUS>
}
 8003766:	bf00      	nop
 8003768:	bd80      	pop	{r7, pc}

0800376a <LCD_Home>:

void LCD_Home()
{
 800376a:	b580      	push	{r7, lr}
 800376c:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 800376e:	2002      	movs	r0, #2
 8003770:	f000 f87c 	bl	800386c <SendCommand>
  DelayUS(2000);
 8003774:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003778:	f000 f928 	bl	80039cc <DelayUS>
}
 800377c:	bf00      	nop
 800377e:	bd80      	pop	{r7, pc}

08003780 <LCD_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void LCD_Display()
{
 8003780:	b580      	push	{r7, lr}
 8003782:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 8003784:	4b08      	ldr	r3, [pc, #32]	; (80037a8 <LCD_Display+0x28>)
 8003786:	781b      	ldrb	r3, [r3, #0]
 8003788:	f043 0304 	orr.w	r3, r3, #4
 800378c:	b2da      	uxtb	r2, r3
 800378e:	4b06      	ldr	r3, [pc, #24]	; (80037a8 <LCD_Display+0x28>)
 8003790:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8003792:	4b05      	ldr	r3, [pc, #20]	; (80037a8 <LCD_Display+0x28>)
 8003794:	781b      	ldrb	r3, [r3, #0]
 8003796:	f043 0308 	orr.w	r3, r3, #8
 800379a:	b2db      	uxtb	r3, r3
 800379c:	4618      	mov	r0, r3
 800379e:	f000 f865 	bl	800386c <SendCommand>
}
 80037a2:	bf00      	nop
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	200000a1 	.word	0x200000a1

080037ac <LCD_Cursor>:
  dpControl &= ~LCD_CURSORON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void LCD_Cursor()
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	af00      	add	r7, sp, #0
  dpControl |= LCD_CURSORON;
 80037b0:	4b08      	ldr	r3, [pc, #32]	; (80037d4 <LCD_Cursor+0x28>)
 80037b2:	781b      	ldrb	r3, [r3, #0]
 80037b4:	f043 0302 	orr.w	r3, r3, #2
 80037b8:	b2da      	uxtb	r2, r3
 80037ba:	4b06      	ldr	r3, [pc, #24]	; (80037d4 <LCD_Cursor+0x28>)
 80037bc:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 80037be:	4b05      	ldr	r3, [pc, #20]	; (80037d4 <LCD_Cursor+0x28>)
 80037c0:	781b      	ldrb	r3, [r3, #0]
 80037c2:	f043 0308 	orr.w	r3, r3, #8
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	4618      	mov	r0, r3
 80037ca:	f000 f84f 	bl	800386c <SendCommand>
}
 80037ce:	bf00      	nop
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	bf00      	nop
 80037d4:	200000a1 	.word	0x200000a1

080037d8 <LCD_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void LCD_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b084      	sub	sp, #16
 80037dc:	af00      	add	r7, sp, #0
 80037de:	4603      	mov	r3, r0
 80037e0:	6039      	str	r1, [r7, #0]
 80037e2:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 80037e4:	79fb      	ldrb	r3, [r7, #7]
 80037e6:	f003 0307 	and.w	r3, r3, #7
 80037ea:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 80037ec:	79fb      	ldrb	r3, [r7, #7]
 80037ee:	00db      	lsls	r3, r3, #3
 80037f0:	b25b      	sxtb	r3, r3
 80037f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80037f6:	b25b      	sxtb	r3, r3
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	4618      	mov	r0, r3
 80037fc:	f000 f836 	bl	800386c <SendCommand>
  for (int i=0; i<8; i++)
 8003800:	2300      	movs	r3, #0
 8003802:	60fb      	str	r3, [r7, #12]
 8003804:	e009      	b.n	800381a <LCD_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	683a      	ldr	r2, [r7, #0]
 800380a:	4413      	add	r3, r2
 800380c:	781b      	ldrb	r3, [r3, #0]
 800380e:	4618      	mov	r0, r3
 8003810:	f000 f83a 	bl	8003888 <SendChar>
  for (int i=0; i<8; i++)
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	3301      	adds	r3, #1
 8003818:	60fb      	str	r3, [r7, #12]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2b07      	cmp	r3, #7
 800381e:	ddf2      	ble.n	8003806 <LCD_CreateSpecialChar+0x2e>
  }
}
 8003820:	bf00      	nop
 8003822:	bf00      	nop
 8003824:	3710      	adds	r7, #16
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}

0800382a <LCD_PrintStr>:
{
  LCD_CreateSpecialChar(char_num, rows);
}

void LCD_PrintStr(const char c[])
{
 800382a:	b580      	push	{r7, lr}
 800382c:	b082      	sub	sp, #8
 800382e:	af00      	add	r7, sp, #0
 8003830:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 8003832:	e006      	b.n	8003842 <LCD_PrintStr+0x18>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	1c5a      	adds	r2, r3, #1
 8003838:	607a      	str	r2, [r7, #4]
 800383a:	781b      	ldrb	r3, [r3, #0]
 800383c:	4618      	mov	r0, r3
 800383e:	f000 f823 	bl	8003888 <SendChar>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	781b      	ldrb	r3, [r3, #0]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d1f4      	bne.n	8003834 <LCD_PrintStr+0xa>
}
 800384a:	bf00      	nop
 800384c:	bf00      	nop
 800384e:	3708      	adds	r7, #8
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}

08003854 <LCD_Backlight>:
  dpBacklight=LCD_NOBACKLIGHT;
  ExpanderWrite(0);
}

void LCD_Backlight(void)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	af00      	add	r7, sp, #0
  dpBacklight=LCD_BACKLIGHT;
 8003858:	4b03      	ldr	r3, [pc, #12]	; (8003868 <LCD_Backlight+0x14>)
 800385a:	2208      	movs	r2, #8
 800385c:	701a      	strb	r2, [r3, #0]
  ExpanderWrite(0);
 800385e:	2000      	movs	r0, #0
 8003860:	f000 f852 	bl	8003908 <ExpanderWrite>
}
 8003864:	bf00      	nop
 8003866:	bd80      	pop	{r7, pc}
 8003868:	200000a4 	.word	0x200000a4

0800386c <SendCommand>:

static void SendCommand(uint8_t cmd)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b082      	sub	sp, #8
 8003870:	af00      	add	r7, sp, #0
 8003872:	4603      	mov	r3, r0
 8003874:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 8003876:	79fb      	ldrb	r3, [r7, #7]
 8003878:	2100      	movs	r1, #0
 800387a:	4618      	mov	r0, r3
 800387c:	f000 f812 	bl	80038a4 <Send>
}
 8003880:	bf00      	nop
 8003882:	3708      	adds	r7, #8
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}

08003888 <SendChar>:

static void SendChar(uint8_t ch)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0
 800388e:	4603      	mov	r3, r0
 8003890:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 8003892:	79fb      	ldrb	r3, [r7, #7]
 8003894:	2101      	movs	r1, #1
 8003896:	4618      	mov	r0, r3
 8003898:	f000 f804 	bl	80038a4 <Send>
}
 800389c:	bf00      	nop
 800389e:	3708      	adds	r7, #8
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}

080038a4 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	4603      	mov	r3, r0
 80038ac:	460a      	mov	r2, r1
 80038ae:	71fb      	strb	r3, [r7, #7]
 80038b0:	4613      	mov	r3, r2
 80038b2:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 80038b4:	79fb      	ldrb	r3, [r7, #7]
 80038b6:	f023 030f 	bic.w	r3, r3, #15
 80038ba:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 80038bc:	79fb      	ldrb	r3, [r7, #7]
 80038be:	011b      	lsls	r3, r3, #4
 80038c0:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 80038c2:	7bfa      	ldrb	r2, [r7, #15]
 80038c4:	79bb      	ldrb	r3, [r7, #6]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	b2db      	uxtb	r3, r3
 80038ca:	4618      	mov	r0, r3
 80038cc:	f000 f80b 	bl	80038e6 <Write4Bits>
  Write4Bits((lownib)|mode);
 80038d0:	7bba      	ldrb	r2, [r7, #14]
 80038d2:	79bb      	ldrb	r3, [r7, #6]
 80038d4:	4313      	orrs	r3, r2
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	4618      	mov	r0, r3
 80038da:	f000 f804 	bl	80038e6 <Write4Bits>
}
 80038de:	bf00      	nop
 80038e0:	3710      	adds	r7, #16
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}

080038e6 <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 80038e6:	b580      	push	{r7, lr}
 80038e8:	b082      	sub	sp, #8
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	4603      	mov	r3, r0
 80038ee:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 80038f0:	79fb      	ldrb	r3, [r7, #7]
 80038f2:	4618      	mov	r0, r3
 80038f4:	f000 f808 	bl	8003908 <ExpanderWrite>
  PulseEnable(value);
 80038f8:	79fb      	ldrb	r3, [r7, #7]
 80038fa:	4618      	mov	r0, r3
 80038fc:	f000 f820 	bl	8003940 <PulseEnable>
}
 8003900:	bf00      	nop
 8003902:	3708      	adds	r7, #8
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}

08003908 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b086      	sub	sp, #24
 800390c:	af02      	add	r7, sp, #8
 800390e:	4603      	mov	r3, r0
 8003910:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 8003912:	4b09      	ldr	r3, [pc, #36]	; (8003938 <ExpanderWrite+0x30>)
 8003914:	781a      	ldrb	r2, [r3, #0]
 8003916:	79fb      	ldrb	r3, [r7, #7]
 8003918:	4313      	orrs	r3, r2
 800391a:	b2db      	uxtb	r3, r3
 800391c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 800391e:	f107 020f 	add.w	r2, r7, #15
 8003922:	230a      	movs	r3, #10
 8003924:	9300      	str	r3, [sp, #0]
 8003926:	2301      	movs	r3, #1
 8003928:	214e      	movs	r1, #78	; 0x4e
 800392a:	4804      	ldr	r0, [pc, #16]	; (800393c <ExpanderWrite+0x34>)
 800392c:	f7fd fd90 	bl	8001450 <HAL_I2C_Master_Transmit>
}
 8003930:	bf00      	nop
 8003932:	3710      	adds	r7, #16
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}
 8003938:	200000a4 	.word	0x200000a4
 800393c:	200000a8 	.word	0x200000a8

08003940 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b082      	sub	sp, #8
 8003944:	af00      	add	r7, sp, #0
 8003946:	4603      	mov	r3, r0
 8003948:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 800394a:	79fb      	ldrb	r3, [r7, #7]
 800394c:	f043 0304 	orr.w	r3, r3, #4
 8003950:	b2db      	uxtb	r3, r3
 8003952:	4618      	mov	r0, r3
 8003954:	f7ff ffd8 	bl	8003908 <ExpanderWrite>
  DelayUS(20);
 8003958:	2014      	movs	r0, #20
 800395a:	f000 f837 	bl	80039cc <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 800395e:	79fb      	ldrb	r3, [r7, #7]
 8003960:	f023 0304 	bic.w	r3, r3, #4
 8003964:	b2db      	uxtb	r3, r3
 8003966:	4618      	mov	r0, r3
 8003968:	f7ff ffce 	bl	8003908 <ExpanderWrite>
  DelayUS(20);
 800396c:	2014      	movs	r0, #20
 800396e:	f000 f82d 	bl	80039cc <DelayUS>
}
 8003972:	bf00      	nop
 8003974:	3708      	adds	r7, #8
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
	...

0800397c <DelayInit>:

static void DelayInit(void)
{
 800397c:	b480      	push	{r7}
 800397e:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8003980:	4b10      	ldr	r3, [pc, #64]	; (80039c4 <DelayInit+0x48>)
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	4a0f      	ldr	r2, [pc, #60]	; (80039c4 <DelayInit+0x48>)
 8003986:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800398a:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 800398c:	4b0d      	ldr	r3, [pc, #52]	; (80039c4 <DelayInit+0x48>)
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	4a0c      	ldr	r2, [pc, #48]	; (80039c4 <DelayInit+0x48>)
 8003992:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003996:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8003998:	4b0b      	ldr	r3, [pc, #44]	; (80039c8 <DelayInit+0x4c>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a0a      	ldr	r2, [pc, #40]	; (80039c8 <DelayInit+0x4c>)
 800399e:	f023 0301 	bic.w	r3, r3, #1
 80039a2:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80039a4:	4b08      	ldr	r3, [pc, #32]	; (80039c8 <DelayInit+0x4c>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a07      	ldr	r2, [pc, #28]	; (80039c8 <DelayInit+0x4c>)
 80039aa:	f043 0301 	orr.w	r3, r3, #1
 80039ae:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 80039b0:	4b05      	ldr	r3, [pc, #20]	; (80039c8 <DelayInit+0x4c>)
 80039b2:	2200      	movs	r2, #0
 80039b4:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 80039b6:	bf00      	nop
  __ASM volatile ("NOP");
 80039b8:	bf00      	nop
  __ASM volatile ("NOP");
 80039ba:	bf00      	nop
}
 80039bc:	bf00      	nop
 80039be:	46bd      	mov	sp, r7
 80039c0:	bc80      	pop	{r7}
 80039c2:	4770      	bx	lr
 80039c4:	e000edf0 	.word	0xe000edf0
 80039c8:	e0001000 	.word	0xe0001000

080039cc <DelayUS>:

static void DelayUS(uint32_t us) {
 80039cc:	b480      	push	{r7}
 80039ce:	b087      	sub	sp, #28
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 80039d4:	4b0d      	ldr	r3, [pc, #52]	; (8003a0c <DelayUS+0x40>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a0d      	ldr	r2, [pc, #52]	; (8003a10 <DelayUS+0x44>)
 80039da:	fba2 2303 	umull	r2, r3, r2, r3
 80039de:	0c9a      	lsrs	r2, r3, #18
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	fb02 f303 	mul.w	r3, r2, r3
 80039e6:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 80039e8:	4b0a      	ldr	r3, [pc, #40]	; (8003a14 <DelayUS+0x48>)
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 80039ee:	4b09      	ldr	r3, [pc, #36]	; (8003a14 <DelayUS+0x48>)
 80039f0:	685a      	ldr	r2, [r3, #4]
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	697a      	ldr	r2, [r7, #20]
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d8f6      	bhi.n	80039ee <DelayUS+0x22>
}
 8003a00:	bf00      	nop
 8003a02:	bf00      	nop
 8003a04:	371c      	adds	r7, #28
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bc80      	pop	{r7}
 8003a0a:	4770      	bx	lr
 8003a0c:	20000018 	.word	0x20000018
 8003a10:	431bde83 	.word	0x431bde83
 8003a14:	e0001000 	.word	0xe0001000

08003a18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b08a      	sub	sp, #40	; 0x28
 8003a1c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003a1e:	f7fc ffd9 	bl	80009d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003a22:	f000 f855 	bl	8003ad0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003a26:	f000 f98f 	bl	8003d48 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8003a2a:	f000 f963 	bl	8003cf4 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8003a2e:	f000 f895 	bl	8003b5c <MX_I2C1_Init>
  MX_TIM1_Init();
 8003a32:	f000 f8c1 	bl	8003bb8 <MX_TIM1_Init>
  MX_TIM4_Init();
 8003a36:	f000 f90f 	bl	8003c58 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  LCD_Init(2);
 8003a3a:	2002      	movs	r0, #2
 8003a3c:	f7ff fe06 	bl	800364c <LCD_Init>
  DHT_Init(&DHT1,DHT11,&htim4,GPIOB,GPIO_PIN_9);
 8003a40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a44:	9300      	str	r3, [sp, #0]
 8003a46:	4b1d      	ldr	r3, [pc, #116]	; (8003abc <main+0xa4>)
 8003a48:	4a1d      	ldr	r2, [pc, #116]	; (8003ac0 <main+0xa8>)
 8003a4a:	2101      	movs	r1, #1
 8003a4c:	481d      	ldr	r0, [pc, #116]	; (8003ac4 <main+0xac>)
 8003a4e:	f7ff fd77 	bl	8003540 <DHT_Init>
  LCD_Clear();
 8003a52:	f7ff fe7f 	bl	8003754 <LCD_Clear>
  LCD_Backlight();
 8003a56:	f7ff fefd 	bl	8003854 <LCD_Backlight>
  LCD_PrintStr("set");
 8003a5a:	481b      	ldr	r0, [pc, #108]	; (8003ac8 <main+0xb0>)
 8003a5c:	f7ff fee5 	bl	800382a <LCD_PrintStr>
  LCD_Cursor();
 8003a60:	f7ff fea4 	bl	80037ac <LCD_Cursor>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //LCD_Clear();
    /* USER CODE END WHILE */
	 DHT_ReadTempHum(&DHT1);
 8003a64:	4817      	ldr	r0, [pc, #92]	; (8003ac4 <main+0xac>)
 8003a66:	f7ff fd93 	bl	8003590 <DHT_ReadTempHum>
	 temp = (int)DHT1.Temp;
 8003a6a:	4b16      	ldr	r3, [pc, #88]	; (8003ac4 <main+0xac>)
 8003a6c:	691b      	ldr	r3, [r3, #16]
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f7fc ff8a 	bl	8000988 <__aeabi_f2iz>
 8003a74:	4603      	mov	r3, r0
 8003a76:	61fb      	str	r3, [r7, #28]
	 sprintf(str_temp,"%d",temp);
 8003a78:	f107 030c 	add.w	r3, r7, #12
 8003a7c:	69fa      	ldr	r2, [r7, #28]
 8003a7e:	4913      	ldr	r1, [pc, #76]	; (8003acc <main+0xb4>)
 8003a80:	4618      	mov	r0, r3
 8003a82:	f000 fb6f 	bl	8004164 <siprintf>
	 LCD_PrintStr(str_temp);
 8003a86:	f107 030c 	add.w	r3, r7, #12
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f7ff fecd 	bl	800382a <LCD_PrintStr>
	 humi= (int)DHT1.Humi;
 8003a90:	4b0c      	ldr	r3, [pc, #48]	; (8003ac4 <main+0xac>)
 8003a92:	695b      	ldr	r3, [r3, #20]
 8003a94:	4618      	mov	r0, r3
 8003a96:	f7fc ff77 	bl	8000988 <__aeabi_f2iz>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	61bb      	str	r3, [r7, #24]
	 sprintf(str_humi,"%d",humi);
 8003a9e:	463b      	mov	r3, r7
 8003aa0:	69ba      	ldr	r2, [r7, #24]
 8003aa2:	490a      	ldr	r1, [pc, #40]	; (8003acc <main+0xb4>)
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f000 fb5d 	bl	8004164 <siprintf>
	 LCD_PrintStr(str_humi);
 8003aaa:	463b      	mov	r3, r7
 8003aac:	4618      	mov	r0, r3
 8003aae:	f7ff febc 	bl	800382a <LCD_PrintStr>
	 HAL_Delay(1000);
 8003ab2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003ab6:	f7fc ffef 	bl	8000a98 <HAL_Delay>
	 DHT_ReadTempHum(&DHT1);
 8003aba:	e7d3      	b.n	8003a64 <main+0x4c>
 8003abc:	40010c00 	.word	0x40010c00
 8003ac0:	20000144 	.word	0x20000144
 8003ac4:	200001d4 	.word	0x200001d4
 8003ac8:	08004a70 	.word	0x08004a70
 8003acc:	08004a74 	.word	0x08004a74

08003ad0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b090      	sub	sp, #64	; 0x40
 8003ad4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003ad6:	f107 0318 	add.w	r3, r7, #24
 8003ada:	2228      	movs	r2, #40	; 0x28
 8003adc:	2100      	movs	r1, #0
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f000 fb38 	bl	8004154 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003ae4:	1d3b      	adds	r3, r7, #4
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	601a      	str	r2, [r3, #0]
 8003aea:	605a      	str	r2, [r3, #4]
 8003aec:	609a      	str	r2, [r3, #8]
 8003aee:	60da      	str	r2, [r3, #12]
 8003af0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003af2:	2301      	movs	r3, #1
 8003af4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003af6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003afa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8003afc:	2300      	movs	r3, #0
 8003afe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003b00:	2301      	movs	r3, #1
 8003b02:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003b04:	2302      	movs	r3, #2
 8003b06:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003b08:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b0c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003b0e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8003b12:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003b14:	f107 0318 	add.w	r3, r7, #24
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f7fd fff1 	bl	8001b00 <HAL_RCC_OscConfig>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d001      	beq.n	8003b28 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8003b24:	f000 f95c 	bl	8003de0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003b28:	230f      	movs	r3, #15
 8003b2a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003b2c:	2302      	movs	r3, #2
 8003b2e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003b30:	2300      	movs	r3, #0
 8003b32:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003b34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b38:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003b3e:	1d3b      	adds	r3, r7, #4
 8003b40:	2102      	movs	r1, #2
 8003b42:	4618      	mov	r0, r3
 8003b44:	f7fe fa5e 	bl	8002004 <HAL_RCC_ClockConfig>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d001      	beq.n	8003b52 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8003b4e:	f000 f947 	bl	8003de0 <Error_Handler>
  }
}
 8003b52:	bf00      	nop
 8003b54:	3740      	adds	r7, #64	; 0x40
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
	...

08003b5c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003b60:	4b12      	ldr	r3, [pc, #72]	; (8003bac <MX_I2C1_Init+0x50>)
 8003b62:	4a13      	ldr	r2, [pc, #76]	; (8003bb0 <MX_I2C1_Init+0x54>)
 8003b64:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003b66:	4b11      	ldr	r3, [pc, #68]	; (8003bac <MX_I2C1_Init+0x50>)
 8003b68:	4a12      	ldr	r2, [pc, #72]	; (8003bb4 <MX_I2C1_Init+0x58>)
 8003b6a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003b6c:	4b0f      	ldr	r3, [pc, #60]	; (8003bac <MX_I2C1_Init+0x50>)
 8003b6e:	2200      	movs	r2, #0
 8003b70:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003b72:	4b0e      	ldr	r3, [pc, #56]	; (8003bac <MX_I2C1_Init+0x50>)
 8003b74:	2200      	movs	r2, #0
 8003b76:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003b78:	4b0c      	ldr	r3, [pc, #48]	; (8003bac <MX_I2C1_Init+0x50>)
 8003b7a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003b7e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003b80:	4b0a      	ldr	r3, [pc, #40]	; (8003bac <MX_I2C1_Init+0x50>)
 8003b82:	2200      	movs	r2, #0
 8003b84:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003b86:	4b09      	ldr	r3, [pc, #36]	; (8003bac <MX_I2C1_Init+0x50>)
 8003b88:	2200      	movs	r2, #0
 8003b8a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003b8c:	4b07      	ldr	r3, [pc, #28]	; (8003bac <MX_I2C1_Init+0x50>)
 8003b8e:	2200      	movs	r2, #0
 8003b90:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003b92:	4b06      	ldr	r3, [pc, #24]	; (8003bac <MX_I2C1_Init+0x50>)
 8003b94:	2200      	movs	r2, #0
 8003b96:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003b98:	4804      	ldr	r0, [pc, #16]	; (8003bac <MX_I2C1_Init+0x50>)
 8003b9a:	f7fd fb15 	bl	80011c8 <HAL_I2C_Init>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d001      	beq.n	8003ba8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003ba4:	f000 f91c 	bl	8003de0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003ba8:	bf00      	nop
 8003baa:	bd80      	pop	{r7, pc}
 8003bac:	200000a8 	.word	0x200000a8
 8003bb0:	40005400 	.word	0x40005400
 8003bb4:	000186a0 	.word	0x000186a0

08003bb8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b086      	sub	sp, #24
 8003bbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003bbe:	f107 0308 	add.w	r3, r7, #8
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	601a      	str	r2, [r3, #0]
 8003bc6:	605a      	str	r2, [r3, #4]
 8003bc8:	609a      	str	r2, [r3, #8]
 8003bca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003bcc:	463b      	mov	r3, r7
 8003bce:	2200      	movs	r2, #0
 8003bd0:	601a      	str	r2, [r3, #0]
 8003bd2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003bd4:	4b1e      	ldr	r3, [pc, #120]	; (8003c50 <MX_TIM1_Init+0x98>)
 8003bd6:	4a1f      	ldr	r2, [pc, #124]	; (8003c54 <MX_TIM1_Init+0x9c>)
 8003bd8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8003bda:	4b1d      	ldr	r3, [pc, #116]	; (8003c50 <MX_TIM1_Init+0x98>)
 8003bdc:	2247      	movs	r2, #71	; 0x47
 8003bde:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003be0:	4b1b      	ldr	r3, [pc, #108]	; (8003c50 <MX_TIM1_Init+0x98>)
 8003be2:	2200      	movs	r2, #0
 8003be4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65534;
 8003be6:	4b1a      	ldr	r3, [pc, #104]	; (8003c50 <MX_TIM1_Init+0x98>)
 8003be8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003bec:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003bee:	4b18      	ldr	r3, [pc, #96]	; (8003c50 <MX_TIM1_Init+0x98>)
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003bf4:	4b16      	ldr	r3, [pc, #88]	; (8003c50 <MX_TIM1_Init+0x98>)
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003bfa:	4b15      	ldr	r3, [pc, #84]	; (8003c50 <MX_TIM1_Init+0x98>)
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003c00:	4813      	ldr	r0, [pc, #76]	; (8003c50 <MX_TIM1_Init+0x98>)
 8003c02:	f7fe fb8d 	bl	8002320 <HAL_TIM_Base_Init>
 8003c06:	4603      	mov	r3, r0
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d001      	beq.n	8003c10 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8003c0c:	f000 f8e8 	bl	8003de0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003c10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c14:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003c16:	f107 0308 	add.w	r3, r7, #8
 8003c1a:	4619      	mov	r1, r3
 8003c1c:	480c      	ldr	r0, [pc, #48]	; (8003c50 <MX_TIM1_Init+0x98>)
 8003c1e:	f7fe fc19 	bl	8002454 <HAL_TIM_ConfigClockSource>
 8003c22:	4603      	mov	r3, r0
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d001      	beq.n	8003c2c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8003c28:	f000 f8da 	bl	8003de0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c30:	2300      	movs	r3, #0
 8003c32:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003c34:	463b      	mov	r3, r7
 8003c36:	4619      	mov	r1, r3
 8003c38:	4805      	ldr	r0, [pc, #20]	; (8003c50 <MX_TIM1_Init+0x98>)
 8003c3a:	f7fe fdcb 	bl	80027d4 <HAL_TIMEx_MasterConfigSynchronization>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d001      	beq.n	8003c48 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8003c44:	f000 f8cc 	bl	8003de0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003c48:	bf00      	nop
 8003c4a:	3718      	adds	r7, #24
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}
 8003c50:	200000fc 	.word	0x200000fc
 8003c54:	40012c00 	.word	0x40012c00

08003c58 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b086      	sub	sp, #24
 8003c5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003c5e:	f107 0308 	add.w	r3, r7, #8
 8003c62:	2200      	movs	r2, #0
 8003c64:	601a      	str	r2, [r3, #0]
 8003c66:	605a      	str	r2, [r3, #4]
 8003c68:	609a      	str	r2, [r3, #8]
 8003c6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c6c:	463b      	mov	r3, r7
 8003c6e:	2200      	movs	r2, #0
 8003c70:	601a      	str	r2, [r3, #0]
 8003c72:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003c74:	4b1d      	ldr	r3, [pc, #116]	; (8003cec <MX_TIM4_Init+0x94>)
 8003c76:	4a1e      	ldr	r2, [pc, #120]	; (8003cf0 <MX_TIM4_Init+0x98>)
 8003c78:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 8003c7a:	4b1c      	ldr	r3, [pc, #112]	; (8003cec <MX_TIM4_Init+0x94>)
 8003c7c:	2247      	movs	r2, #71	; 0x47
 8003c7e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c80:	4b1a      	ldr	r3, [pc, #104]	; (8003cec <MX_TIM4_Init+0x94>)
 8003c82:	2200      	movs	r2, #0
 8003c84:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65534;
 8003c86:	4b19      	ldr	r3, [pc, #100]	; (8003cec <MX_TIM4_Init+0x94>)
 8003c88:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003c8c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c8e:	4b17      	ldr	r3, [pc, #92]	; (8003cec <MX_TIM4_Init+0x94>)
 8003c90:	2200      	movs	r2, #0
 8003c92:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c94:	4b15      	ldr	r3, [pc, #84]	; (8003cec <MX_TIM4_Init+0x94>)
 8003c96:	2200      	movs	r2, #0
 8003c98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003c9a:	4814      	ldr	r0, [pc, #80]	; (8003cec <MX_TIM4_Init+0x94>)
 8003c9c:	f7fe fb40 	bl	8002320 <HAL_TIM_Base_Init>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d001      	beq.n	8003caa <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8003ca6:	f000 f89b 	bl	8003de0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003caa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003cae:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003cb0:	f107 0308 	add.w	r3, r7, #8
 8003cb4:	4619      	mov	r1, r3
 8003cb6:	480d      	ldr	r0, [pc, #52]	; (8003cec <MX_TIM4_Init+0x94>)
 8003cb8:	f7fe fbcc 	bl	8002454 <HAL_TIM_ConfigClockSource>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d001      	beq.n	8003cc6 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8003cc2:	f000 f88d 	bl	8003de0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003cce:	463b      	mov	r3, r7
 8003cd0:	4619      	mov	r1, r3
 8003cd2:	4806      	ldr	r0, [pc, #24]	; (8003cec <MX_TIM4_Init+0x94>)
 8003cd4:	f7fe fd7e 	bl	80027d4 <HAL_TIMEx_MasterConfigSynchronization>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d001      	beq.n	8003ce2 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8003cde:	f000 f87f 	bl	8003de0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003ce2:	bf00      	nop
 8003ce4:	3718      	adds	r7, #24
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	bf00      	nop
 8003cec:	20000144 	.word	0x20000144
 8003cf0:	40000800 	.word	0x40000800

08003cf4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003cf8:	4b11      	ldr	r3, [pc, #68]	; (8003d40 <MX_USART1_UART_Init+0x4c>)
 8003cfa:	4a12      	ldr	r2, [pc, #72]	; (8003d44 <MX_USART1_UART_Init+0x50>)
 8003cfc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003cfe:	4b10      	ldr	r3, [pc, #64]	; (8003d40 <MX_USART1_UART_Init+0x4c>)
 8003d00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003d04:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003d06:	4b0e      	ldr	r3, [pc, #56]	; (8003d40 <MX_USART1_UART_Init+0x4c>)
 8003d08:	2200      	movs	r2, #0
 8003d0a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003d0c:	4b0c      	ldr	r3, [pc, #48]	; (8003d40 <MX_USART1_UART_Init+0x4c>)
 8003d0e:	2200      	movs	r2, #0
 8003d10:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003d12:	4b0b      	ldr	r3, [pc, #44]	; (8003d40 <MX_USART1_UART_Init+0x4c>)
 8003d14:	2200      	movs	r2, #0
 8003d16:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003d18:	4b09      	ldr	r3, [pc, #36]	; (8003d40 <MX_USART1_UART_Init+0x4c>)
 8003d1a:	220c      	movs	r2, #12
 8003d1c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003d1e:	4b08      	ldr	r3, [pc, #32]	; (8003d40 <MX_USART1_UART_Init+0x4c>)
 8003d20:	2200      	movs	r2, #0
 8003d22:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003d24:	4b06      	ldr	r3, [pc, #24]	; (8003d40 <MX_USART1_UART_Init+0x4c>)
 8003d26:	2200      	movs	r2, #0
 8003d28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003d2a:	4805      	ldr	r0, [pc, #20]	; (8003d40 <MX_USART1_UART_Init+0x4c>)
 8003d2c:	f7fe fdb0 	bl	8002890 <HAL_UART_Init>
 8003d30:	4603      	mov	r3, r0
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d001      	beq.n	8003d3a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003d36:	f000 f853 	bl	8003de0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003d3a:	bf00      	nop
 8003d3c:	bd80      	pop	{r7, pc}
 8003d3e:	bf00      	nop
 8003d40:	2000018c 	.word	0x2000018c
 8003d44:	40013800 	.word	0x40013800

08003d48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b088      	sub	sp, #32
 8003d4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d4e:	f107 0310 	add.w	r3, r7, #16
 8003d52:	2200      	movs	r2, #0
 8003d54:	601a      	str	r2, [r3, #0]
 8003d56:	605a      	str	r2, [r3, #4]
 8003d58:	609a      	str	r2, [r3, #8]
 8003d5a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003d5c:	4b1e      	ldr	r3, [pc, #120]	; (8003dd8 <MX_GPIO_Init+0x90>)
 8003d5e:	699b      	ldr	r3, [r3, #24]
 8003d60:	4a1d      	ldr	r2, [pc, #116]	; (8003dd8 <MX_GPIO_Init+0x90>)
 8003d62:	f043 0320 	orr.w	r3, r3, #32
 8003d66:	6193      	str	r3, [r2, #24]
 8003d68:	4b1b      	ldr	r3, [pc, #108]	; (8003dd8 <MX_GPIO_Init+0x90>)
 8003d6a:	699b      	ldr	r3, [r3, #24]
 8003d6c:	f003 0320 	and.w	r3, r3, #32
 8003d70:	60fb      	str	r3, [r7, #12]
 8003d72:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d74:	4b18      	ldr	r3, [pc, #96]	; (8003dd8 <MX_GPIO_Init+0x90>)
 8003d76:	699b      	ldr	r3, [r3, #24]
 8003d78:	4a17      	ldr	r2, [pc, #92]	; (8003dd8 <MX_GPIO_Init+0x90>)
 8003d7a:	f043 0308 	orr.w	r3, r3, #8
 8003d7e:	6193      	str	r3, [r2, #24]
 8003d80:	4b15      	ldr	r3, [pc, #84]	; (8003dd8 <MX_GPIO_Init+0x90>)
 8003d82:	699b      	ldr	r3, [r3, #24]
 8003d84:	f003 0308 	and.w	r3, r3, #8
 8003d88:	60bb      	str	r3, [r7, #8]
 8003d8a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d8c:	4b12      	ldr	r3, [pc, #72]	; (8003dd8 <MX_GPIO_Init+0x90>)
 8003d8e:	699b      	ldr	r3, [r3, #24]
 8003d90:	4a11      	ldr	r2, [pc, #68]	; (8003dd8 <MX_GPIO_Init+0x90>)
 8003d92:	f043 0304 	orr.w	r3, r3, #4
 8003d96:	6193      	str	r3, [r2, #24]
 8003d98:	4b0f      	ldr	r3, [pc, #60]	; (8003dd8 <MX_GPIO_Init+0x90>)
 8003d9a:	699b      	ldr	r3, [r3, #24]
 8003d9c:	f003 0304 	and.w	r3, r3, #4
 8003da0:	607b      	str	r3, [r7, #4]
 8003da2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_RED_Pin|LED_YELLOW_Pin|DHT11_PIN_Pin, GPIO_PIN_RESET);
 8003da4:	2200      	movs	r2, #0
 8003da6:	f240 2103 	movw	r1, #515	; 0x203
 8003daa:	480c      	ldr	r0, [pc, #48]	; (8003ddc <MX_GPIO_Init+0x94>)
 8003dac:	f7fd f9f3 	bl	8001196 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_RED_Pin LED_YELLOW_Pin DHT11_PIN_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_YELLOW_Pin|DHT11_PIN_Pin;
 8003db0:	f240 2303 	movw	r3, #515	; 0x203
 8003db4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003db6:	2301      	movs	r3, #1
 8003db8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dbe:	2302      	movs	r3, #2
 8003dc0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003dc2:	f107 0310 	add.w	r3, r7, #16
 8003dc6:	4619      	mov	r1, r3
 8003dc8:	4804      	ldr	r0, [pc, #16]	; (8003ddc <MX_GPIO_Init+0x94>)
 8003dca:	f7fd f849 	bl	8000e60 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003dce:	bf00      	nop
 8003dd0:	3720      	adds	r7, #32
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	bf00      	nop
 8003dd8:	40021000 	.word	0x40021000
 8003ddc:	40010c00 	.word	0x40010c00

08003de0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003de0:	b480      	push	{r7}
 8003de2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003de4:	b672      	cpsid	i
}
 8003de6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003de8:	e7fe      	b.n	8003de8 <Error_Handler+0x8>
	...

08003dec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b085      	sub	sp, #20
 8003df0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003df2:	4b15      	ldr	r3, [pc, #84]	; (8003e48 <HAL_MspInit+0x5c>)
 8003df4:	699b      	ldr	r3, [r3, #24]
 8003df6:	4a14      	ldr	r2, [pc, #80]	; (8003e48 <HAL_MspInit+0x5c>)
 8003df8:	f043 0301 	orr.w	r3, r3, #1
 8003dfc:	6193      	str	r3, [r2, #24]
 8003dfe:	4b12      	ldr	r3, [pc, #72]	; (8003e48 <HAL_MspInit+0x5c>)
 8003e00:	699b      	ldr	r3, [r3, #24]
 8003e02:	f003 0301 	and.w	r3, r3, #1
 8003e06:	60bb      	str	r3, [r7, #8]
 8003e08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003e0a:	4b0f      	ldr	r3, [pc, #60]	; (8003e48 <HAL_MspInit+0x5c>)
 8003e0c:	69db      	ldr	r3, [r3, #28]
 8003e0e:	4a0e      	ldr	r2, [pc, #56]	; (8003e48 <HAL_MspInit+0x5c>)
 8003e10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e14:	61d3      	str	r3, [r2, #28]
 8003e16:	4b0c      	ldr	r3, [pc, #48]	; (8003e48 <HAL_MspInit+0x5c>)
 8003e18:	69db      	ldr	r3, [r3, #28]
 8003e1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e1e:	607b      	str	r3, [r7, #4]
 8003e20:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003e22:	4b0a      	ldr	r3, [pc, #40]	; (8003e4c <HAL_MspInit+0x60>)
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	60fb      	str	r3, [r7, #12]
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003e2e:	60fb      	str	r3, [r7, #12]
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003e36:	60fb      	str	r3, [r7, #12]
 8003e38:	4a04      	ldr	r2, [pc, #16]	; (8003e4c <HAL_MspInit+0x60>)
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003e3e:	bf00      	nop
 8003e40:	3714      	adds	r7, #20
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bc80      	pop	{r7}
 8003e46:	4770      	bx	lr
 8003e48:	40021000 	.word	0x40021000
 8003e4c:	40010000 	.word	0x40010000

08003e50 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b088      	sub	sp, #32
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e58:	f107 0310 	add.w	r3, r7, #16
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	601a      	str	r2, [r3, #0]
 8003e60:	605a      	str	r2, [r3, #4]
 8003e62:	609a      	str	r2, [r3, #8]
 8003e64:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a15      	ldr	r2, [pc, #84]	; (8003ec0 <HAL_I2C_MspInit+0x70>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d123      	bne.n	8003eb8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e70:	4b14      	ldr	r3, [pc, #80]	; (8003ec4 <HAL_I2C_MspInit+0x74>)
 8003e72:	699b      	ldr	r3, [r3, #24]
 8003e74:	4a13      	ldr	r2, [pc, #76]	; (8003ec4 <HAL_I2C_MspInit+0x74>)
 8003e76:	f043 0308 	orr.w	r3, r3, #8
 8003e7a:	6193      	str	r3, [r2, #24]
 8003e7c:	4b11      	ldr	r3, [pc, #68]	; (8003ec4 <HAL_I2C_MspInit+0x74>)
 8003e7e:	699b      	ldr	r3, [r3, #24]
 8003e80:	f003 0308 	and.w	r3, r3, #8
 8003e84:	60fb      	str	r3, [r7, #12]
 8003e86:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003e88:	23c0      	movs	r3, #192	; 0xc0
 8003e8a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003e8c:	2312      	movs	r3, #18
 8003e8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003e90:	2303      	movs	r3, #3
 8003e92:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e94:	f107 0310 	add.w	r3, r7, #16
 8003e98:	4619      	mov	r1, r3
 8003e9a:	480b      	ldr	r0, [pc, #44]	; (8003ec8 <HAL_I2C_MspInit+0x78>)
 8003e9c:	f7fc ffe0 	bl	8000e60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003ea0:	4b08      	ldr	r3, [pc, #32]	; (8003ec4 <HAL_I2C_MspInit+0x74>)
 8003ea2:	69db      	ldr	r3, [r3, #28]
 8003ea4:	4a07      	ldr	r2, [pc, #28]	; (8003ec4 <HAL_I2C_MspInit+0x74>)
 8003ea6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003eaa:	61d3      	str	r3, [r2, #28]
 8003eac:	4b05      	ldr	r3, [pc, #20]	; (8003ec4 <HAL_I2C_MspInit+0x74>)
 8003eae:	69db      	ldr	r3, [r3, #28]
 8003eb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003eb4:	60bb      	str	r3, [r7, #8]
 8003eb6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003eb8:	bf00      	nop
 8003eba:	3720      	adds	r7, #32
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}
 8003ec0:	40005400 	.word	0x40005400
 8003ec4:	40021000 	.word	0x40021000
 8003ec8:	40010c00 	.word	0x40010c00

08003ecc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b085      	sub	sp, #20
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a12      	ldr	r2, [pc, #72]	; (8003f24 <HAL_TIM_Base_MspInit+0x58>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d10c      	bne.n	8003ef8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003ede:	4b12      	ldr	r3, [pc, #72]	; (8003f28 <HAL_TIM_Base_MspInit+0x5c>)
 8003ee0:	699b      	ldr	r3, [r3, #24]
 8003ee2:	4a11      	ldr	r2, [pc, #68]	; (8003f28 <HAL_TIM_Base_MspInit+0x5c>)
 8003ee4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003ee8:	6193      	str	r3, [r2, #24]
 8003eea:	4b0f      	ldr	r3, [pc, #60]	; (8003f28 <HAL_TIM_Base_MspInit+0x5c>)
 8003eec:	699b      	ldr	r3, [r3, #24]
 8003eee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ef2:	60fb      	str	r3, [r7, #12]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003ef6:	e010      	b.n	8003f1a <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM4)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a0b      	ldr	r2, [pc, #44]	; (8003f2c <HAL_TIM_Base_MspInit+0x60>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d10b      	bne.n	8003f1a <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003f02:	4b09      	ldr	r3, [pc, #36]	; (8003f28 <HAL_TIM_Base_MspInit+0x5c>)
 8003f04:	69db      	ldr	r3, [r3, #28]
 8003f06:	4a08      	ldr	r2, [pc, #32]	; (8003f28 <HAL_TIM_Base_MspInit+0x5c>)
 8003f08:	f043 0304 	orr.w	r3, r3, #4
 8003f0c:	61d3      	str	r3, [r2, #28]
 8003f0e:	4b06      	ldr	r3, [pc, #24]	; (8003f28 <HAL_TIM_Base_MspInit+0x5c>)
 8003f10:	69db      	ldr	r3, [r3, #28]
 8003f12:	f003 0304 	and.w	r3, r3, #4
 8003f16:	60bb      	str	r3, [r7, #8]
 8003f18:	68bb      	ldr	r3, [r7, #8]
}
 8003f1a:	bf00      	nop
 8003f1c:	3714      	adds	r7, #20
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bc80      	pop	{r7}
 8003f22:	4770      	bx	lr
 8003f24:	40012c00 	.word	0x40012c00
 8003f28:	40021000 	.word	0x40021000
 8003f2c:	40000800 	.word	0x40000800

08003f30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b088      	sub	sp, #32
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f38:	f107 0310 	add.w	r3, r7, #16
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	601a      	str	r2, [r3, #0]
 8003f40:	605a      	str	r2, [r3, #4]
 8003f42:	609a      	str	r2, [r3, #8]
 8003f44:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a20      	ldr	r2, [pc, #128]	; (8003fcc <HAL_UART_MspInit+0x9c>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d139      	bne.n	8003fc4 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003f50:	4b1f      	ldr	r3, [pc, #124]	; (8003fd0 <HAL_UART_MspInit+0xa0>)
 8003f52:	699b      	ldr	r3, [r3, #24]
 8003f54:	4a1e      	ldr	r2, [pc, #120]	; (8003fd0 <HAL_UART_MspInit+0xa0>)
 8003f56:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f5a:	6193      	str	r3, [r2, #24]
 8003f5c:	4b1c      	ldr	r3, [pc, #112]	; (8003fd0 <HAL_UART_MspInit+0xa0>)
 8003f5e:	699b      	ldr	r3, [r3, #24]
 8003f60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f64:	60fb      	str	r3, [r7, #12]
 8003f66:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f68:	4b19      	ldr	r3, [pc, #100]	; (8003fd0 <HAL_UART_MspInit+0xa0>)
 8003f6a:	699b      	ldr	r3, [r3, #24]
 8003f6c:	4a18      	ldr	r2, [pc, #96]	; (8003fd0 <HAL_UART_MspInit+0xa0>)
 8003f6e:	f043 0304 	orr.w	r3, r3, #4
 8003f72:	6193      	str	r3, [r2, #24]
 8003f74:	4b16      	ldr	r3, [pc, #88]	; (8003fd0 <HAL_UART_MspInit+0xa0>)
 8003f76:	699b      	ldr	r3, [r3, #24]
 8003f78:	f003 0304 	and.w	r3, r3, #4
 8003f7c:	60bb      	str	r3, [r7, #8]
 8003f7e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003f80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003f84:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f86:	2302      	movs	r3, #2
 8003f88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f8e:	f107 0310 	add.w	r3, r7, #16
 8003f92:	4619      	mov	r1, r3
 8003f94:	480f      	ldr	r0, [pc, #60]	; (8003fd4 <HAL_UART_MspInit+0xa4>)
 8003f96:	f7fc ff63 	bl	8000e60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003f9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f9e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fa8:	f107 0310 	add.w	r3, r7, #16
 8003fac:	4619      	mov	r1, r3
 8003fae:	4809      	ldr	r0, [pc, #36]	; (8003fd4 <HAL_UART_MspInit+0xa4>)
 8003fb0:	f7fc ff56 	bl	8000e60 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	2100      	movs	r1, #0
 8003fb8:	2025      	movs	r0, #37	; 0x25
 8003fba:	f7fc fe68 	bl	8000c8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003fbe:	2025      	movs	r0, #37	; 0x25
 8003fc0:	f7fc fe81 	bl	8000cc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003fc4:	bf00      	nop
 8003fc6:	3720      	adds	r7, #32
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}
 8003fcc:	40013800 	.word	0x40013800
 8003fd0:	40021000 	.word	0x40021000
 8003fd4:	40010800 	.word	0x40010800

08003fd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003fdc:	e7fe      	b.n	8003fdc <NMI_Handler+0x4>

08003fde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003fde:	b480      	push	{r7}
 8003fe0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003fe2:	e7fe      	b.n	8003fe2 <HardFault_Handler+0x4>

08003fe4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003fe8:	e7fe      	b.n	8003fe8 <MemManage_Handler+0x4>

08003fea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003fea:	b480      	push	{r7}
 8003fec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003fee:	e7fe      	b.n	8003fee <BusFault_Handler+0x4>

08003ff0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003ff4:	e7fe      	b.n	8003ff4 <UsageFault_Handler+0x4>

08003ff6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003ff6:	b480      	push	{r7}
 8003ff8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003ffa:	bf00      	nop
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bc80      	pop	{r7}
 8004000:	4770      	bx	lr

08004002 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004002:	b480      	push	{r7}
 8004004:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004006:	bf00      	nop
 8004008:	46bd      	mov	sp, r7
 800400a:	bc80      	pop	{r7}
 800400c:	4770      	bx	lr

0800400e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800400e:	b480      	push	{r7}
 8004010:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004012:	bf00      	nop
 8004014:	46bd      	mov	sp, r7
 8004016:	bc80      	pop	{r7}
 8004018:	4770      	bx	lr

0800401a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800401a:	b580      	push	{r7, lr}
 800401c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800401e:	f7fc fd1f 	bl	8000a60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004022:	bf00      	nop
 8004024:	bd80      	pop	{r7, pc}
	...

08004028 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	//Uart_isr (&huart1);

	/*Comment the uart bellow when regenerate code*/
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800402c:	4802      	ldr	r0, [pc, #8]	; (8004038 <USART1_IRQHandler+0x10>)
 800402e:	f7fe fc7f 	bl	8002930 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004032:	bf00      	nop
 8004034:	bd80      	pop	{r7, pc}
 8004036:	bf00      	nop
 8004038:	2000018c 	.word	0x2000018c

0800403c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b086      	sub	sp, #24
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004044:	4a14      	ldr	r2, [pc, #80]	; (8004098 <_sbrk+0x5c>)
 8004046:	4b15      	ldr	r3, [pc, #84]	; (800409c <_sbrk+0x60>)
 8004048:	1ad3      	subs	r3, r2, r3
 800404a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004050:	4b13      	ldr	r3, [pc, #76]	; (80040a0 <_sbrk+0x64>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d102      	bne.n	800405e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004058:	4b11      	ldr	r3, [pc, #68]	; (80040a0 <_sbrk+0x64>)
 800405a:	4a12      	ldr	r2, [pc, #72]	; (80040a4 <_sbrk+0x68>)
 800405c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800405e:	4b10      	ldr	r3, [pc, #64]	; (80040a0 <_sbrk+0x64>)
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4413      	add	r3, r2
 8004066:	693a      	ldr	r2, [r7, #16]
 8004068:	429a      	cmp	r2, r3
 800406a:	d207      	bcs.n	800407c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800406c:	f000 f848 	bl	8004100 <__errno>
 8004070:	4603      	mov	r3, r0
 8004072:	220c      	movs	r2, #12
 8004074:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004076:	f04f 33ff 	mov.w	r3, #4294967295
 800407a:	e009      	b.n	8004090 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800407c:	4b08      	ldr	r3, [pc, #32]	; (80040a0 <_sbrk+0x64>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004082:	4b07      	ldr	r3, [pc, #28]	; (80040a0 <_sbrk+0x64>)
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	4413      	add	r3, r2
 800408a:	4a05      	ldr	r2, [pc, #20]	; (80040a0 <_sbrk+0x64>)
 800408c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800408e:	68fb      	ldr	r3, [r7, #12]
}
 8004090:	4618      	mov	r0, r3
 8004092:	3718      	adds	r7, #24
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}
 8004098:	20005000 	.word	0x20005000
 800409c:	00000400 	.word	0x00000400
 80040a0:	200001ec 	.word	0x200001ec
 80040a4:	20000200 	.word	0x20000200

080040a8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80040a8:	b480      	push	{r7}
 80040aa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80040ac:	bf00      	nop
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bc80      	pop	{r7}
 80040b2:	4770      	bx	lr

080040b4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80040b4:	f7ff fff8 	bl	80040a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80040b8:	480b      	ldr	r0, [pc, #44]	; (80040e8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80040ba:	490c      	ldr	r1, [pc, #48]	; (80040ec <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80040bc:	4a0c      	ldr	r2, [pc, #48]	; (80040f0 <LoopFillZerobss+0x16>)
  movs r3, #0
 80040be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80040c0:	e002      	b.n	80040c8 <LoopCopyDataInit>

080040c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80040c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80040c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80040c6:	3304      	adds	r3, #4

080040c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80040c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80040ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80040cc:	d3f9      	bcc.n	80040c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80040ce:	4a09      	ldr	r2, [pc, #36]	; (80040f4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80040d0:	4c09      	ldr	r4, [pc, #36]	; (80040f8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80040d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80040d4:	e001      	b.n	80040da <LoopFillZerobss>

080040d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80040d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80040d8:	3204      	adds	r2, #4

080040da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80040da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80040dc:	d3fb      	bcc.n	80040d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80040de:	f000 f815 	bl	800410c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80040e2:	f7ff fc99 	bl	8003a18 <main>
  bx lr
 80040e6:	4770      	bx	lr
  ldr r0, =_sdata
 80040e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80040ec:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 80040f0:	08004ae0 	.word	0x08004ae0
  ldr r2, =_sbss
 80040f4:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80040f8:	20000200 	.word	0x20000200

080040fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80040fc:	e7fe      	b.n	80040fc <ADC1_2_IRQHandler>
	...

08004100 <__errno>:
 8004100:	4b01      	ldr	r3, [pc, #4]	; (8004108 <__errno+0x8>)
 8004102:	6818      	ldr	r0, [r3, #0]
 8004104:	4770      	bx	lr
 8004106:	bf00      	nop
 8004108:	2000001c 	.word	0x2000001c

0800410c <__libc_init_array>:
 800410c:	b570      	push	{r4, r5, r6, lr}
 800410e:	2600      	movs	r6, #0
 8004110:	4d0c      	ldr	r5, [pc, #48]	; (8004144 <__libc_init_array+0x38>)
 8004112:	4c0d      	ldr	r4, [pc, #52]	; (8004148 <__libc_init_array+0x3c>)
 8004114:	1b64      	subs	r4, r4, r5
 8004116:	10a4      	asrs	r4, r4, #2
 8004118:	42a6      	cmp	r6, r4
 800411a:	d109      	bne.n	8004130 <__libc_init_array+0x24>
 800411c:	f000 fc9c 	bl	8004a58 <_init>
 8004120:	2600      	movs	r6, #0
 8004122:	4d0a      	ldr	r5, [pc, #40]	; (800414c <__libc_init_array+0x40>)
 8004124:	4c0a      	ldr	r4, [pc, #40]	; (8004150 <__libc_init_array+0x44>)
 8004126:	1b64      	subs	r4, r4, r5
 8004128:	10a4      	asrs	r4, r4, #2
 800412a:	42a6      	cmp	r6, r4
 800412c:	d105      	bne.n	800413a <__libc_init_array+0x2e>
 800412e:	bd70      	pop	{r4, r5, r6, pc}
 8004130:	f855 3b04 	ldr.w	r3, [r5], #4
 8004134:	4798      	blx	r3
 8004136:	3601      	adds	r6, #1
 8004138:	e7ee      	b.n	8004118 <__libc_init_array+0xc>
 800413a:	f855 3b04 	ldr.w	r3, [r5], #4
 800413e:	4798      	blx	r3
 8004140:	3601      	adds	r6, #1
 8004142:	e7f2      	b.n	800412a <__libc_init_array+0x1e>
 8004144:	08004ad8 	.word	0x08004ad8
 8004148:	08004ad8 	.word	0x08004ad8
 800414c:	08004ad8 	.word	0x08004ad8
 8004150:	08004adc 	.word	0x08004adc

08004154 <memset>:
 8004154:	4603      	mov	r3, r0
 8004156:	4402      	add	r2, r0
 8004158:	4293      	cmp	r3, r2
 800415a:	d100      	bne.n	800415e <memset+0xa>
 800415c:	4770      	bx	lr
 800415e:	f803 1b01 	strb.w	r1, [r3], #1
 8004162:	e7f9      	b.n	8004158 <memset+0x4>

08004164 <siprintf>:
 8004164:	b40e      	push	{r1, r2, r3}
 8004166:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800416a:	b500      	push	{lr}
 800416c:	b09c      	sub	sp, #112	; 0x70
 800416e:	ab1d      	add	r3, sp, #116	; 0x74
 8004170:	9002      	str	r0, [sp, #8]
 8004172:	9006      	str	r0, [sp, #24]
 8004174:	9107      	str	r1, [sp, #28]
 8004176:	9104      	str	r1, [sp, #16]
 8004178:	4808      	ldr	r0, [pc, #32]	; (800419c <siprintf+0x38>)
 800417a:	4909      	ldr	r1, [pc, #36]	; (80041a0 <siprintf+0x3c>)
 800417c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004180:	9105      	str	r1, [sp, #20]
 8004182:	6800      	ldr	r0, [r0, #0]
 8004184:	a902      	add	r1, sp, #8
 8004186:	9301      	str	r3, [sp, #4]
 8004188:	f000 f868 	bl	800425c <_svfiprintf_r>
 800418c:	2200      	movs	r2, #0
 800418e:	9b02      	ldr	r3, [sp, #8]
 8004190:	701a      	strb	r2, [r3, #0]
 8004192:	b01c      	add	sp, #112	; 0x70
 8004194:	f85d eb04 	ldr.w	lr, [sp], #4
 8004198:	b003      	add	sp, #12
 800419a:	4770      	bx	lr
 800419c:	2000001c 	.word	0x2000001c
 80041a0:	ffff0208 	.word	0xffff0208

080041a4 <__ssputs_r>:
 80041a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041a8:	688e      	ldr	r6, [r1, #8]
 80041aa:	4682      	mov	sl, r0
 80041ac:	429e      	cmp	r6, r3
 80041ae:	460c      	mov	r4, r1
 80041b0:	4690      	mov	r8, r2
 80041b2:	461f      	mov	r7, r3
 80041b4:	d838      	bhi.n	8004228 <__ssputs_r+0x84>
 80041b6:	898a      	ldrh	r2, [r1, #12]
 80041b8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80041bc:	d032      	beq.n	8004224 <__ssputs_r+0x80>
 80041be:	6825      	ldr	r5, [r4, #0]
 80041c0:	6909      	ldr	r1, [r1, #16]
 80041c2:	3301      	adds	r3, #1
 80041c4:	eba5 0901 	sub.w	r9, r5, r1
 80041c8:	6965      	ldr	r5, [r4, #20]
 80041ca:	444b      	add	r3, r9
 80041cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80041d0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80041d4:	106d      	asrs	r5, r5, #1
 80041d6:	429d      	cmp	r5, r3
 80041d8:	bf38      	it	cc
 80041da:	461d      	movcc	r5, r3
 80041dc:	0553      	lsls	r3, r2, #21
 80041de:	d531      	bpl.n	8004244 <__ssputs_r+0xa0>
 80041e0:	4629      	mov	r1, r5
 80041e2:	f000 fb6f 	bl	80048c4 <_malloc_r>
 80041e6:	4606      	mov	r6, r0
 80041e8:	b950      	cbnz	r0, 8004200 <__ssputs_r+0x5c>
 80041ea:	230c      	movs	r3, #12
 80041ec:	f04f 30ff 	mov.w	r0, #4294967295
 80041f0:	f8ca 3000 	str.w	r3, [sl]
 80041f4:	89a3      	ldrh	r3, [r4, #12]
 80041f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041fa:	81a3      	strh	r3, [r4, #12]
 80041fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004200:	464a      	mov	r2, r9
 8004202:	6921      	ldr	r1, [r4, #16]
 8004204:	f000 face 	bl	80047a4 <memcpy>
 8004208:	89a3      	ldrh	r3, [r4, #12]
 800420a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800420e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004212:	81a3      	strh	r3, [r4, #12]
 8004214:	6126      	str	r6, [r4, #16]
 8004216:	444e      	add	r6, r9
 8004218:	6026      	str	r6, [r4, #0]
 800421a:	463e      	mov	r6, r7
 800421c:	6165      	str	r5, [r4, #20]
 800421e:	eba5 0509 	sub.w	r5, r5, r9
 8004222:	60a5      	str	r5, [r4, #8]
 8004224:	42be      	cmp	r6, r7
 8004226:	d900      	bls.n	800422a <__ssputs_r+0x86>
 8004228:	463e      	mov	r6, r7
 800422a:	4632      	mov	r2, r6
 800422c:	4641      	mov	r1, r8
 800422e:	6820      	ldr	r0, [r4, #0]
 8004230:	f000 fac6 	bl	80047c0 <memmove>
 8004234:	68a3      	ldr	r3, [r4, #8]
 8004236:	2000      	movs	r0, #0
 8004238:	1b9b      	subs	r3, r3, r6
 800423a:	60a3      	str	r3, [r4, #8]
 800423c:	6823      	ldr	r3, [r4, #0]
 800423e:	4433      	add	r3, r6
 8004240:	6023      	str	r3, [r4, #0]
 8004242:	e7db      	b.n	80041fc <__ssputs_r+0x58>
 8004244:	462a      	mov	r2, r5
 8004246:	f000 fbb1 	bl	80049ac <_realloc_r>
 800424a:	4606      	mov	r6, r0
 800424c:	2800      	cmp	r0, #0
 800424e:	d1e1      	bne.n	8004214 <__ssputs_r+0x70>
 8004250:	4650      	mov	r0, sl
 8004252:	6921      	ldr	r1, [r4, #16]
 8004254:	f000 face 	bl	80047f4 <_free_r>
 8004258:	e7c7      	b.n	80041ea <__ssputs_r+0x46>
	...

0800425c <_svfiprintf_r>:
 800425c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004260:	4698      	mov	r8, r3
 8004262:	898b      	ldrh	r3, [r1, #12]
 8004264:	4607      	mov	r7, r0
 8004266:	061b      	lsls	r3, r3, #24
 8004268:	460d      	mov	r5, r1
 800426a:	4614      	mov	r4, r2
 800426c:	b09d      	sub	sp, #116	; 0x74
 800426e:	d50e      	bpl.n	800428e <_svfiprintf_r+0x32>
 8004270:	690b      	ldr	r3, [r1, #16]
 8004272:	b963      	cbnz	r3, 800428e <_svfiprintf_r+0x32>
 8004274:	2140      	movs	r1, #64	; 0x40
 8004276:	f000 fb25 	bl	80048c4 <_malloc_r>
 800427a:	6028      	str	r0, [r5, #0]
 800427c:	6128      	str	r0, [r5, #16]
 800427e:	b920      	cbnz	r0, 800428a <_svfiprintf_r+0x2e>
 8004280:	230c      	movs	r3, #12
 8004282:	603b      	str	r3, [r7, #0]
 8004284:	f04f 30ff 	mov.w	r0, #4294967295
 8004288:	e0d1      	b.n	800442e <_svfiprintf_r+0x1d2>
 800428a:	2340      	movs	r3, #64	; 0x40
 800428c:	616b      	str	r3, [r5, #20]
 800428e:	2300      	movs	r3, #0
 8004290:	9309      	str	r3, [sp, #36]	; 0x24
 8004292:	2320      	movs	r3, #32
 8004294:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004298:	2330      	movs	r3, #48	; 0x30
 800429a:	f04f 0901 	mov.w	r9, #1
 800429e:	f8cd 800c 	str.w	r8, [sp, #12]
 80042a2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004448 <_svfiprintf_r+0x1ec>
 80042a6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80042aa:	4623      	mov	r3, r4
 80042ac:	469a      	mov	sl, r3
 80042ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80042b2:	b10a      	cbz	r2, 80042b8 <_svfiprintf_r+0x5c>
 80042b4:	2a25      	cmp	r2, #37	; 0x25
 80042b6:	d1f9      	bne.n	80042ac <_svfiprintf_r+0x50>
 80042b8:	ebba 0b04 	subs.w	fp, sl, r4
 80042bc:	d00b      	beq.n	80042d6 <_svfiprintf_r+0x7a>
 80042be:	465b      	mov	r3, fp
 80042c0:	4622      	mov	r2, r4
 80042c2:	4629      	mov	r1, r5
 80042c4:	4638      	mov	r0, r7
 80042c6:	f7ff ff6d 	bl	80041a4 <__ssputs_r>
 80042ca:	3001      	adds	r0, #1
 80042cc:	f000 80aa 	beq.w	8004424 <_svfiprintf_r+0x1c8>
 80042d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80042d2:	445a      	add	r2, fp
 80042d4:	9209      	str	r2, [sp, #36]	; 0x24
 80042d6:	f89a 3000 	ldrb.w	r3, [sl]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	f000 80a2 	beq.w	8004424 <_svfiprintf_r+0x1c8>
 80042e0:	2300      	movs	r3, #0
 80042e2:	f04f 32ff 	mov.w	r2, #4294967295
 80042e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80042ea:	f10a 0a01 	add.w	sl, sl, #1
 80042ee:	9304      	str	r3, [sp, #16]
 80042f0:	9307      	str	r3, [sp, #28]
 80042f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80042f6:	931a      	str	r3, [sp, #104]	; 0x68
 80042f8:	4654      	mov	r4, sl
 80042fa:	2205      	movs	r2, #5
 80042fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004300:	4851      	ldr	r0, [pc, #324]	; (8004448 <_svfiprintf_r+0x1ec>)
 8004302:	f000 fa41 	bl	8004788 <memchr>
 8004306:	9a04      	ldr	r2, [sp, #16]
 8004308:	b9d8      	cbnz	r0, 8004342 <_svfiprintf_r+0xe6>
 800430a:	06d0      	lsls	r0, r2, #27
 800430c:	bf44      	itt	mi
 800430e:	2320      	movmi	r3, #32
 8004310:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004314:	0711      	lsls	r1, r2, #28
 8004316:	bf44      	itt	mi
 8004318:	232b      	movmi	r3, #43	; 0x2b
 800431a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800431e:	f89a 3000 	ldrb.w	r3, [sl]
 8004322:	2b2a      	cmp	r3, #42	; 0x2a
 8004324:	d015      	beq.n	8004352 <_svfiprintf_r+0xf6>
 8004326:	4654      	mov	r4, sl
 8004328:	2000      	movs	r0, #0
 800432a:	f04f 0c0a 	mov.w	ip, #10
 800432e:	9a07      	ldr	r2, [sp, #28]
 8004330:	4621      	mov	r1, r4
 8004332:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004336:	3b30      	subs	r3, #48	; 0x30
 8004338:	2b09      	cmp	r3, #9
 800433a:	d94e      	bls.n	80043da <_svfiprintf_r+0x17e>
 800433c:	b1b0      	cbz	r0, 800436c <_svfiprintf_r+0x110>
 800433e:	9207      	str	r2, [sp, #28]
 8004340:	e014      	b.n	800436c <_svfiprintf_r+0x110>
 8004342:	eba0 0308 	sub.w	r3, r0, r8
 8004346:	fa09 f303 	lsl.w	r3, r9, r3
 800434a:	4313      	orrs	r3, r2
 800434c:	46a2      	mov	sl, r4
 800434e:	9304      	str	r3, [sp, #16]
 8004350:	e7d2      	b.n	80042f8 <_svfiprintf_r+0x9c>
 8004352:	9b03      	ldr	r3, [sp, #12]
 8004354:	1d19      	adds	r1, r3, #4
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	9103      	str	r1, [sp, #12]
 800435a:	2b00      	cmp	r3, #0
 800435c:	bfbb      	ittet	lt
 800435e:	425b      	neglt	r3, r3
 8004360:	f042 0202 	orrlt.w	r2, r2, #2
 8004364:	9307      	strge	r3, [sp, #28]
 8004366:	9307      	strlt	r3, [sp, #28]
 8004368:	bfb8      	it	lt
 800436a:	9204      	strlt	r2, [sp, #16]
 800436c:	7823      	ldrb	r3, [r4, #0]
 800436e:	2b2e      	cmp	r3, #46	; 0x2e
 8004370:	d10c      	bne.n	800438c <_svfiprintf_r+0x130>
 8004372:	7863      	ldrb	r3, [r4, #1]
 8004374:	2b2a      	cmp	r3, #42	; 0x2a
 8004376:	d135      	bne.n	80043e4 <_svfiprintf_r+0x188>
 8004378:	9b03      	ldr	r3, [sp, #12]
 800437a:	3402      	adds	r4, #2
 800437c:	1d1a      	adds	r2, r3, #4
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	9203      	str	r2, [sp, #12]
 8004382:	2b00      	cmp	r3, #0
 8004384:	bfb8      	it	lt
 8004386:	f04f 33ff 	movlt.w	r3, #4294967295
 800438a:	9305      	str	r3, [sp, #20]
 800438c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800444c <_svfiprintf_r+0x1f0>
 8004390:	2203      	movs	r2, #3
 8004392:	4650      	mov	r0, sl
 8004394:	7821      	ldrb	r1, [r4, #0]
 8004396:	f000 f9f7 	bl	8004788 <memchr>
 800439a:	b140      	cbz	r0, 80043ae <_svfiprintf_r+0x152>
 800439c:	2340      	movs	r3, #64	; 0x40
 800439e:	eba0 000a 	sub.w	r0, r0, sl
 80043a2:	fa03 f000 	lsl.w	r0, r3, r0
 80043a6:	9b04      	ldr	r3, [sp, #16]
 80043a8:	3401      	adds	r4, #1
 80043aa:	4303      	orrs	r3, r0
 80043ac:	9304      	str	r3, [sp, #16]
 80043ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043b2:	2206      	movs	r2, #6
 80043b4:	4826      	ldr	r0, [pc, #152]	; (8004450 <_svfiprintf_r+0x1f4>)
 80043b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80043ba:	f000 f9e5 	bl	8004788 <memchr>
 80043be:	2800      	cmp	r0, #0
 80043c0:	d038      	beq.n	8004434 <_svfiprintf_r+0x1d8>
 80043c2:	4b24      	ldr	r3, [pc, #144]	; (8004454 <_svfiprintf_r+0x1f8>)
 80043c4:	bb1b      	cbnz	r3, 800440e <_svfiprintf_r+0x1b2>
 80043c6:	9b03      	ldr	r3, [sp, #12]
 80043c8:	3307      	adds	r3, #7
 80043ca:	f023 0307 	bic.w	r3, r3, #7
 80043ce:	3308      	adds	r3, #8
 80043d0:	9303      	str	r3, [sp, #12]
 80043d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043d4:	4433      	add	r3, r6
 80043d6:	9309      	str	r3, [sp, #36]	; 0x24
 80043d8:	e767      	b.n	80042aa <_svfiprintf_r+0x4e>
 80043da:	460c      	mov	r4, r1
 80043dc:	2001      	movs	r0, #1
 80043de:	fb0c 3202 	mla	r2, ip, r2, r3
 80043e2:	e7a5      	b.n	8004330 <_svfiprintf_r+0xd4>
 80043e4:	2300      	movs	r3, #0
 80043e6:	f04f 0c0a 	mov.w	ip, #10
 80043ea:	4619      	mov	r1, r3
 80043ec:	3401      	adds	r4, #1
 80043ee:	9305      	str	r3, [sp, #20]
 80043f0:	4620      	mov	r0, r4
 80043f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80043f6:	3a30      	subs	r2, #48	; 0x30
 80043f8:	2a09      	cmp	r2, #9
 80043fa:	d903      	bls.n	8004404 <_svfiprintf_r+0x1a8>
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d0c5      	beq.n	800438c <_svfiprintf_r+0x130>
 8004400:	9105      	str	r1, [sp, #20]
 8004402:	e7c3      	b.n	800438c <_svfiprintf_r+0x130>
 8004404:	4604      	mov	r4, r0
 8004406:	2301      	movs	r3, #1
 8004408:	fb0c 2101 	mla	r1, ip, r1, r2
 800440c:	e7f0      	b.n	80043f0 <_svfiprintf_r+0x194>
 800440e:	ab03      	add	r3, sp, #12
 8004410:	9300      	str	r3, [sp, #0]
 8004412:	462a      	mov	r2, r5
 8004414:	4638      	mov	r0, r7
 8004416:	4b10      	ldr	r3, [pc, #64]	; (8004458 <_svfiprintf_r+0x1fc>)
 8004418:	a904      	add	r1, sp, #16
 800441a:	f3af 8000 	nop.w
 800441e:	1c42      	adds	r2, r0, #1
 8004420:	4606      	mov	r6, r0
 8004422:	d1d6      	bne.n	80043d2 <_svfiprintf_r+0x176>
 8004424:	89ab      	ldrh	r3, [r5, #12]
 8004426:	065b      	lsls	r3, r3, #25
 8004428:	f53f af2c 	bmi.w	8004284 <_svfiprintf_r+0x28>
 800442c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800442e:	b01d      	add	sp, #116	; 0x74
 8004430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004434:	ab03      	add	r3, sp, #12
 8004436:	9300      	str	r3, [sp, #0]
 8004438:	462a      	mov	r2, r5
 800443a:	4638      	mov	r0, r7
 800443c:	4b06      	ldr	r3, [pc, #24]	; (8004458 <_svfiprintf_r+0x1fc>)
 800443e:	a904      	add	r1, sp, #16
 8004440:	f000 f87c 	bl	800453c <_printf_i>
 8004444:	e7eb      	b.n	800441e <_svfiprintf_r+0x1c2>
 8004446:	bf00      	nop
 8004448:	08004aa4 	.word	0x08004aa4
 800444c:	08004aaa 	.word	0x08004aaa
 8004450:	08004aae 	.word	0x08004aae
 8004454:	00000000 	.word	0x00000000
 8004458:	080041a5 	.word	0x080041a5

0800445c <_printf_common>:
 800445c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004460:	4616      	mov	r6, r2
 8004462:	4699      	mov	r9, r3
 8004464:	688a      	ldr	r2, [r1, #8]
 8004466:	690b      	ldr	r3, [r1, #16]
 8004468:	4607      	mov	r7, r0
 800446a:	4293      	cmp	r3, r2
 800446c:	bfb8      	it	lt
 800446e:	4613      	movlt	r3, r2
 8004470:	6033      	str	r3, [r6, #0]
 8004472:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004476:	460c      	mov	r4, r1
 8004478:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800447c:	b10a      	cbz	r2, 8004482 <_printf_common+0x26>
 800447e:	3301      	adds	r3, #1
 8004480:	6033      	str	r3, [r6, #0]
 8004482:	6823      	ldr	r3, [r4, #0]
 8004484:	0699      	lsls	r1, r3, #26
 8004486:	bf42      	ittt	mi
 8004488:	6833      	ldrmi	r3, [r6, #0]
 800448a:	3302      	addmi	r3, #2
 800448c:	6033      	strmi	r3, [r6, #0]
 800448e:	6825      	ldr	r5, [r4, #0]
 8004490:	f015 0506 	ands.w	r5, r5, #6
 8004494:	d106      	bne.n	80044a4 <_printf_common+0x48>
 8004496:	f104 0a19 	add.w	sl, r4, #25
 800449a:	68e3      	ldr	r3, [r4, #12]
 800449c:	6832      	ldr	r2, [r6, #0]
 800449e:	1a9b      	subs	r3, r3, r2
 80044a0:	42ab      	cmp	r3, r5
 80044a2:	dc28      	bgt.n	80044f6 <_printf_common+0x9a>
 80044a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80044a8:	1e13      	subs	r3, r2, #0
 80044aa:	6822      	ldr	r2, [r4, #0]
 80044ac:	bf18      	it	ne
 80044ae:	2301      	movne	r3, #1
 80044b0:	0692      	lsls	r2, r2, #26
 80044b2:	d42d      	bmi.n	8004510 <_printf_common+0xb4>
 80044b4:	4649      	mov	r1, r9
 80044b6:	4638      	mov	r0, r7
 80044b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80044bc:	47c0      	blx	r8
 80044be:	3001      	adds	r0, #1
 80044c0:	d020      	beq.n	8004504 <_printf_common+0xa8>
 80044c2:	6823      	ldr	r3, [r4, #0]
 80044c4:	68e5      	ldr	r5, [r4, #12]
 80044c6:	f003 0306 	and.w	r3, r3, #6
 80044ca:	2b04      	cmp	r3, #4
 80044cc:	bf18      	it	ne
 80044ce:	2500      	movne	r5, #0
 80044d0:	6832      	ldr	r2, [r6, #0]
 80044d2:	f04f 0600 	mov.w	r6, #0
 80044d6:	68a3      	ldr	r3, [r4, #8]
 80044d8:	bf08      	it	eq
 80044da:	1aad      	subeq	r5, r5, r2
 80044dc:	6922      	ldr	r2, [r4, #16]
 80044de:	bf08      	it	eq
 80044e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80044e4:	4293      	cmp	r3, r2
 80044e6:	bfc4      	itt	gt
 80044e8:	1a9b      	subgt	r3, r3, r2
 80044ea:	18ed      	addgt	r5, r5, r3
 80044ec:	341a      	adds	r4, #26
 80044ee:	42b5      	cmp	r5, r6
 80044f0:	d11a      	bne.n	8004528 <_printf_common+0xcc>
 80044f2:	2000      	movs	r0, #0
 80044f4:	e008      	b.n	8004508 <_printf_common+0xac>
 80044f6:	2301      	movs	r3, #1
 80044f8:	4652      	mov	r2, sl
 80044fa:	4649      	mov	r1, r9
 80044fc:	4638      	mov	r0, r7
 80044fe:	47c0      	blx	r8
 8004500:	3001      	adds	r0, #1
 8004502:	d103      	bne.n	800450c <_printf_common+0xb0>
 8004504:	f04f 30ff 	mov.w	r0, #4294967295
 8004508:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800450c:	3501      	adds	r5, #1
 800450e:	e7c4      	b.n	800449a <_printf_common+0x3e>
 8004510:	2030      	movs	r0, #48	; 0x30
 8004512:	18e1      	adds	r1, r4, r3
 8004514:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004518:	1c5a      	adds	r2, r3, #1
 800451a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800451e:	4422      	add	r2, r4
 8004520:	3302      	adds	r3, #2
 8004522:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004526:	e7c5      	b.n	80044b4 <_printf_common+0x58>
 8004528:	2301      	movs	r3, #1
 800452a:	4622      	mov	r2, r4
 800452c:	4649      	mov	r1, r9
 800452e:	4638      	mov	r0, r7
 8004530:	47c0      	blx	r8
 8004532:	3001      	adds	r0, #1
 8004534:	d0e6      	beq.n	8004504 <_printf_common+0xa8>
 8004536:	3601      	adds	r6, #1
 8004538:	e7d9      	b.n	80044ee <_printf_common+0x92>
	...

0800453c <_printf_i>:
 800453c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004540:	7e0f      	ldrb	r7, [r1, #24]
 8004542:	4691      	mov	r9, r2
 8004544:	2f78      	cmp	r7, #120	; 0x78
 8004546:	4680      	mov	r8, r0
 8004548:	460c      	mov	r4, r1
 800454a:	469a      	mov	sl, r3
 800454c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800454e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004552:	d807      	bhi.n	8004564 <_printf_i+0x28>
 8004554:	2f62      	cmp	r7, #98	; 0x62
 8004556:	d80a      	bhi.n	800456e <_printf_i+0x32>
 8004558:	2f00      	cmp	r7, #0
 800455a:	f000 80d9 	beq.w	8004710 <_printf_i+0x1d4>
 800455e:	2f58      	cmp	r7, #88	; 0x58
 8004560:	f000 80a4 	beq.w	80046ac <_printf_i+0x170>
 8004564:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004568:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800456c:	e03a      	b.n	80045e4 <_printf_i+0xa8>
 800456e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004572:	2b15      	cmp	r3, #21
 8004574:	d8f6      	bhi.n	8004564 <_printf_i+0x28>
 8004576:	a101      	add	r1, pc, #4	; (adr r1, 800457c <_printf_i+0x40>)
 8004578:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800457c:	080045d5 	.word	0x080045d5
 8004580:	080045e9 	.word	0x080045e9
 8004584:	08004565 	.word	0x08004565
 8004588:	08004565 	.word	0x08004565
 800458c:	08004565 	.word	0x08004565
 8004590:	08004565 	.word	0x08004565
 8004594:	080045e9 	.word	0x080045e9
 8004598:	08004565 	.word	0x08004565
 800459c:	08004565 	.word	0x08004565
 80045a0:	08004565 	.word	0x08004565
 80045a4:	08004565 	.word	0x08004565
 80045a8:	080046f7 	.word	0x080046f7
 80045ac:	08004619 	.word	0x08004619
 80045b0:	080046d9 	.word	0x080046d9
 80045b4:	08004565 	.word	0x08004565
 80045b8:	08004565 	.word	0x08004565
 80045bc:	08004719 	.word	0x08004719
 80045c0:	08004565 	.word	0x08004565
 80045c4:	08004619 	.word	0x08004619
 80045c8:	08004565 	.word	0x08004565
 80045cc:	08004565 	.word	0x08004565
 80045d0:	080046e1 	.word	0x080046e1
 80045d4:	682b      	ldr	r3, [r5, #0]
 80045d6:	1d1a      	adds	r2, r3, #4
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	602a      	str	r2, [r5, #0]
 80045dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80045e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80045e4:	2301      	movs	r3, #1
 80045e6:	e0a4      	b.n	8004732 <_printf_i+0x1f6>
 80045e8:	6820      	ldr	r0, [r4, #0]
 80045ea:	6829      	ldr	r1, [r5, #0]
 80045ec:	0606      	lsls	r6, r0, #24
 80045ee:	f101 0304 	add.w	r3, r1, #4
 80045f2:	d50a      	bpl.n	800460a <_printf_i+0xce>
 80045f4:	680e      	ldr	r6, [r1, #0]
 80045f6:	602b      	str	r3, [r5, #0]
 80045f8:	2e00      	cmp	r6, #0
 80045fa:	da03      	bge.n	8004604 <_printf_i+0xc8>
 80045fc:	232d      	movs	r3, #45	; 0x2d
 80045fe:	4276      	negs	r6, r6
 8004600:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004604:	230a      	movs	r3, #10
 8004606:	485e      	ldr	r0, [pc, #376]	; (8004780 <_printf_i+0x244>)
 8004608:	e019      	b.n	800463e <_printf_i+0x102>
 800460a:	680e      	ldr	r6, [r1, #0]
 800460c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004610:	602b      	str	r3, [r5, #0]
 8004612:	bf18      	it	ne
 8004614:	b236      	sxthne	r6, r6
 8004616:	e7ef      	b.n	80045f8 <_printf_i+0xbc>
 8004618:	682b      	ldr	r3, [r5, #0]
 800461a:	6820      	ldr	r0, [r4, #0]
 800461c:	1d19      	adds	r1, r3, #4
 800461e:	6029      	str	r1, [r5, #0]
 8004620:	0601      	lsls	r1, r0, #24
 8004622:	d501      	bpl.n	8004628 <_printf_i+0xec>
 8004624:	681e      	ldr	r6, [r3, #0]
 8004626:	e002      	b.n	800462e <_printf_i+0xf2>
 8004628:	0646      	lsls	r6, r0, #25
 800462a:	d5fb      	bpl.n	8004624 <_printf_i+0xe8>
 800462c:	881e      	ldrh	r6, [r3, #0]
 800462e:	2f6f      	cmp	r7, #111	; 0x6f
 8004630:	bf0c      	ite	eq
 8004632:	2308      	moveq	r3, #8
 8004634:	230a      	movne	r3, #10
 8004636:	4852      	ldr	r0, [pc, #328]	; (8004780 <_printf_i+0x244>)
 8004638:	2100      	movs	r1, #0
 800463a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800463e:	6865      	ldr	r5, [r4, #4]
 8004640:	2d00      	cmp	r5, #0
 8004642:	bfa8      	it	ge
 8004644:	6821      	ldrge	r1, [r4, #0]
 8004646:	60a5      	str	r5, [r4, #8]
 8004648:	bfa4      	itt	ge
 800464a:	f021 0104 	bicge.w	r1, r1, #4
 800464e:	6021      	strge	r1, [r4, #0]
 8004650:	b90e      	cbnz	r6, 8004656 <_printf_i+0x11a>
 8004652:	2d00      	cmp	r5, #0
 8004654:	d04d      	beq.n	80046f2 <_printf_i+0x1b6>
 8004656:	4615      	mov	r5, r2
 8004658:	fbb6 f1f3 	udiv	r1, r6, r3
 800465c:	fb03 6711 	mls	r7, r3, r1, r6
 8004660:	5dc7      	ldrb	r7, [r0, r7]
 8004662:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004666:	4637      	mov	r7, r6
 8004668:	42bb      	cmp	r3, r7
 800466a:	460e      	mov	r6, r1
 800466c:	d9f4      	bls.n	8004658 <_printf_i+0x11c>
 800466e:	2b08      	cmp	r3, #8
 8004670:	d10b      	bne.n	800468a <_printf_i+0x14e>
 8004672:	6823      	ldr	r3, [r4, #0]
 8004674:	07de      	lsls	r6, r3, #31
 8004676:	d508      	bpl.n	800468a <_printf_i+0x14e>
 8004678:	6923      	ldr	r3, [r4, #16]
 800467a:	6861      	ldr	r1, [r4, #4]
 800467c:	4299      	cmp	r1, r3
 800467e:	bfde      	ittt	le
 8004680:	2330      	movle	r3, #48	; 0x30
 8004682:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004686:	f105 35ff 	addle.w	r5, r5, #4294967295
 800468a:	1b52      	subs	r2, r2, r5
 800468c:	6122      	str	r2, [r4, #16]
 800468e:	464b      	mov	r3, r9
 8004690:	4621      	mov	r1, r4
 8004692:	4640      	mov	r0, r8
 8004694:	f8cd a000 	str.w	sl, [sp]
 8004698:	aa03      	add	r2, sp, #12
 800469a:	f7ff fedf 	bl	800445c <_printf_common>
 800469e:	3001      	adds	r0, #1
 80046a0:	d14c      	bne.n	800473c <_printf_i+0x200>
 80046a2:	f04f 30ff 	mov.w	r0, #4294967295
 80046a6:	b004      	add	sp, #16
 80046a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046ac:	4834      	ldr	r0, [pc, #208]	; (8004780 <_printf_i+0x244>)
 80046ae:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80046b2:	6829      	ldr	r1, [r5, #0]
 80046b4:	6823      	ldr	r3, [r4, #0]
 80046b6:	f851 6b04 	ldr.w	r6, [r1], #4
 80046ba:	6029      	str	r1, [r5, #0]
 80046bc:	061d      	lsls	r5, r3, #24
 80046be:	d514      	bpl.n	80046ea <_printf_i+0x1ae>
 80046c0:	07df      	lsls	r7, r3, #31
 80046c2:	bf44      	itt	mi
 80046c4:	f043 0320 	orrmi.w	r3, r3, #32
 80046c8:	6023      	strmi	r3, [r4, #0]
 80046ca:	b91e      	cbnz	r6, 80046d4 <_printf_i+0x198>
 80046cc:	6823      	ldr	r3, [r4, #0]
 80046ce:	f023 0320 	bic.w	r3, r3, #32
 80046d2:	6023      	str	r3, [r4, #0]
 80046d4:	2310      	movs	r3, #16
 80046d6:	e7af      	b.n	8004638 <_printf_i+0xfc>
 80046d8:	6823      	ldr	r3, [r4, #0]
 80046da:	f043 0320 	orr.w	r3, r3, #32
 80046de:	6023      	str	r3, [r4, #0]
 80046e0:	2378      	movs	r3, #120	; 0x78
 80046e2:	4828      	ldr	r0, [pc, #160]	; (8004784 <_printf_i+0x248>)
 80046e4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80046e8:	e7e3      	b.n	80046b2 <_printf_i+0x176>
 80046ea:	0659      	lsls	r1, r3, #25
 80046ec:	bf48      	it	mi
 80046ee:	b2b6      	uxthmi	r6, r6
 80046f0:	e7e6      	b.n	80046c0 <_printf_i+0x184>
 80046f2:	4615      	mov	r5, r2
 80046f4:	e7bb      	b.n	800466e <_printf_i+0x132>
 80046f6:	682b      	ldr	r3, [r5, #0]
 80046f8:	6826      	ldr	r6, [r4, #0]
 80046fa:	1d18      	adds	r0, r3, #4
 80046fc:	6961      	ldr	r1, [r4, #20]
 80046fe:	6028      	str	r0, [r5, #0]
 8004700:	0635      	lsls	r5, r6, #24
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	d501      	bpl.n	800470a <_printf_i+0x1ce>
 8004706:	6019      	str	r1, [r3, #0]
 8004708:	e002      	b.n	8004710 <_printf_i+0x1d4>
 800470a:	0670      	lsls	r0, r6, #25
 800470c:	d5fb      	bpl.n	8004706 <_printf_i+0x1ca>
 800470e:	8019      	strh	r1, [r3, #0]
 8004710:	2300      	movs	r3, #0
 8004712:	4615      	mov	r5, r2
 8004714:	6123      	str	r3, [r4, #16]
 8004716:	e7ba      	b.n	800468e <_printf_i+0x152>
 8004718:	682b      	ldr	r3, [r5, #0]
 800471a:	2100      	movs	r1, #0
 800471c:	1d1a      	adds	r2, r3, #4
 800471e:	602a      	str	r2, [r5, #0]
 8004720:	681d      	ldr	r5, [r3, #0]
 8004722:	6862      	ldr	r2, [r4, #4]
 8004724:	4628      	mov	r0, r5
 8004726:	f000 f82f 	bl	8004788 <memchr>
 800472a:	b108      	cbz	r0, 8004730 <_printf_i+0x1f4>
 800472c:	1b40      	subs	r0, r0, r5
 800472e:	6060      	str	r0, [r4, #4]
 8004730:	6863      	ldr	r3, [r4, #4]
 8004732:	6123      	str	r3, [r4, #16]
 8004734:	2300      	movs	r3, #0
 8004736:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800473a:	e7a8      	b.n	800468e <_printf_i+0x152>
 800473c:	462a      	mov	r2, r5
 800473e:	4649      	mov	r1, r9
 8004740:	4640      	mov	r0, r8
 8004742:	6923      	ldr	r3, [r4, #16]
 8004744:	47d0      	blx	sl
 8004746:	3001      	adds	r0, #1
 8004748:	d0ab      	beq.n	80046a2 <_printf_i+0x166>
 800474a:	6823      	ldr	r3, [r4, #0]
 800474c:	079b      	lsls	r3, r3, #30
 800474e:	d413      	bmi.n	8004778 <_printf_i+0x23c>
 8004750:	68e0      	ldr	r0, [r4, #12]
 8004752:	9b03      	ldr	r3, [sp, #12]
 8004754:	4298      	cmp	r0, r3
 8004756:	bfb8      	it	lt
 8004758:	4618      	movlt	r0, r3
 800475a:	e7a4      	b.n	80046a6 <_printf_i+0x16a>
 800475c:	2301      	movs	r3, #1
 800475e:	4632      	mov	r2, r6
 8004760:	4649      	mov	r1, r9
 8004762:	4640      	mov	r0, r8
 8004764:	47d0      	blx	sl
 8004766:	3001      	adds	r0, #1
 8004768:	d09b      	beq.n	80046a2 <_printf_i+0x166>
 800476a:	3501      	adds	r5, #1
 800476c:	68e3      	ldr	r3, [r4, #12]
 800476e:	9903      	ldr	r1, [sp, #12]
 8004770:	1a5b      	subs	r3, r3, r1
 8004772:	42ab      	cmp	r3, r5
 8004774:	dcf2      	bgt.n	800475c <_printf_i+0x220>
 8004776:	e7eb      	b.n	8004750 <_printf_i+0x214>
 8004778:	2500      	movs	r5, #0
 800477a:	f104 0619 	add.w	r6, r4, #25
 800477e:	e7f5      	b.n	800476c <_printf_i+0x230>
 8004780:	08004ab5 	.word	0x08004ab5
 8004784:	08004ac6 	.word	0x08004ac6

08004788 <memchr>:
 8004788:	4603      	mov	r3, r0
 800478a:	b510      	push	{r4, lr}
 800478c:	b2c9      	uxtb	r1, r1
 800478e:	4402      	add	r2, r0
 8004790:	4293      	cmp	r3, r2
 8004792:	4618      	mov	r0, r3
 8004794:	d101      	bne.n	800479a <memchr+0x12>
 8004796:	2000      	movs	r0, #0
 8004798:	e003      	b.n	80047a2 <memchr+0x1a>
 800479a:	7804      	ldrb	r4, [r0, #0]
 800479c:	3301      	adds	r3, #1
 800479e:	428c      	cmp	r4, r1
 80047a0:	d1f6      	bne.n	8004790 <memchr+0x8>
 80047a2:	bd10      	pop	{r4, pc}

080047a4 <memcpy>:
 80047a4:	440a      	add	r2, r1
 80047a6:	4291      	cmp	r1, r2
 80047a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80047ac:	d100      	bne.n	80047b0 <memcpy+0xc>
 80047ae:	4770      	bx	lr
 80047b0:	b510      	push	{r4, lr}
 80047b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80047b6:	4291      	cmp	r1, r2
 80047b8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80047bc:	d1f9      	bne.n	80047b2 <memcpy+0xe>
 80047be:	bd10      	pop	{r4, pc}

080047c0 <memmove>:
 80047c0:	4288      	cmp	r0, r1
 80047c2:	b510      	push	{r4, lr}
 80047c4:	eb01 0402 	add.w	r4, r1, r2
 80047c8:	d902      	bls.n	80047d0 <memmove+0x10>
 80047ca:	4284      	cmp	r4, r0
 80047cc:	4623      	mov	r3, r4
 80047ce:	d807      	bhi.n	80047e0 <memmove+0x20>
 80047d0:	1e43      	subs	r3, r0, #1
 80047d2:	42a1      	cmp	r1, r4
 80047d4:	d008      	beq.n	80047e8 <memmove+0x28>
 80047d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80047da:	f803 2f01 	strb.w	r2, [r3, #1]!
 80047de:	e7f8      	b.n	80047d2 <memmove+0x12>
 80047e0:	4601      	mov	r1, r0
 80047e2:	4402      	add	r2, r0
 80047e4:	428a      	cmp	r2, r1
 80047e6:	d100      	bne.n	80047ea <memmove+0x2a>
 80047e8:	bd10      	pop	{r4, pc}
 80047ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80047ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80047f2:	e7f7      	b.n	80047e4 <memmove+0x24>

080047f4 <_free_r>:
 80047f4:	b538      	push	{r3, r4, r5, lr}
 80047f6:	4605      	mov	r5, r0
 80047f8:	2900      	cmp	r1, #0
 80047fa:	d040      	beq.n	800487e <_free_r+0x8a>
 80047fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004800:	1f0c      	subs	r4, r1, #4
 8004802:	2b00      	cmp	r3, #0
 8004804:	bfb8      	it	lt
 8004806:	18e4      	addlt	r4, r4, r3
 8004808:	f000 f910 	bl	8004a2c <__malloc_lock>
 800480c:	4a1c      	ldr	r2, [pc, #112]	; (8004880 <_free_r+0x8c>)
 800480e:	6813      	ldr	r3, [r2, #0]
 8004810:	b933      	cbnz	r3, 8004820 <_free_r+0x2c>
 8004812:	6063      	str	r3, [r4, #4]
 8004814:	6014      	str	r4, [r2, #0]
 8004816:	4628      	mov	r0, r5
 8004818:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800481c:	f000 b90c 	b.w	8004a38 <__malloc_unlock>
 8004820:	42a3      	cmp	r3, r4
 8004822:	d908      	bls.n	8004836 <_free_r+0x42>
 8004824:	6820      	ldr	r0, [r4, #0]
 8004826:	1821      	adds	r1, r4, r0
 8004828:	428b      	cmp	r3, r1
 800482a:	bf01      	itttt	eq
 800482c:	6819      	ldreq	r1, [r3, #0]
 800482e:	685b      	ldreq	r3, [r3, #4]
 8004830:	1809      	addeq	r1, r1, r0
 8004832:	6021      	streq	r1, [r4, #0]
 8004834:	e7ed      	b.n	8004812 <_free_r+0x1e>
 8004836:	461a      	mov	r2, r3
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	b10b      	cbz	r3, 8004840 <_free_r+0x4c>
 800483c:	42a3      	cmp	r3, r4
 800483e:	d9fa      	bls.n	8004836 <_free_r+0x42>
 8004840:	6811      	ldr	r1, [r2, #0]
 8004842:	1850      	adds	r0, r2, r1
 8004844:	42a0      	cmp	r0, r4
 8004846:	d10b      	bne.n	8004860 <_free_r+0x6c>
 8004848:	6820      	ldr	r0, [r4, #0]
 800484a:	4401      	add	r1, r0
 800484c:	1850      	adds	r0, r2, r1
 800484e:	4283      	cmp	r3, r0
 8004850:	6011      	str	r1, [r2, #0]
 8004852:	d1e0      	bne.n	8004816 <_free_r+0x22>
 8004854:	6818      	ldr	r0, [r3, #0]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	4401      	add	r1, r0
 800485a:	6011      	str	r1, [r2, #0]
 800485c:	6053      	str	r3, [r2, #4]
 800485e:	e7da      	b.n	8004816 <_free_r+0x22>
 8004860:	d902      	bls.n	8004868 <_free_r+0x74>
 8004862:	230c      	movs	r3, #12
 8004864:	602b      	str	r3, [r5, #0]
 8004866:	e7d6      	b.n	8004816 <_free_r+0x22>
 8004868:	6820      	ldr	r0, [r4, #0]
 800486a:	1821      	adds	r1, r4, r0
 800486c:	428b      	cmp	r3, r1
 800486e:	bf01      	itttt	eq
 8004870:	6819      	ldreq	r1, [r3, #0]
 8004872:	685b      	ldreq	r3, [r3, #4]
 8004874:	1809      	addeq	r1, r1, r0
 8004876:	6021      	streq	r1, [r4, #0]
 8004878:	6063      	str	r3, [r4, #4]
 800487a:	6054      	str	r4, [r2, #4]
 800487c:	e7cb      	b.n	8004816 <_free_r+0x22>
 800487e:	bd38      	pop	{r3, r4, r5, pc}
 8004880:	200001f0 	.word	0x200001f0

08004884 <sbrk_aligned>:
 8004884:	b570      	push	{r4, r5, r6, lr}
 8004886:	4e0e      	ldr	r6, [pc, #56]	; (80048c0 <sbrk_aligned+0x3c>)
 8004888:	460c      	mov	r4, r1
 800488a:	6831      	ldr	r1, [r6, #0]
 800488c:	4605      	mov	r5, r0
 800488e:	b911      	cbnz	r1, 8004896 <sbrk_aligned+0x12>
 8004890:	f000 f8bc 	bl	8004a0c <_sbrk_r>
 8004894:	6030      	str	r0, [r6, #0]
 8004896:	4621      	mov	r1, r4
 8004898:	4628      	mov	r0, r5
 800489a:	f000 f8b7 	bl	8004a0c <_sbrk_r>
 800489e:	1c43      	adds	r3, r0, #1
 80048a0:	d00a      	beq.n	80048b8 <sbrk_aligned+0x34>
 80048a2:	1cc4      	adds	r4, r0, #3
 80048a4:	f024 0403 	bic.w	r4, r4, #3
 80048a8:	42a0      	cmp	r0, r4
 80048aa:	d007      	beq.n	80048bc <sbrk_aligned+0x38>
 80048ac:	1a21      	subs	r1, r4, r0
 80048ae:	4628      	mov	r0, r5
 80048b0:	f000 f8ac 	bl	8004a0c <_sbrk_r>
 80048b4:	3001      	adds	r0, #1
 80048b6:	d101      	bne.n	80048bc <sbrk_aligned+0x38>
 80048b8:	f04f 34ff 	mov.w	r4, #4294967295
 80048bc:	4620      	mov	r0, r4
 80048be:	bd70      	pop	{r4, r5, r6, pc}
 80048c0:	200001f4 	.word	0x200001f4

080048c4 <_malloc_r>:
 80048c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048c8:	1ccd      	adds	r5, r1, #3
 80048ca:	f025 0503 	bic.w	r5, r5, #3
 80048ce:	3508      	adds	r5, #8
 80048d0:	2d0c      	cmp	r5, #12
 80048d2:	bf38      	it	cc
 80048d4:	250c      	movcc	r5, #12
 80048d6:	2d00      	cmp	r5, #0
 80048d8:	4607      	mov	r7, r0
 80048da:	db01      	blt.n	80048e0 <_malloc_r+0x1c>
 80048dc:	42a9      	cmp	r1, r5
 80048de:	d905      	bls.n	80048ec <_malloc_r+0x28>
 80048e0:	230c      	movs	r3, #12
 80048e2:	2600      	movs	r6, #0
 80048e4:	603b      	str	r3, [r7, #0]
 80048e6:	4630      	mov	r0, r6
 80048e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80048ec:	4e2e      	ldr	r6, [pc, #184]	; (80049a8 <_malloc_r+0xe4>)
 80048ee:	f000 f89d 	bl	8004a2c <__malloc_lock>
 80048f2:	6833      	ldr	r3, [r6, #0]
 80048f4:	461c      	mov	r4, r3
 80048f6:	bb34      	cbnz	r4, 8004946 <_malloc_r+0x82>
 80048f8:	4629      	mov	r1, r5
 80048fa:	4638      	mov	r0, r7
 80048fc:	f7ff ffc2 	bl	8004884 <sbrk_aligned>
 8004900:	1c43      	adds	r3, r0, #1
 8004902:	4604      	mov	r4, r0
 8004904:	d14d      	bne.n	80049a2 <_malloc_r+0xde>
 8004906:	6834      	ldr	r4, [r6, #0]
 8004908:	4626      	mov	r6, r4
 800490a:	2e00      	cmp	r6, #0
 800490c:	d140      	bne.n	8004990 <_malloc_r+0xcc>
 800490e:	6823      	ldr	r3, [r4, #0]
 8004910:	4631      	mov	r1, r6
 8004912:	4638      	mov	r0, r7
 8004914:	eb04 0803 	add.w	r8, r4, r3
 8004918:	f000 f878 	bl	8004a0c <_sbrk_r>
 800491c:	4580      	cmp	r8, r0
 800491e:	d13a      	bne.n	8004996 <_malloc_r+0xd2>
 8004920:	6821      	ldr	r1, [r4, #0]
 8004922:	3503      	adds	r5, #3
 8004924:	1a6d      	subs	r5, r5, r1
 8004926:	f025 0503 	bic.w	r5, r5, #3
 800492a:	3508      	adds	r5, #8
 800492c:	2d0c      	cmp	r5, #12
 800492e:	bf38      	it	cc
 8004930:	250c      	movcc	r5, #12
 8004932:	4638      	mov	r0, r7
 8004934:	4629      	mov	r1, r5
 8004936:	f7ff ffa5 	bl	8004884 <sbrk_aligned>
 800493a:	3001      	adds	r0, #1
 800493c:	d02b      	beq.n	8004996 <_malloc_r+0xd2>
 800493e:	6823      	ldr	r3, [r4, #0]
 8004940:	442b      	add	r3, r5
 8004942:	6023      	str	r3, [r4, #0]
 8004944:	e00e      	b.n	8004964 <_malloc_r+0xa0>
 8004946:	6822      	ldr	r2, [r4, #0]
 8004948:	1b52      	subs	r2, r2, r5
 800494a:	d41e      	bmi.n	800498a <_malloc_r+0xc6>
 800494c:	2a0b      	cmp	r2, #11
 800494e:	d916      	bls.n	800497e <_malloc_r+0xba>
 8004950:	1961      	adds	r1, r4, r5
 8004952:	42a3      	cmp	r3, r4
 8004954:	6025      	str	r5, [r4, #0]
 8004956:	bf18      	it	ne
 8004958:	6059      	strne	r1, [r3, #4]
 800495a:	6863      	ldr	r3, [r4, #4]
 800495c:	bf08      	it	eq
 800495e:	6031      	streq	r1, [r6, #0]
 8004960:	5162      	str	r2, [r4, r5]
 8004962:	604b      	str	r3, [r1, #4]
 8004964:	4638      	mov	r0, r7
 8004966:	f104 060b 	add.w	r6, r4, #11
 800496a:	f000 f865 	bl	8004a38 <__malloc_unlock>
 800496e:	f026 0607 	bic.w	r6, r6, #7
 8004972:	1d23      	adds	r3, r4, #4
 8004974:	1af2      	subs	r2, r6, r3
 8004976:	d0b6      	beq.n	80048e6 <_malloc_r+0x22>
 8004978:	1b9b      	subs	r3, r3, r6
 800497a:	50a3      	str	r3, [r4, r2]
 800497c:	e7b3      	b.n	80048e6 <_malloc_r+0x22>
 800497e:	6862      	ldr	r2, [r4, #4]
 8004980:	42a3      	cmp	r3, r4
 8004982:	bf0c      	ite	eq
 8004984:	6032      	streq	r2, [r6, #0]
 8004986:	605a      	strne	r2, [r3, #4]
 8004988:	e7ec      	b.n	8004964 <_malloc_r+0xa0>
 800498a:	4623      	mov	r3, r4
 800498c:	6864      	ldr	r4, [r4, #4]
 800498e:	e7b2      	b.n	80048f6 <_malloc_r+0x32>
 8004990:	4634      	mov	r4, r6
 8004992:	6876      	ldr	r6, [r6, #4]
 8004994:	e7b9      	b.n	800490a <_malloc_r+0x46>
 8004996:	230c      	movs	r3, #12
 8004998:	4638      	mov	r0, r7
 800499a:	603b      	str	r3, [r7, #0]
 800499c:	f000 f84c 	bl	8004a38 <__malloc_unlock>
 80049a0:	e7a1      	b.n	80048e6 <_malloc_r+0x22>
 80049a2:	6025      	str	r5, [r4, #0]
 80049a4:	e7de      	b.n	8004964 <_malloc_r+0xa0>
 80049a6:	bf00      	nop
 80049a8:	200001f0 	.word	0x200001f0

080049ac <_realloc_r>:
 80049ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049b0:	4680      	mov	r8, r0
 80049b2:	4614      	mov	r4, r2
 80049b4:	460e      	mov	r6, r1
 80049b6:	b921      	cbnz	r1, 80049c2 <_realloc_r+0x16>
 80049b8:	4611      	mov	r1, r2
 80049ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80049be:	f7ff bf81 	b.w	80048c4 <_malloc_r>
 80049c2:	b92a      	cbnz	r2, 80049d0 <_realloc_r+0x24>
 80049c4:	f7ff ff16 	bl	80047f4 <_free_r>
 80049c8:	4625      	mov	r5, r4
 80049ca:	4628      	mov	r0, r5
 80049cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80049d0:	f000 f838 	bl	8004a44 <_malloc_usable_size_r>
 80049d4:	4284      	cmp	r4, r0
 80049d6:	4607      	mov	r7, r0
 80049d8:	d802      	bhi.n	80049e0 <_realloc_r+0x34>
 80049da:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80049de:	d812      	bhi.n	8004a06 <_realloc_r+0x5a>
 80049e0:	4621      	mov	r1, r4
 80049e2:	4640      	mov	r0, r8
 80049e4:	f7ff ff6e 	bl	80048c4 <_malloc_r>
 80049e8:	4605      	mov	r5, r0
 80049ea:	2800      	cmp	r0, #0
 80049ec:	d0ed      	beq.n	80049ca <_realloc_r+0x1e>
 80049ee:	42bc      	cmp	r4, r7
 80049f0:	4622      	mov	r2, r4
 80049f2:	4631      	mov	r1, r6
 80049f4:	bf28      	it	cs
 80049f6:	463a      	movcs	r2, r7
 80049f8:	f7ff fed4 	bl	80047a4 <memcpy>
 80049fc:	4631      	mov	r1, r6
 80049fe:	4640      	mov	r0, r8
 8004a00:	f7ff fef8 	bl	80047f4 <_free_r>
 8004a04:	e7e1      	b.n	80049ca <_realloc_r+0x1e>
 8004a06:	4635      	mov	r5, r6
 8004a08:	e7df      	b.n	80049ca <_realloc_r+0x1e>
	...

08004a0c <_sbrk_r>:
 8004a0c:	b538      	push	{r3, r4, r5, lr}
 8004a0e:	2300      	movs	r3, #0
 8004a10:	4d05      	ldr	r5, [pc, #20]	; (8004a28 <_sbrk_r+0x1c>)
 8004a12:	4604      	mov	r4, r0
 8004a14:	4608      	mov	r0, r1
 8004a16:	602b      	str	r3, [r5, #0]
 8004a18:	f7ff fb10 	bl	800403c <_sbrk>
 8004a1c:	1c43      	adds	r3, r0, #1
 8004a1e:	d102      	bne.n	8004a26 <_sbrk_r+0x1a>
 8004a20:	682b      	ldr	r3, [r5, #0]
 8004a22:	b103      	cbz	r3, 8004a26 <_sbrk_r+0x1a>
 8004a24:	6023      	str	r3, [r4, #0]
 8004a26:	bd38      	pop	{r3, r4, r5, pc}
 8004a28:	200001f8 	.word	0x200001f8

08004a2c <__malloc_lock>:
 8004a2c:	4801      	ldr	r0, [pc, #4]	; (8004a34 <__malloc_lock+0x8>)
 8004a2e:	f000 b811 	b.w	8004a54 <__retarget_lock_acquire_recursive>
 8004a32:	bf00      	nop
 8004a34:	200001fc 	.word	0x200001fc

08004a38 <__malloc_unlock>:
 8004a38:	4801      	ldr	r0, [pc, #4]	; (8004a40 <__malloc_unlock+0x8>)
 8004a3a:	f000 b80c 	b.w	8004a56 <__retarget_lock_release_recursive>
 8004a3e:	bf00      	nop
 8004a40:	200001fc 	.word	0x200001fc

08004a44 <_malloc_usable_size_r>:
 8004a44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a48:	1f18      	subs	r0, r3, #4
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	bfbc      	itt	lt
 8004a4e:	580b      	ldrlt	r3, [r1, r0]
 8004a50:	18c0      	addlt	r0, r0, r3
 8004a52:	4770      	bx	lr

08004a54 <__retarget_lock_acquire_recursive>:
 8004a54:	4770      	bx	lr

08004a56 <__retarget_lock_release_recursive>:
 8004a56:	4770      	bx	lr

08004a58 <_init>:
 8004a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a5a:	bf00      	nop
 8004a5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a5e:	bc08      	pop	{r3}
 8004a60:	469e      	mov	lr, r3
 8004a62:	4770      	bx	lr

08004a64 <_fini>:
 8004a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a66:	bf00      	nop
 8004a68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a6a:	bc08      	pop	{r3}
 8004a6c:	469e      	mov	lr, r3
 8004a6e:	4770      	bx	lr
